type 'a equal = {equal : 'a -> 'a -> bool}
  type nat = Nat of Z.t
  type 'a ord = {less_eq : 'a -> 'a -> bool; less : 'a -> 'a -> bool}
  type 'a preorder = {ord_preorder : 'a ord}
  type 'a order = {preorder_order : 'a preorder}
  type 'a linorder = {order_linorder : 'a order}
  type 'a nFA_states = {states_enumerate : nat -> 'a}
  type ('b, 'a) rbt
  val integer_of_nat : nat -> Z.t
  val nat_of_integer : Z.t -> nat
  val prod_encode : nat * nat -> nat