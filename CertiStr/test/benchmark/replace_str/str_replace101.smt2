(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Oliver Markgraf
Generator: Stranger
Generated on: 2023-04-03
Application: Real Web Applications
Target solver: SLENT
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun literal_5 () String)
(declare-fun b_literal_5 () Bool)
(declare-fun literal_4 () String)
(declare-fun b_literal_4 () Bool)
(declare-fun literal_2 () String)
(declare-fun b_literal_2 () Bool)
(declare-fun sigmaStar_053 () String)
(declare-fun b_sigmaStar_053 () Bool)
(declare-fun sigmaStar_safe_54 () String)
(declare-fun b_sigmaStar_safe_54 () Bool)
(declare-fun sigmaStar_safe_55 () String)
(declare-fun b_sigmaStar_safe_55 () Bool)
(declare-fun literal_3 () String)
(declare-fun b_literal_3 () Bool)
(declare-fun literal_11 () String)
(declare-fun b_literal_11 () Bool)
(declare-fun literal_16 () String)
(declare-fun b_literal_16 () Bool)
(declare-fun literal_19 () String)
(declare-fun b_literal_19 () Bool)
(declare-fun literal_21 () String)
(declare-fun b_literal_21 () Bool)
(declare-fun literal_24 () String)
(declare-fun b_literal_24 () Bool)
(declare-fun literal_25 () String)
(declare-fun b_literal_25 () Bool)
(declare-fun sigmaStar_safe_66 () String)
(declare-fun b_sigmaStar_safe_66 () Bool)
(declare-fun sigmaStar_safe_67 () String)
(declare-fun b_sigmaStar_safe_67 () Bool)
(declare-fun sigmaStar_safe_68 () String)
(declare-fun b_sigmaStar_safe_68 () Bool)
(declare-fun sigmaStar_safe_69 () String)
(declare-fun b_sigmaStar_safe_69 () Bool)
(declare-fun literal_33 () String)
(declare-fun b_literal_33 () Bool)
(declare-fun atkPtn () String)
(declare-fun b_atkPtn () Bool)
(declare-fun x_6 () String)
(declare-fun b_x_6 () Bool)
(declare-fun x_7 () String)
(declare-fun b_x_7 () Bool)
(declare-fun x_8 () String)
(declare-fun b_x_8 () Bool)
(declare-fun x_12 () String)
(declare-fun b_x_12 () Bool)
(declare-fun x_14 () String)
(declare-fun b_x_14 () Bool)
(declare-fun x_15 () String)
(declare-fun b_x_15 () Bool)
(declare-fun x_17 () String)
(declare-fun b_x_17 () Bool)
(declare-fun x_18 () String)
(declare-fun b_x_18 () Bool)
(declare-fun x_20 () String)
(declare-fun b_x_20 () Bool)
(declare-fun x_22 () String)
(declare-fun b_x_22 () Bool)
(declare-fun x_23 () String)
(declare-fun b_x_23 () Bool)
(declare-fun x_26 () String)
(declare-fun b_x_26 () Bool)
(declare-fun x_27 () String)
(declare-fun b_x_27 () Bool)
(declare-fun x_28 () String)
(declare-fun b_x_28 () Bool)
(declare-fun x_29 () String)
(declare-fun b_x_29 () Bool)
(declare-fun x_30 () String)
(declare-fun b_x_30 () Bool)
(declare-fun x_31 () String)
(declare-fun b_x_31 () Bool)
(declare-fun x_32 () String)
(declare-fun b_x_32 () Bool)
(declare-fun x_34 () String)
(declare-fun b_x_34 () Bool)
(declare-fun x_35 () String)
(declare-fun b_x_35 () Bool)
(declare-fun x_36 () String)
(declare-fun b_x_36 () Bool)
(declare-fun sink () String)
(declare-fun b_sink () Bool)
(declare-fun atk_sigmaStar_1 () String)
(declare-fun atk_sigmaStar_2 () String)
(declare-fun atk_sink () String)
(declare-fun sigmaStar_n0 () String)
(declare-fun b_sigmaStar_n0 () Bool)
(declare-fun sigmaStar_n1 () String)
(declare-fun b_sigmaStar_n1 () Bool)
(declare-fun sigmaStar_n2 () String)
(declare-fun b_sigmaStar_n2 () Bool)


(assert (= literal_5 "\x74\x62\x6c\x31"))

(assert (= literal_4 "\x74\x62\x6c\x32"))

(assert (= literal_2 ""))
(assert (str.in_re sigmaStar_safe_54 (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))))
(assert (str.in_re sigmaStar_safe_55 (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))))

(assert (= literal_3 "\x3c\x74\x72\x3e\x72\x6e\x3c\x74\x64\x20\x63\x6c\x61\x73\x73\x3d\x27"))

(assert (= literal_11 ""))

(assert (= literal_16 "\x3e\x3c\x73\x70\x61\x6e\x20\x74\x69\x74\x6c\x65\x3d"))

(assert (= literal_19 "\x3c\x2f\x73\x70\x61\x6e\x3e\x3c\x2f\x74\x64\x3e\x72\x6e\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x63\x65\x6e\x74\x65\x72\x27\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x25\x27\x20\x63\x6c\x61\x73\x73\x3d\x27"))

(assert (= literal_21 "\x27\x20\x73\x74\x79\x6c\x65\x3d\x27\x63\x75\x72\x73\x6f\x72\x3a\x68\x61\x6e\x64\x3b\x27\x3e"))

(assert (= literal_24 "\x20\x73\x74\x79\x6c\x65\x3d\x77\x68\x69\x74\x65\x2d\x73\x70\x61\x63\x65\x3a\x6e\x6f\x77\x72\x61\x70\x27\x3e"))

(assert (= literal_25 "\x3c\x2f\x74\x64\x3e\x72\x6e\x3c\x74\x64\x20\x61\x6c\x69\x67\x6e\x3d\x27\x63\x65\x6e\x74\x65\x72\x27\x20\x77\x69\x64\x74\x68\x3d\x27\x31\x25\x27\x20\x63\x6c\x61\x73\x73\x3d\x27"))
(assert (str.in_re sigmaStar_safe_66 (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))))
(assert (str.in_re sigmaStar_safe_67 (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))))
(assert (str.in_re sigmaStar_safe_68 (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))))
(assert (str.in_re sigmaStar_safe_69 (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))))

(assert (= literal_33 "\x20\x73\x74\x79\x6c\x65\x3d\x77\x68\x69\x74\x65\x2d\x73\x70\x61\x63\x65\x3a\x6e\x6f\x77\x72\x61\x70\x27\x3e\x5c\x6e"))
(assert (str.in_re atkPtn (str.to_re "javascript:")))
(declare-fun tmp_0 () String)
(assert (= tmp_0 (str.++ atkPtn atk_sigmaStar_2)))
(assert (= atk_sink (str.++ atk_sigmaStar_1 tmp_0)))
(assert (= x_6 literal_5))

(assert (= x_6 literal_4))



(assert (= x_7 (str.++ literal_2 sigmaStar_053)))


(assert (= x_8 sigmaStar_safe_54))

(assert (= x_8 sigmaStar_safe_55))



(assert (= x_12 (str.++ literal_3 x_6)))


(assert (= x_14 (str.replace x_8 "." " ") ))



(assert (= x_15 (str.++ x_7 literal_11)))




(assert (= x_17 (str.++ x_12 literal_16)))


(assert (= x_18 x_15))

(assert (= x_18 x_14))



(assert (= x_20 (str.++ x_17 x_18)))




(assert (= x_22 (str.++ literal_19 sigmaStar_n0)))




(assert (= x_23 (str.++ x_20 literal_21)))




(assert (= x_26 (str.++ x_22 literal_24)))




(assert (= x_27 (str.++ x_23 sigmaStar_n1)))




(assert (= x_28 (str.++ literal_25 sigmaStar_n2)))


(assert (= x_29 sigmaStar_safe_66))

(assert (= x_29 sigmaStar_safe_67))

(assert (= x_30 x_29))

(assert (= x_30 sigmaStar_safe_68))

(assert (= x_31 x_30))

(assert (= x_31 sigmaStar_safe_69))



(assert (= x_32 (str.++ x_27 x_26)))




(assert (= x_34 (str.++ x_28 literal_33)))




(assert (= x_35 (str.++ x_32 x_31)))




(assert (= x_36 (str.++ x_35 x_34)))


(assert (= sink x_36))
(assert (= sink atk_sink))


(check-sat)
(exit)