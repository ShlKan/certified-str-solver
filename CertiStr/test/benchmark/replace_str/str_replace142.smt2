(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Oliver Markgraf
Generator: Stranger
Generated on: 2023-04-03
Application: Real Web Applications
Target solver: SLENT
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun sigmaStar_safe_50 () String)
(declare-fun b_sigmaStar_safe_50 () Bool)
(declare-fun sigmaStar_safe_51 () String)
(declare-fun b_sigmaStar_safe_51 () Bool)
(declare-fun sigmaStar_252 () String)
(declare-fun b_sigmaStar_252 () Bool)
(declare-fun literal_10 () String)
(declare-fun b_literal_10 () Bool)
(declare-fun sigmaStar_057 () String)
(declare-fun b_sigmaStar_057 () Bool)
(declare-fun literal_15 () String)
(declare-fun b_literal_15 () Bool)
(declare-fun literal_20 () String)
(declare-fun b_literal_20 () Bool)
(declare-fun sigmaStar_163 () String)
(declare-fun b_sigmaStar_163 () Bool)
(declare-fun literal_23 () String)
(declare-fun b_literal_23 () Bool)
(declare-fun atkPtn () String)
(declare-fun b_atkPtn () Bool)
(declare-fun x_4 () String)
(declare-fun b_x_4 () Bool)
(declare-fun x_5 () String)
(declare-fun b_x_5 () Bool)
(declare-fun x_9 () String)
(declare-fun b_x_9 () Bool)
(declare-fun x_11 () String)
(declare-fun b_x_11 () Bool)
(declare-fun x_12 () String)
(declare-fun b_x_12 () Bool)
(declare-fun x_17 () String)
(declare-fun b_x_17 () Bool)
(declare-fun x_18 () String)
(declare-fun b_x_18 () Bool)
(declare-fun x_19 () String)
(declare-fun b_x_19 () Bool)
(declare-fun x_21 () String)
(declare-fun b_x_21 () Bool)
(declare-fun x_22 () String)
(declare-fun b_x_22 () Bool)
(declare-fun x_24 () String)
(declare-fun b_x_24 () Bool)
(declare-fun sink () String)
(declare-fun b_sink () Bool)
(declare-fun atk_sigmaStar_1 () String)
(declare-fun atk_sigmaStar_2 () String)
(declare-fun atk_sink () String)
(declare-fun sigmaStar_n0 () String)
(declare-fun b_sigmaStar_n0 () Bool)

(assert (str.in_re sigmaStar_safe_50 (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))))
(assert (str.in_re sigmaStar_safe_51 (re.* (re.union (re.range "0" "9") (re.union (re.range "a" "z") (re.range "A" "Z"))))))

(assert (= literal_10 "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a"))

(assert (= literal_15 "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27"))

(assert (= literal_20 "\x27\x3e"))

(assert (= literal_23 "\x3c\x2f\x61\x3e\x5d\x5c\x6e"))
(assert (str.in_re atkPtn (re.++ (re.union (str.to_re "j") (re.union (str.to_re "|") (str.to_re "J"))) (re.++ (re.union (str.to_re "a") (re.union (str.to_re "|") (str.to_re "A"))) (re.++ (re.union (str.to_re "v") (re.union (str.to_re "|") (str.to_re "V"))) (re.++ (re.union (str.to_re "a") (re.union (str.to_re "|") (str.to_re "A"))) (re.++ (re.union (str.to_re "s") (re.union (str.to_re "|") (str.to_re "S"))) (re.++ (re.union (str.to_re "c") (re.union (str.to_re "|") (str.to_re "C"))) (re.++ (re.union (str.to_re "r") (re.union (str.to_re "|") (str.to_re "R"))) (re.++ (re.union (str.to_re "i") (re.union (str.to_re "|") (str.to_re "I"))) (re.++ (re.union (str.to_re "p") (re.union (str.to_re "|") (str.to_re "P"))) (re.++ (re.union (str.to_re "t") (re.union (str.to_re "|") (str.to_re "T"))) (str.to_re ":")))))))))))))
(declare-fun tmp_0 () String)
(assert (= tmp_0 (str.++ atkPtn atk_sigmaStar_2)))
(assert (= atk_sink (str.++ atk_sigmaStar_1 tmp_0)))
(assert (= x_4 sigmaStar_safe_50))

(assert (= x_4 sigmaStar_safe_51))

(assert (= x_5 x_4))

(assert (= x_5 sigmaStar_252))

(assert (= x_9 (str.replace x_5 "@" "&#64;") ))



(assert (= x_11 (str.++ literal_10 x_9)))


(assert (= x_12 sigmaStar_n0))

(assert (= x_12 sigmaStar_057))

(assert (= x_17 (str.replace x_12 "@" "&#64;") ))



(assert (= x_18 (str.++ x_11 literal_15)))




(assert (= x_19 (str.++ x_18 x_17)))




(assert (= x_21 (str.++ x_19 literal_20)))




(assert (= x_22 (str.++ x_21 sigmaStar_163)))




(assert (= x_24 (str.++ x_22 literal_23)))


(assert (= sink x_24))
(assert (= sink atk_sink))


(check-sat)
(exit)