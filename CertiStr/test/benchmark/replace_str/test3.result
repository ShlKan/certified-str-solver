Test (./lan_replace101.smt2):
Loading ./lan_replace101.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3243ms)
Prover 2: stopped
Prover 4: stopped
Prover 0: stopped
Prover 3: stopped


26561ms

real	0m26.689s
user	0m41.078s
sys	0m0.767s
unsat
Test (./lan_replace11.smt2):
Loading ./lan_replace11.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3475ms)
Prover 0: stopped
Prover 3: stopped
Prover 4: stopped
Prover 2: stopped


28987ms

real	0m29.099s
user	0m44.092s
sys	0m0.782s
unsat
Test (./lan_replace26.smt2):
Loading ./lan_replace26.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: proved (3239ms)
Prover 0: stopped


10695ms

real	0m10.804s
user	0m15.808s
sys	0m0.338s
unsat
Test (./lan_replace35.smt2):
Loading ./lan_replace35.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3981ms)
Prover 0: stopped
Prover 4: stopped
Prover 2: stopped
Prover 3: stopped


29525ms

real	0m29.637s
user	0m43.075s
sys	0m0.716s
unsat
Test (./lan_replace54.smt2):
Loading ./lan_replace54.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3093ms)
Prover 2: stopped
Prover 0: stopped
Prover 4: stopped
Prover 3: stopped


28325ms

real	0m28.499s
user	0m37.861s
sys	0m0.679s
unsat
Test (./lan_replace63.smt2):
Loading ./lan_replace63.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (4166ms)
Prover 0: stopped
Prover 4: stopped
Prover 2: stopped
Prover 3: stopped


31721ms

real	0m31.888s
user	0m43.377s
sys	0m0.810s
unsat
Test (./lan_replace77.smt2):
Loading ./lan_replace77.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: proven invalid (512ms)
Prover 0: stopped


15919ms

real	0m16.050s
user	0m21.849s
sys	0m0.393s
sat
Test (./lan_replace80.smt2):
Loading ./lan_replace80.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 1: proved (124453ms)
Prover 2: stopped
Prover 0: stopped
Prover 4: stopped


511342ms

real	8m31.475s
user	9m59.306s
sys	0m3.921s
unsat
Test (./slog_stranger_145_sink.smt2):
Loading ./slog_stranger_145_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (910ms)


921ms

real	0m1.063s
user	0m2.856s
sys	0m0.160s
sat
Test (./slog_stranger_147_sink.smt2):
Loading ./slog_stranger_147_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1265ms)


1275ms

real	0m1.409s
user	0m4.478s
sys	0m0.196s
sat
Test (./slog_stranger_149_sink.smt2):
Loading ./slog_stranger_149_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1530ms)


1544ms

real	0m1.678s
user	0m5.677s
sys	0m0.218s
sat
Test (./slog_stranger_150_sink.smt2):
Loading ./slog_stranger_150_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1949ms)


1960ms

real	0m2.092s
user	0m7.449s
sys	0m0.272s
sat
Test (./slog_stranger_151_sink.smt2):
Loading ./slog_stranger_151_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (419ms)


429ms

real	0m0.544s
user	0m1.096s
sys	0m0.086s
sat
Test (./slog_stranger_153_sink.smt2):
Loading ./slog_stranger_153_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2188ms)


2198ms

real	0m2.334s
user	0m8.241s
sys	0m0.284s
sat
Test (./slog_stranger_1615_sink.smt2):
Loading ./slog_stranger_1615_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (763ms)


775ms

real	0m0.894s
user	0m2.638s
sys	0m0.132s
sat
Test (./slog_stranger_1620_sink.smt2):
Loading ./slog_stranger_1620_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (759ms)


769ms

real	0m0.899s
user	0m2.594s
sys	0m0.133s
sat
Test (./slog_stranger_1622_sink.smt2):
Loading ./slog_stranger_1622_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (779ms)


788ms

real	0m0.919s
user	0m2.673s
sys	0m0.128s
sat
Test (./slog_stranger_1624_sink.smt2):
Loading ./slog_stranger_1624_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (743ms)


754ms

real	0m0.884s
user	0m2.521s
sys	0m0.128s
sat
Test (./slog_stranger_1626_sink.smt2):
Loading ./slog_stranger_1626_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (781ms)


792ms

real	0m0.927s
user	0m2.683s
sys	0m0.130s
sat
Test (./slog_stranger_1629_sink.smt2):
Loading ./slog_stranger_1629_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (745ms)


754ms

real	0m0.885s
user	0m2.527s
sys	0m0.129s
sat
Test (./slog_stranger_1631_sink.smt2):
Loading ./slog_stranger_1631_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (754ms)


765ms

real	0m0.894s
user	0m2.489s
sys	0m0.132s
sat
Test (./slog_stranger_1632_sink.smt2):
Loading ./slog_stranger_1632_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (801ms)


813ms

real	0m0.941s
user	0m2.766s
sys	0m0.133s
sat
Test (./slog_stranger_1635_sink.smt2):
Loading ./slog_stranger_1635_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (774ms)


784ms

real	0m0.922s
user	0m2.619s
sys	0m0.132s
sat
Test (./slog_stranger_1638_sink.smt2):
Loading ./slog_stranger_1638_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (765ms)


775ms

real	0m0.904s
user	0m2.582s
sys	0m0.131s
sat
Test (./slog_stranger_1641_sink.smt2):
Loading ./slog_stranger_1641_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (809ms)


820ms

real	0m0.948s
user	0m2.691s
sys	0m0.135s
sat
Test (./slog_stranger_1642_sink.smt2):
Loading ./slog_stranger_1642_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (758ms)


768ms

real	0m0.900s
user	0m2.547s
sys	0m0.131s
sat
Test (./slog_stranger_1643_sink.smt2):
Loading ./slog_stranger_1643_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (871ms)


881ms

real	0m1.017s
user	0m2.945s
sys	0m0.143s
sat
Test (./slog_stranger_1820_sink.smt2):
Loading ./slog_stranger_1820_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_72 =
Prover 1:      concatCEPreOp(x_70, "\n\n")
Prover 1:    x_51 =
Prover 1:      concatCEPreOp(x_9, " not found\n")
Prover 1:    x_53 =
Prover 1:      concatCEPreOp(x_47, "timemodified = \n")
Prover 1:    x_52 =
Prover 1:      concatCEPreOp(x_45, "\nbecause it could not be found.\n")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, x_48)
Prover 1:    x_70 =
Prover 1:      ReplaceCEPreOp(x_66)
Prover 1:    x_47 =
Prover 1:      concatCEPreOp(x_38, "rawtext = \n")
Prover 1:    x_45 =
Prover 1:      concatCEPreOp("Could not delete DB cache_filters entry for ", sigmaStar_7)
Prover 1:    x_43 =
Prover 1:      concatCEPreOp(x_34, "\n")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_39, "\n")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp("Number of records deleted = ", x_33)
Prover 1:    x_66 =
Prover 1:      ReplaceCEPreOp(x_62)
Prover 1:    x_38 =
Prover 1:      concatCEPreOp(x_28, "md5key = \n")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp("Deleting DB cache_filters entry for ", sigmaStar_7)
Prover 1:    x_28 =
Prover 1:      concatCEPreOp(x_23, "version = \n")
Prover 1:    x_62 =
Prover 1:      ReplaceCEPreOp(x_58)
Prover 1:    x_23 =
Prover 1:      concatCEPreOp(x_19, "filter = \n")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_13, "id = \n")
Prover 1:    x_13 =
Prover 1:      concatCEPreOp(x_9, "\n")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("DB cache_filters entry for ", sigmaStar_7)
Prover 1: proven invalid (255ms)
Prover 0: stopped


7706ms

real	0m7.839s
user	0m21.466s
sys	0m0.611s
sat
Test (./slog_stranger_1821_sink.smt2):
Loading ./slog_stranger_1821_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2482ms)


2492ms

real	0m2.625s
user	0m9.385s
sys	0m0.302s
sat
Test (./slog_stranger_1822_sink.smt2):
Loading ./slog_stranger_1822_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2137ms)


2146ms

real	0m2.283s
user	0m8.018s
sys	0m0.282s
sat
Test (./slog_stranger_1828_sink.smt2):
Loading ./slog_stranger_1828_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_82 =
Prover 1:      concatCEPreOp("//mimetex.exe", x_77)
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_74, sigmaStar_69)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_71, sigmaStar_69)
Prover 1:    x_80 =
Prover 1:      concatCEPreOp(x_75, sigmaStar_69)
Prover 1:    x_96 =
Prover 1:      concatCEPreOp(x_93, "<br />\n")
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_76, sigmaStar_69)
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("//", sigmaStar_26)
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_58, " -- ")
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_64, sigmaStar_69)
Prover 1:    x_74 =
Prover 1:      concatCEPreOp(x_60, "\" ")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_90, "<br />returned status = ")
Prover 1:    x_76 =
Prover 1:      concatCEPreOp(x_62, "\" -- ")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_61, "\" -- ")
Prover 1:    x_60 =
Prover 1:      concatCEPreOp("\"//mimetex.freebsd\" -e \"", x_55)
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_53, "\" -- ")
Prover 1:    x_58 =
Prover 1:      concatCEPreOp("//mimetex -e ", x_52)
Prover 1:    x_62 =
Prover 1:      concatCEPreOp("\"//mimetex.linux\" -e \"", x_57)
Prover 1:    x_61 =
Prover 1:      concatCEPreOp("\"//mimetex.darwin\" -e \"", x_56)
Prover 1:    x_90 =
Prover 1:      concatCEPreOp("The shell command<br />", x_89)
Prover 1:    x_53 =
Prover 1:      concatCEPreOp(" ++ -e  \"", x_46)
Prover 1: proven invalid (243ms)
Prover 0: stopped


7714ms

real	0m7.850s
user	0m18.485s
sys	0m0.472s
sat
Test (./slog_stranger_1830_sink.smt2):
Loading ./slog_stranger_1830_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (429ms)


439ms

real	0m0.572s
user	0m1.083s
sys	0m0.087s
sat
Test (./slog_stranger_1835_sink.smt2):
Loading ./slog_stranger_1835_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (543ms)


552ms

real	0m0.681s
user	0m1.634s
sys	0m0.105s
sat
Test (./slog_stranger_1836_sink.smt2):
Loading ./slog_stranger_1836_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (551ms)


560ms

real	0m0.693s
user	0m1.647s
sys	0m0.102s
sat
Test (./slog_stranger_1837_sink.smt2):
Loading ./slog_stranger_1837_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (592ms)


608ms

real	0m0.749s
user	0m1.723s
sys	0m0.106s
sat
Test (./slog_stranger_1838_sink.smt2):
Loading ./slog_stranger_1838_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (538ms)


549ms

real	0m0.679s
user	0m1.623s
sys	0m0.103s
sat
Test (./slog_stranger_1839_sink.smt2):
Loading ./slog_stranger_1839_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (564ms)


575ms

real	0m0.701s
user	0m1.697s
sys	0m0.104s
sat
Test (./slog_stranger_1840_sink.smt2):
Loading ./slog_stranger_1840_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (616ms)


626ms

real	0m0.755s
user	0m1.773s
sys	0m0.109s
sat
Test (./slog_stranger_1841_sink.smt2):
Loading ./slog_stranger_1841_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (712ms)


722ms

real	0m0.855s
user	0m2.393s
sys	0m0.125s
sat
Test (./slog_stranger_1856_sink.smt2):
Loading ./slog_stranger_1856_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (4666ms)


4675ms

real	0m4.803s
user	0m15.809s
sys	0m0.469s
sat
Test (./slog_stranger_2204_sink.smt2):
Loading ./slog_stranger_2204_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (260ms)


270ms

real	0m0.387s
user	0m0.652s
sys	0m0.066s
unsat
Test (./slog_stranger_252_sink.smt2):
Loading ./slog_stranger_252_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2022ms)


2033ms

real	0m2.166s
user	0m7.608s
sys	0m0.275s
sat
Test (./slog_stranger_2728_sink.smt2):
Loading ./slog_stranger_2728_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (247ms)


256ms

real	0m0.383s
user	0m0.604s
sys	0m0.062s
unsat
Test (./slog_stranger_2852_sink.smt2):
Loading ./slog_stranger_2852_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_6 =
Prover 1:      concatCEPreOp(x_4, ".php")
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_0)
Prover 1: proven invalid (120ms)
Prover 0: stopped


7556ms

real	0m7.678s
user	0m15.880s
sys	0m0.355s
sat
Test (./slog_stranger_2884_sink.smt2):
Loading ./slog_stranger_2884_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (879ms)


890ms

real	0m1.022s
user	0m2.824s
sys	0m0.148s
sat
Test (./slog_stranger_2886_sink.smt2):
Loading ./slog_stranger_2886_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1282ms)


1293ms

real	0m1.438s
user	0m4.414s
sys	0m0.194s
sat
Test (./slog_stranger_2891_sink.smt2):
Loading ./slog_stranger_2891_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1484ms)


1495ms

real	0m1.626s
user	0m5.473s
sys	0m0.213s
sat
Test (./slog_stranger_30_sink.smt2):
Loading ./slog_stranger_30_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_60 =
Prover 1:      concatCEPreOp(x_48, "email"></A>&nbsp;")
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(sigmaStar_2, x_81)
Prover 1:    x_68 =
Prover 1:      concatCEPreOp(x_57, "website URL"></A>&nbsp;")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, " BORDER=0 ALT=\"")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, " BORDER=0 ALT=\"")
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "</FONT></TD></TR>")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "http://localhost/emailbut.png")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "http://localhost/homebut.png")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\"><IMG SRC=")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\"><IMG SRC=")
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "delete"></A>&nbsp;")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, x_76)
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, " BORDER=0 ALT=\"")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, x_72)
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"http://", x_24)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"mailto:", x_15)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("</TD><TD STYLE=TEXT-ALIGN:right;><FONT SIZE=1>", x_65)
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "http://localhost/delbut.png")
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_0)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_4)
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "><IMG SRC=")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=pblguestbook.php?action=delete&id=", sigmaStar_6)
Prover 1: proven invalid (411ms)
Prover 0: stopped


7863ms

real	0m7.982s
user	0m15.400s
sys	0m0.404s
sat
Test (./slog_stranger_32_sink.smt2):
Loading ./slog_stranger_32_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(sigmaStar_6, x_97)
Prover 1:    x_84 =
Prover 1:      concatCEPreOp(x_73, "website URL"></A>&nbsp;")
Prover 1:    x_76 =
Prover 1:      concatCEPreOp(x_64, "email"></A>&nbsp;")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, " BORDER=0 ALT=\"")
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "</FONT></TD></TR>")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, " BORDER=0 ALT=\"")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "http://localhost/homebut.png")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "http://localhost/emailbut.png")
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\"><IMG SRC=")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "delete"></A>&nbsp;")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\"><IMG SRC=")
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, x_92)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, " BORDER=0 ALT=\"")
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"mailto:", x_23)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"http://", x_34)
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, x_88)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("</TD><TD STYLE=TEXT-ALIGN:right;><FONT SIZE=1>", x_81)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "http://localhost/delbut.png")
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_3)
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "><IMG SRC=")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_2)
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=pblguestbook.php?action=delete&id=", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_5)
Prover 1: proven invalid (763ms)
Prover 0: stopped


8224ms

real	0m8.362s
user	0m21.899s
sys	0m0.564s
sat
Test (./slog_stranger_343_sink.smt2):
Loading ./slog_stranger_343_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (553ms)


565ms

real	0m0.692s
user	0m1.519s
sys	0m0.098s
sat
Test (./slog_stranger_346_sink.smt2):
Loading ./slog_stranger_346_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(x_6)
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_37, "<br />\n")
Prover 1:    x_37 =
Prover 1:      concatCEPreOp(x_35, "</div>")
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_35 =
Prover 1:      concatCEPreOp(x_34, x_32)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_31, "">")
Prover 1:    x_31 =
Prover 1:      concatCEPreOp(x_30, "center")
Prover 1:    x_30 =
Prover 1:      concatCEPreOp(x_24, "" align="")
Prover 1:    x_24 =
Prover 1:      concatCEPreOp("<div class="", x_22)
Prover 1: proven invalid (723ms)
Prover 0: stopped


8174ms

real	0m8.295s
user	0m20.057s
sys	0m0.517s
sat
Test (./slog_stranger_3786_sink.smt2):
Loading ./slog_stranger_3786_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2328ms)


2337ms

real	0m2.476s
user	0m8.479s
sys	0m0.295s
sat
Test (./slog_stranger_38_sink.smt2):
Loading ./slog_stranger_38_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_60 =
Prover 1:      concatCEPreOp(x_48, "email"></A>&nbsp;")
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(sigmaStar_4, x_81)
Prover 1:    x_68 =
Prover 1:      concatCEPreOp(x_57, "website URL"></A>&nbsp;")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, " BORDER=0 ALT=\"")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, " BORDER=0 ALT=\"")
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "</FONT></TD></TR>")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "http://localhost/emailbut.png")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "http://localhost/homebut.png")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\"><IMG SRC=")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\"><IMG SRC=")
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "delete"></A>&nbsp;")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, x_76)
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, " BORDER=0 ALT=\"")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, x_72)
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"http://", x_24)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"mailto:", x_15)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("</TD><TD STYLE=TEXT-ALIGN:right;><FONT SIZE=1>", x_65)
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "http://localhost/delbut.png")
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_1)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_0)
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "><IMG SRC=")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=pblguestbook.php?action=delete&id=", sigmaStar_6)
Prover 1: proven invalid (391ms)
Prover 0: stopped


7864ms

real	0m8.002s
user	0m14.976s
sys	0m0.379s
sat
Test (./slog_stranger_39_sink.smt2):
Loading ./slog_stranger_39_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (975ms)


985ms

real	0m1.111s
user	0m3.448s
sys	0m0.157s
sat
Test (./slog_stranger_4062_sink.smt2):
Loading ./slog_stranger_4062_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_36 =
Prover 1:      concatCEPreOp(x_32, x_34)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_28, " style=white-space:nowrap'>\n")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp(x_23, x_26)
Prover 1:    x_28 =
Prover 1:      concatCEPreOp("</td>
Prover 1: <td align='center' width='1%' class='", x_6)
Prover 1:    x_26 =
Prover 1:      concatCEPreOp(x_22, " style=white-space:nowrap'>")
Prover 1:    x_23 =
Prover 1:      concatCEPreOp(x_20, "' style='cursor:hand;'>")
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(x_17, x_18)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp("</span></td>
Prover 1: <td align='center' width='1%' class='", x_6)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_12, "><span title=")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("<tr>
Prover 1: <td class='", x_6)
Prover 1: proven invalid (261ms)
Prover 0: stopped


7700ms

real	0m7.827s
user	0m19.545s
sys	0m0.509s
sat
Test (./slog_stranger_40_sink.smt2):
Loading ./slog_stranger_40_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(sigmaStar_6, x_97)
Prover 1:    x_84 =
Prover 1:      concatCEPreOp(x_73, "website URL"></A>&nbsp;")
Prover 1:    x_76 =
Prover 1:      concatCEPreOp(x_64, "email"></A>&nbsp;")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, " BORDER=0 ALT=\"")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, " BORDER=0 ALT=\"")
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "</FONT></TD></TR>")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "http://localhost/emailbut.png")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "http://localhost/homebut.png")
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, x_92)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\"><IMG SRC=")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "delete"></A>&nbsp;")
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\"><IMG SRC=")
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, " BORDER=0 ALT=\"")
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"mailto:", x_23)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"http://", x_34)
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, x_88)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "http://localhost/delbut.png")
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("</TD><TD STYLE=TEXT-ALIGN:right;><FONT SIZE=1>", x_81)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_3)
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "><IMG SRC=")
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_1)
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=pblguestbook.php?action=delete&id=", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_5)
Prover 1: proven invalid (686ms)
Prover 0: stopped


8144ms

real	0m8.291s
user	0m20.199s
sys	0m0.548s
sat
Test (./slog_stranger_4158_sink.smt2):
Loading ./slog_stranger_4158_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2143ms)


2153ms

real	0m2.287s
user	0m8.247s
sys	0m0.278s
sat
Test (./slog_stranger_4200_sink.smt2):
Loading ./slog_stranger_4200_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(x_14, "</span></td>
Prover 1: </tr>\n")
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_4)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_13, sigmaStar_12)
Prover 1:    x_13 =
Prover 1:      concatCEPreOp(x_10, "</td>
Prover 1: <td class='tbl1'><input type='file' name='attach' enctype='multipart/form-data' class='textbox' style='width:200px;'><br>
Prover 1: <span class='small2'>")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("<tr>
Prover 1: <td width='145' class='tbl2'>", sigmaStar_1)
Prover 1: proven invalid (392ms)
Prover 0: stopped


7876ms

real	0m8.020s
user	0m13.812s
sys	0m0.316s
sat
Test (./slog_stranger_4237_sink.smt2):
Loading ./slog_stranger_4237_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(x_14, "</span></td>
Prover 1: </tr>\n")
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_13, sigmaStar_12)
Prover 1:    x_13 =
Prover 1:      concatCEPreOp(x_10, "</td>
Prover 1: <td class='tbl1'><input type='file' name='attach' enctype='multipart/form-data' class='textbox' style='width:200px;'><br>
Prover 1: <span class='small2'>")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("<tr>
Prover 1: <td width='145' class='tbl2'>", sigmaStar_1)
Prover 1: proven invalid (359ms)
Prover 0: stopped


7826ms

real	0m8.020s
user	0m13.674s
sys	0m0.326s
sat
Test (./slog_stranger_4267_sink.smt2):
Loading ./slog_stranger_4267_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (769ms)


785ms

real	0m0.917s
user	0m2.569s
sys	0m0.131s
sat
Test (./slog_stranger_4308_sink.smt2):
Loading ./slog_stranger_4308_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2085ms)


2095ms

real	0m2.225s
user	0m7.924s
sys	0m0.282s
sat
Test (./slog_stranger_4312_sink.smt2):
Loading ./slog_stranger_4312_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2106ms)


2117ms

real	0m2.251s
user	0m8.066s
sys	0m0.280s
sat
Test (./slog_stranger_4319_sink.smt2):
Loading ./slog_stranger_4319_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (4374ms)


4384ms

real	0m4.525s
user	0m13.014s
sys	0m0.419s
sat
Test (./slog_stranger_4595_sink.smt2):
Loading ./slog_stranger_4595_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(x_22, "</a>]\n")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_1)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "'>")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "' title='")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(x_12)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("[<a href='mailto:", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(x_5)
Prover 1: proven invalid (183ms)
Prover 0: stopped


7626ms

real	0m7.779s
user	0m17.584s
sys	0m0.515s
sat
Test (./slog_stranger_46_sink.smt2):
Loading ./slog_stranger_46_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_60 =
Prover 1:      concatCEPreOp(x_48, "email"></A>&nbsp;")
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(sigmaStar_3, x_81)
Prover 1:    x_68 =
Prover 1:      concatCEPreOp(x_57, "website URL"></A>&nbsp;")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, " BORDER=0 ALT=\"")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, " BORDER=0 ALT=\"")
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "</FONT></TD></TR>")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "http://localhost/emailbut.png")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "http://localhost/homebut.png")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\"><IMG SRC=")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\"><IMG SRC=")
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "delete"></A>&nbsp;")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, x_76)
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, " BORDER=0 ALT=\"")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, x_72)
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"http://", x_24)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"mailto:", x_15)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("</TD><TD STYLE=TEXT-ALIGN:right;><FONT SIZE=1>", x_65)
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "http://localhost/delbut.png")
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_4)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_2)
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "><IMG SRC=")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=pblguestbook.php?action=delete&id=", sigmaStar_5)
Prover 1: proven invalid (404ms)
Prover 0: stopped


7845ms

real	0m7.980s
user	0m15.065s
sys	0m0.448s
sat
Test (./slog_stranger_48_sink.smt2):
Loading ./slog_stranger_48_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_76 =
Prover 1:      concatCEPreOp(x_64, "email"></A>&nbsp;")
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(sigmaStar_3, x_97)
Prover 1:    x_84 =
Prover 1:      concatCEPreOp(x_73, "website URL"></A>&nbsp;")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, " BORDER=0 ALT=\"")
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "</FONT></TD></TR>")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, " BORDER=0 ALT=\"")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "http://localhost/homebut.png")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "http://localhost/emailbut.png")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, x_92)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\"><IMG SRC=")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\"><IMG SRC=")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "delete"></A>&nbsp;")
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, " BORDER=0 ALT=\"")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, x_88)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"http://", x_34)
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"mailto:", x_23)
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("</TD><TD STYLE=TEXT-ALIGN:right;><FONT SIZE=1>", x_81)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "http://localhost/delbut.png")
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "><IMG SRC=")
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_0)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_1)
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=pblguestbook.php?action=delete&id=", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_2)
Prover 1: proven invalid (773ms)
Prover 0: stopped


8221ms

real	0m8.348s
user	0m20.644s
sys	0m0.593s
sat
Test (./slog_stranger_519_sink.smt2):
Loading ./slog_stranger_519_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (780ms)


790ms

real	0m0.920s
user	0m2.611s
sys	0m0.142s
sat
Test (./slog_stranger_520_sink.smt2):
Loading ./slog_stranger_520_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (773ms)


784ms

real	0m0.918s
user	0m2.620s
sys	0m0.138s
sat
Test (./slog_stranger_521_sink.smt2):
Loading ./slog_stranger_521_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (791ms)


801ms

real	0m0.933s
user	0m2.706s
sys	0m0.140s
sat
Test (./slog_stranger_523_sink.smt2):
Loading ./slog_stranger_523_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (769ms)


780ms

real	0m0.938s
user	0m2.628s
sys	0m0.148s
sat
Test (./slog_stranger_525_sink.smt2):
Loading ./slog_stranger_525_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (781ms)


790ms

real	0m0.926s
user	0m2.602s
sys	0m0.141s
sat
Test (./slog_stranger_526_sink.smt2):
Loading ./slog_stranger_526_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (768ms)


777ms

real	0m0.908s
user	0m2.641s
sys	0m0.137s
sat
Test (./slog_stranger_527_sink.smt2):
Loading ./slog_stranger_527_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (761ms)


775ms

real	0m0.896s
user	0m2.628s
sys	0m0.137s
sat
Test (./slog_stranger_528_sink.smt2):
Loading ./slog_stranger_528_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (750ms)


763ms

real	0m0.896s
user	0m2.530s
sys	0m0.138s
sat
Test (./slog_stranger_529_sink.smt2):
Loading ./slog_stranger_529_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (738ms)


749ms

real	0m0.877s
user	0m2.528s
sys	0m0.126s
sat
Test (./slog_stranger_530_sink.smt2):
Loading ./slog_stranger_530_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (775ms)


790ms

real	0m0.919s
user	0m2.625s
sys	0m0.136s
sat
Test (./slog_stranger_531_sink.smt2):
Loading ./slog_stranger_531_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (797ms)


809ms

real	0m0.939s
user	0m2.734s
sys	0m0.139s
sat
Test (./slog_stranger_532_sink.smt2):
Loading ./slog_stranger_532_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (801ms)


813ms

real	0m0.942s
user	0m2.685s
sys	0m0.142s
sat
Test (./slog_stranger_534_sink.smt2):
Loading ./slog_stranger_534_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (769ms)


779ms

real	0m0.965s
user	0m2.669s
sys	0m0.149s
sat
Test (./slog_stranger_535_sink.smt2):
Loading ./slog_stranger_535_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (770ms)


785ms

real	0m0.977s
user	0m2.639s
sys	0m0.149s
sat
Test (./slog_stranger_536_sink.smt2):
Loading ./slog_stranger_536_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (766ms)


776ms

real	0m0.956s
user	0m2.639s
sys	0m0.146s
sat
Test (./slog_stranger_538_sink.smt2):
Loading ./slog_stranger_538_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (795ms)


810ms

real	0m0.938s
user	0m2.686s
sys	0m0.126s
sat
Test (./slog_stranger_539_sink.smt2):
Loading ./slog_stranger_539_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (750ms)


760ms

real	0m0.890s
user	0m2.550s
sys	0m0.136s
sat
Test (./slog_stranger_54_sink.smt2):
Loading ./slog_stranger_54_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_68 =
Prover 1:      concatCEPreOp(x_57, "website URL"></A>&nbsp;")
Prover 1:    x_60 =
Prover 1:      concatCEPreOp(x_48, "email"></A>&nbsp;")
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(sigmaStar_4, x_81)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "</FONT></TD></TR>")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, " BORDER=0 ALT=\"")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, " BORDER=0 ALT=\"")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "http://localhost/emailbut.png")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "http://localhost/homebut.png")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, x_76)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\"><IMG SRC=")
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "delete"></A>&nbsp;")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\"><IMG SRC=")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"http://", x_24)
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, x_72)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"mailto:", x_15)
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, " BORDER=0 ALT=\"")
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_5)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("</TD><TD STYLE=TEXT-ALIGN:right;><FONT SIZE=1>", x_65)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_3)
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "http://localhost/delbut.png")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "><IMG SRC=")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=pblguestbook.php?action=delete&id=", sigmaStar_2)
Prover 1: proven invalid (389ms)
Prover 0: stopped


7830ms

real	0m7.954s
user	0m14.981s
sys	0m0.387s
sat
Test (./slog_stranger_56_sink.smt2):
Loading ./slog_stranger_56_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_76 =
Prover 1:      concatCEPreOp(x_64, "email"></A>&nbsp;")
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(sigmaStar_2, x_97)
Prover 1:    x_84 =
Prover 1:      concatCEPreOp(x_73, "website URL"></A>&nbsp;")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, " BORDER=0 ALT=\"")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, " BORDER=0 ALT=\"")
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "</FONT></TD></TR>")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "http://localhost/emailbut.png")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "http://localhost/homebut.png")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\"><IMG SRC=")
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\"><IMG SRC=")
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, x_92)
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "delete"></A>&nbsp;")
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, " BORDER=0 ALT=\"")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"http://", x_34)
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, x_88)
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"mailto:", x_23)
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("</TD><TD STYLE=TEXT-ALIGN:right;><FONT SIZE=1>", x_81)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "http://localhost/delbut.png")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_3)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_0)
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "><IMG SRC=")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=pblguestbook.php?action=delete&id=", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_4)
Prover 1: proven invalid (692ms)
Prover 0: stopped


8143ms

real	0m8.286s
user	0m19.613s
sys	0m0.519s
sat
Test (./slog_stranger_60_sink.smt2):
Loading ./slog_stranger_60_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_10, "</td>")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("<td>URL: ", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_0)
Prover 1: proven invalid (246ms)
Prover 0: stopped


7686ms

real	0m7.822s
user	0m18.476s
sys	0m0.469s
sat
Test (./slog_stranger_62_sink.smt2):
Loading ./slog_stranger_62_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_68 =
Prover 1:      concatCEPreOp(x_57, "website URL"></A>&nbsp;")
Prover 1:    x_60 =
Prover 1:      concatCEPreOp(x_48, "email"></A>&nbsp;")
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(sigmaStar_6, x_81)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "</FONT></TD></TR>")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, " BORDER=0 ALT=\"")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, " BORDER=0 ALT=\"")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "http://localhost/emailbut.png")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "http://localhost/homebut.png")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, x_76)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\"><IMG SRC=")
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "delete"></A>&nbsp;")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\"><IMG SRC=")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"http://", x_24)
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, x_72)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"mailto:", x_15)
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, " BORDER=0 ALT=\"")
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_5)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("</TD><TD STYLE=TEXT-ALIGN:right;><FONT SIZE=1>", x_65)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_4)
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "http://localhost/delbut.png")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "><IMG SRC=")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=pblguestbook.php?action=delete&id=", sigmaStar_3)
Prover 1: proven invalid (427ms)
Prover 0: stopped


7864ms

real	0m7.997s
user	0m14.890s
sys	0m0.360s
sat
Test (./slog_stranger_64_sink.smt2):
Loading ./slog_stranger_64_sink.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_76 =
Prover 1:      concatCEPreOp(x_64, "email"></A>&nbsp;")
Prover 1:    x_84 =
Prover 1:      concatCEPreOp(x_73, "website URL"></A>&nbsp;")
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(sigmaStar_0, x_97)
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, " BORDER=0 ALT=\"")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, " BORDER=0 ALT=\"")
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "</FONT></TD></TR>")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "http://localhost/homebut.png")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "http://localhost/emailbut.png")
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\"><IMG SRC=")
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, x_92)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\"><IMG SRC=")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "delete"></A>&nbsp;")
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"mailto:", x_23)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=\"http://", x_34)
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, x_88)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, " BORDER=0 ALT=\"")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("</TD><TD STYLE=TEXT-ALIGN:right;><FONT SIZE=1>", x_81)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "http://localhost/delbut.png")
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "><IMG SRC=")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_4)
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("&nbsp;<A STYLE=COLOR:blue; HREF=pblguestbook.php?action=delete&id=", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_3)
Prover 1: proven invalid (707ms)
Prover 0: stopped


8169ms

real	0m8.297s
user	0m19.021s
sys	0m0.519s
sat
Test (./str_replace0.smt2):
Loading ./str_replace0.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (404ms)


414ms

real	0m0.546s
user	0m1.081s
sys	0m0.077s
unsat
Test (./str_replace1.smt2):
Loading ./str_replace1.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (453ms)


465ms

real	0m0.578s
user	0m1.167s
sys	0m0.083s
unsat
Test (./str_replace10.smt2):
Loading ./str_replace10.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (507ms)


519ms

real	0m0.637s
user	0m1.365s
sys	0m0.096s
unsat
Test (./str_replace100.smt2):
Loading ./str_replace100.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (459ms)


475ms

real	0m0.626s
user	0m1.225s
sys	0m0.083s
unsat
Test (./str_replace101.smt2):
Loading ./str_replace101.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (384ms)


394ms

real	0m0.511s
user	0m1.013s
sys	0m0.072s
unsat
Test (./str_replace102.smt2):
Loading ./str_replace102.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (421ms)


431ms

real	0m0.559s
user	0m1.175s
sys	0m0.077s
unsat
Test (./str_replace103.smt2):
Loading ./str_replace103.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\x\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\x\x\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\x\x\x3c\x2f\x61\x3e\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\x\x\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\\x\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\\x\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\\x\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\\x\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x3c\x2f\x6\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x61\x3e\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x\x3c\x2f\x61\x3\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x\x3c\\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)

real	30m0.087s
user	37m1.049s
sys	0m10.180s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace104.smt2):
Loading ./str_replace104.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (377ms)


385ms

real	0m0.505s
user	0m1.040s
sys	0m0.068s
unsat
Test (./str_replace105.smt2):
Loading ./str_replace105.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (325ms)


334ms

real	0m0.448s
user	0m0.837s
sys	0m0.059s
unsat
Test (./str_replace106.smt2):
Loading ./str_replace106.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (337ms)


346ms

real	0m0.455s
user	0m0.847s
sys	0m0.049s
unsat
Test (./str_replace107.smt2):
Loading ./str_replace107.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (332ms)


342ms

real	0m0.456s
user	0m0.886s
sys	0m0.063s
unsat
Test (./str_replace108.smt2):
Loading ./str_replace108.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (367ms)


376ms

real	0m0.491s
user	0m0.979s
sys	0m0.064s
unsat
Test (./str_replace109.smt2):
Loading ./str_replace109.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (369ms)


379ms

real	0m0.489s
user	0m0.992s
sys	0m0.063s
unsat
Test (./str_replace11.smt2):
Loading ./str_replace11.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3258ms)
Prover 3: stopped
Prover 0: stopped
Prover 2: stopped
Prover 4: stopped


27848ms

real	0m27.958s
user	0m41.843s
sys	0m0.588s
unsat
Test (./str_replace110.smt2):
Loading ./str_replace110.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (353ms)


364ms

real	0m0.489s
user	0m1.002s
sys	0m0.056s
unsat
Test (./str_replace111.smt2):
Loading ./str_replace111.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (396ms)


404ms

real	0m0.514s
user	0m1.091s
sys	0m0.067s
unsat
Test (./str_replace112.smt2):
Loading ./str_replace112.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


337ms

real	0m0.459s
user	0m0.863s
sys	0m0.060s
unsat
Test (./str_replace113.smt2):
Loading ./str_replace113.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (412ms)


421ms

real	0m0.532s
user	0m1.120s
sys	0m0.070s
unsat
Test (./str_replace114.smt2):
Loading ./str_replace114.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (401ms)


410ms

real	0m0.523s
user	0m1.089s
sys	0m0.060s
unsat
Test (./str_replace115.smt2):
Loading ./str_replace115.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (322ms)


330ms

real	0m0.427s
user	0m0.814s
sys	0m0.058s
unsat
Test (./str_replace116.smt2):
Loading ./str_replace116.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (391ms)


399ms

real	0m0.510s
user	0m1.019s
sys	0m0.059s
unsat
Test (./str_replace117.smt2):
Loading ./str_replace117.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (397ms)


406ms

real	0m0.518s
user	0m1.096s
sys	0m0.067s
unsat
Test (./str_replace118.smt2):
Loading ./str_replace118.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (335ms)


343ms

real	0m0.461s
user	0m0.864s
sys	0m0.060s
unsat
Test (./str_replace119.smt2):
Loading ./str_replace119.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (378ms)


387ms

real	0m0.511s
user	0m1.013s
sys	0m0.070s
unsat
Test (./str_replace12.smt2):
Loading ./str_replace12.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1662ms)


1673ms

real	0m1.801s
user	0m6.192s
sys	0m0.201s
sat
Test (./str_replace120.smt2):
Loading ./str_replace120.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (409ms)


419ms

real	0m0.552s
user	0m1.205s
sys	0m0.074s
unsat
Test (./str_replace121.smt2):
Loading ./str_replace121.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (381ms)


389ms

real	0m0.502s
user	0m0.993s
sys	0m0.064s
unsat
Test (./str_replace122.smt2):
Loading ./str_replace122.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (342ms)


352ms

real	0m0.470s
user	0m0.932s
sys	0m0.066s
unsat
Test (./str_replace123.smt2):
Loading ./str_replace123.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (362ms)


373ms

real	0m0.502s
user	0m0.929s
sys	0m0.070s
unsat
Test (./str_replace124.smt2):
Loading ./str_replace124.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (332ms)


340ms

real	0m0.438s
user	0m0.857s
sys	0m0.059s
unsat
Test (./str_replace125.smt2):
Loading ./str_replace125.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (370ms)


381ms

real	0m0.506s
user	0m0.969s
sys	0m0.068s
unsat
Test (./str_replace126.smt2):
Loading ./str_replace126.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (347ms)


356ms

real	0m0.466s
user	0m0.941s
sys	0m0.060s
unsat
Test (./str_replace127.smt2):
Loading ./str_replace127.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (368ms)


377ms

real	0m0.490s
user	0m0.963s
sys	0m0.069s
unsat
Test (./str_replace128.smt2):
Loading ./str_replace128.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (379ms)


388ms

real	0m0.506s
user	0m0.977s
sys	0m0.069s
unsat
Test (./str_replace129.smt2):
Loading ./str_replace129.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (340ms)


350ms

real	0m0.460s
user	0m0.921s
sys	0m0.049s
unsat
Test (./str_replace13.smt2):
Loading ./str_replace13.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (379ms)


388ms

real	0m0.502s
user	0m0.985s
sys	0m0.073s
unsat
Test (./str_replace130.smt2):
Loading ./str_replace130.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x3c\x2f\x61\x3e\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2f\x61\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x3c\x\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x3c\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x3c\x\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x3c\x\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x3c\x\x3c\x2f\x\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x\x3c\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x\x3c\\x3c\x2f\x61\x3e\x\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x\x3c\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\x\x3\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\\x3c\x2f\x61\x\x3c\\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\\x3c\x2f\x61\x\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.023s
user	32m16.340s
sys	0m8.810s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace131.smt2):
Loading ./str_replace131.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


340ms

real	0m0.456s
user	0m0.865s
sys	0m0.061s
unsat
Test (./str_replace132.smt2):
Loading ./str_replace132.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (326ms)


334ms

real	0m0.433s
user	0m0.823s
sys	0m0.058s
unsat
Test (./str_replace133.smt2):
Loading ./str_replace133.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (326ms)


335ms

real	0m0.435s
user	0m0.831s
sys	0m0.058s
unsat
Test (./str_replace134.smt2):
Loading ./str_replace134.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


337ms

real	0m0.435s
user	0m0.837s
sys	0m0.048s
unsat
Test (./str_replace135.smt2):
Loading ./str_replace135.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (325ms)


334ms

real	0m0.432s
user	0m0.819s
sys	0m0.047s
unsat
Test (./str_replace136.smt2):
Loading ./str_replace136.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (339ms)


348ms

real	0m0.458s
user	0m0.884s
sys	0m0.058s
unsat
Test (./str_replace137.smt2):
Loading ./str_replace137.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


338ms

real	0m0.436s
user	0m0.824s
sys	0m0.059s
unsat
Test (./str_replace138.smt2):
Loading ./str_replace138.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (328ms)


335ms

real	0m0.446s
user	0m0.818s
sys	0m0.059s
unsat
Test (./str_replace139.smt2):
Loading ./str_replace139.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (323ms)


332ms

real	0m0.431s
user	0m0.817s
sys	0m0.057s
unsat
Test (./str_replace14.smt2):
Loading ./str_replace14.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (375ms)


384ms

real	0m0.495s
user	0m0.967s
sys	0m0.066s
unsat
Test (./str_replace140.smt2):
Loading ./str_replace140.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (315ms)


324ms

real	0m0.424s
user	0m0.793s
sys	0m0.057s
unsat
Test (./str_replace141.smt2):
Loading ./str_replace141.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (321ms)


328ms

real	0m0.440s
user	0m0.815s
sys	0m0.059s
unsat
Test (./str_replace142.smt2):
Loading ./str_replace142.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x5d\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x5d\x\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x3c\x2f\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3\x3c\x2f\x61\x3e\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.022s
user	33m30.082s
sys	0m9.791s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace143.smt2):
Loading ./str_replace143.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (306ms)


314ms

real	0m0.426s
user	0m0.798s
sys	0m0.057s
unsat
Test (./str_replace144.smt2):
Loading ./str_replace144.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (344ms)


354ms

real	0m0.465s
user	0m0.870s
sys	0m0.062s
unsat
Test (./str_replace145.smt2):
Loading ./str_replace145.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (365ms)


372ms

real	0m0.484s
user	0m0.895s
sys	0m0.051s
unsat
Test (./str_replace146.smt2):
Loading ./str_replace146.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (2247ms)


2256ms

real	0m2.359s
user	0m7.830s
sys	0m0.218s
unsat
Test (./str_replace147.smt2):
Loading ./str_replace147.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (2236ms)


2245ms

real	0m2.358s
user	0m7.867s
sys	0m0.225s
unsat
Test (./str_replace148.smt2):
Loading ./str_replace148.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1219ms)


1231ms

real	0m1.344s
user	0m4.493s
sys	0m0.151s
sat
Test (./str_replace149.smt2):
Loading ./str_replace149.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1310ms)


1318ms

real	0m1.432s
user	0m4.961s
sys	0m0.153s
sat
Test (./str_replace15.smt2):
Loading ./str_replace15.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (359ms)


368ms

real	0m0.479s
user	0m0.887s
sys	0m0.055s
unsat
Test (./str_replace150.smt2):
Loading ./str_replace150.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1264ms)


1273ms

real	0m1.389s
user	0m4.760s
sys	0m0.169s
sat
Test (./str_replace151.smt2):
Loading ./str_replace151.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1008ms)


1018ms

real	0m1.133s
user	0m3.763s
sys	0m0.141s
sat
Test (./str_replace152.smt2):
Loading ./str_replace152.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1306ms)


1315ms

real	0m1.429s
user	0m4.931s
sys	0m0.157s
sat
Test (./str_replace153.smt2):
Loading ./str_replace153.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1277ms)


1285ms

real	0m1.400s
user	0m4.702s
sys	0m0.157s
sat
Test (./str_replace154.smt2):
Loading ./str_replace154.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1310ms)


1319ms

real	0m1.421s
user	0m4.781s
sys	0m0.166s
sat
Test (./str_replace155.smt2):
Loading ./str_replace155.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (360ms)


369ms

real	0m0.485s
user	0m0.912s
sys	0m0.065s
unsat
Test (./str_replace156.smt2):
Loading ./str_replace156.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2f\x61\x3e\x20\x5d\x5c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\\\x3c\x2f\x61\x3e\x20\x5d\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: Out of memory, giving up
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x\x3c\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x\x3c\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	29m59.916s
user	58m44.930s
sys	0m17.518s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace157.smt2):
Loading ./str_replace157.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (314ms)


322ms

real	0m0.420s
user	0m0.767s
sys	0m0.045s
unsat
Test (./str_replace158.smt2):
Loading ./str_replace158.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x\x3c\\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x3c\x2f\x61\x3e\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\\x3c\\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\\x3\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\\x3\x3c\x2f\x61\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\\x3\x3c\x2f\x61\x3c\x2f\x61\x3e\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\\x3\x3c\x2f\x61\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.040s
user	44m28.005s
sys	0m12.231s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace159.smt2):
Loading ./str_replace159.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x20\x5d\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x20\x5d\x5\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\\x3\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\\x3\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.086s
user	33m12.543s
sys	0m10.324s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace16.smt2):
Loading ./str_replace16.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (391ms)


400ms

real	0m0.501s
user	0m1.011s
sys	0m0.057s
unsat
Test (./str_replace160.smt2):
Loading ./str_replace160.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (322ms)


331ms

real	0m0.442s
user	0m0.812s
sys	0m0.057s
unsat
Test (./str_replace161.smt2):
Loading ./str_replace161.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.080s
user	38m11.420s
sys	0m12.358s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace162.smt2):
Loading ./str_replace162.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 3: stopped
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x27\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x27\x27\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x\x27\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x\x27\x2\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.068s
user	32m5.652s
sys	0m12.388s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace163.smt2):
Loading ./str_replace163.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)

real	30m0.034s
user	40m32.415s
sys	0m11.156s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace164.smt2):
Loading ./str_replace164.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\\x2\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\\x2\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.016s
user	37m1.295s
sys	0m11.799s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace165.smt2):
Loading ./str_replace165.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\\x\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)

real	29m59.980s
user	33m20.322s
sys	0m11.668s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace166.smt2):
Loading ./str_replace166.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (337ms)


345ms

real	0m0.444s
user	0m0.873s
sys	0m0.058s
unsat
Test (./str_replace167.smt2):
Loading ./str_replace167.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (328ms)


337ms

real	0m0.437s
user	0m0.855s
sys	0m0.046s
unsat
Test (./str_replace168.smt2):
Loading ./str_replace168.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (359ms)


367ms

real	0m0.477s
user	0m0.984s
sys	0m0.062s
unsat
Test (./str_replace169.smt2):
Loading ./str_replace169.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (326ms)


335ms

real	0m0.433s
user	0m0.843s
sys	0m0.057s
unsat
Test (./str_replace17.smt2):
Loading ./str_replace17.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3573ms)
Prover 0: stopped
Prover 4: stopped
Prover 3: stopped
Prover 2: stopped


27302ms

real	0m27.406s
user	0m39.898s
sys	0m0.506s
unsat
Test (./str_replace170.smt2):
Loading ./str_replace170.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (339ms)


347ms

real	0m0.447s
user	0m0.888s
sys	0m0.048s
unsat
Test (./str_replace171.smt2):
Loading ./str_replace171.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (337ms)


345ms

real	0m0.446s
user	0m0.850s
sys	0m0.048s
unsat
Test (./str_replace172.smt2):
Loading ./str_replace172.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (343ms)


352ms

real	0m0.450s
user	0m0.860s
sys	0m0.060s
unsat
Test (./str_replace173.smt2):
Loading ./str_replace173.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (328ms)


337ms

real	0m0.436s
user	0m0.851s
sys	0m0.048s
unsat
Test (./str_replace174.smt2):
Loading ./str_replace174.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


340ms

real	0m0.450s
user	0m0.882s
sys	0m0.047s
unsat
Test (./str_replace175.smt2):
Loading ./str_replace175.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (343ms)


351ms

real	0m0.451s
user	0m0.915s
sys	0m0.060s
unsat
Test (./str_replace176.smt2):
Loading ./str_replace176.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (327ms)


336ms

real	0m0.436s
user	0m0.834s
sys	0m0.049s
unsat
Test (./str_replace177.smt2):
Loading ./str_replace177.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (328ms)


337ms

real	0m0.437s
user	0m0.882s
sys	0m0.059s
unsat
Test (./str_replace178.smt2):
Loading ./str_replace178.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (336ms)


343ms

real	0m0.443s
user	0m0.864s
sys	0m0.062s
unsat
Test (./str_replace179.smt2):
Loading ./str_replace179.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (332ms)


340ms

real	0m0.439s
user	0m0.851s
sys	0m0.050s
unsat
Test (./str_replace18.smt2):
Loading ./str_replace18.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_52 =
Prover 1:      concatCEPreOp(x_45, "\x5c\x6e\x62\x65\x63\x61\x75\x73\x65\x20\x69\x74\x20\x63\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x62\x65\x20\x66\x6f\x75\x6e\x64\x2e\x5c\x6e")
Prover 1:    x_72 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_70, "\x5c\x6e\x5c\x6e")
Prover 1:    x_53 =
Prover 1:      concatCEPreOp(x_47, "\x74\x69\x6d\x65\x6d\x6f\x64\x69\x66\x69\x65\x64\x20\x3d\x20\x5c\x6e")
Prover 1:    x_51 =
Prover 1:      concatCEPreOp(x_44, "\x20\x6e\x6f\x74\x20\x66\x6f\x75\x6e\x64\x5c\x6e")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, x_48)
Prover 1:    x_45 =
Prover 1:      concatCEPreOp("\x43\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x64\x65\x6c\x65\x74\x65\x20\x44\x42\x20\x63\x61\x63\x68\x65\x5f\x66\x69\x6c\x74\x65\x72\x73\x20\x65\x6e\x74\x72\x79\x20\x66\x6f\x72\x20", sigmaStar_764)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_44 =
Prover 1:      concatCEPreOp("\x44\x42\x20\x63\x61\x63\x68\x65\x5f\x66\x69\x6c\x74\x65\x72\x73\x20\x65\x6e\x74\x72\x79\x20\x66\x6f\x72\x20", sigmaStar_762)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_39, "\x5c\x6e")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp(x_34, "\x5c\x6e")
Prover 1:    x_47 =
Prover 1:      concatCEPreOp(x_38, "\x72\x61\x77\x74\x65\x78\x74\x20\x3d\x20\x5c\x6e")
Prover 1:    x_70 =
Prover 1:      ReplaceCEPreOp(x_66)
Prover 1:    x_66 =
Prover 1:      ReplaceCEPreOp(x_62)
Prover 1:    x_39 =
Prover 1:      concatCEPreOp("\x4e\x75\x6d\x62\x65\x72\x20\x6f\x66\x20\x72\x65\x63\x6f\x72\x64\x73\x20\x64\x65\x6c\x65\x74\x65\x64\x20\x3d\x20", x_33)
Prover 1:    x_38 =
Prover 1:      concatCEPreOp(x_28, "\x6d\x64\x35\x6b\x65\x79\x20\x3d\x20\x5c\x6e")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp("\x44\x65\x6c\x65\x74\x69\x6e\x67\x20\x44\x42\x20\x63\x61\x63\x68\x65\x5f\x66\x69\x6c\x74\x65\x72\x73\x20\x65\x6e\x74\x72\x79\x20\x66\x6f\x72\x20", sigmaStar_757)
Prover 1:    x_28 =
Prover 1:      concatCEPreOp(x_23, "\x76\x65\x72\x73\x69\x6f\x6e\x20\x3d\x20\x5c\x6e")
Prover 1:    x_62 =
Prover 1:      ReplaceCEPreOp(x_58)
Prover 1:    x_23 =
Prover 1:      concatCEPreOp(x_19, "\x66\x69\x6c\x74\x65\x72\x20\x3d\x20\x5c\x6e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_13, "\x69\x64\x20\x3d\x20\x5c\x6e")
Prover 1:    x_13 =
Prover 1:      concatCEPreOp(x_9, "\x5c\x6e")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x44\x42\x20\x63\x61\x63\x68\x65\x5f\x66\x69\x6c\x74\x65\x72\x73\x20\x65\x6e\x74\x72\x79\x20\x66\x6f\x72\x20", sigmaStar_749)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_72
Prover 1: WARNING: cyclic definitions found, ignoring ArrayBuffer((ReplaceCEPreOp,List(x_66),x_70), (ReplaceCEPreOp,List(x_62),x_66), (ReplaceCEPreOp,List(x_58),x_62), (concatCEPreOp,List(atk_sigmaStar_1, tmp_0),101), (concatCEPreOp,List(x_70, 101),101), (concatCEPreOp,List(atkPtn, atk_sigmaStar_2),tmp_0))
Prover 1:    x_53 =
Prover 1:      concatCEPreOp(x_47, "\x74\x69\x6d\x65\x6d\x6f\x64\x69\x66\x69\x65\x64\x20\x3d\x20\x5c\x6e")
Prover 1:    x_51 =
Prover 1:      concatCEPreOp(x_44, "\x20\x6e\x6f\x74\x20\x66\x6f\x75\x6e\x64\x5c\x6e")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, x_48)
Prover 1:    x_52 =
Prover 1:      concatCEPreOp(x_45, "\x5c\x6e\x62\x65\x63\x61\x75\x73\x65\x20\x69\x74\x20\x63\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x62\x65\x20\x66\x6f\x75\x6e\x64\x2e\x5c\x6e")
Prover 1:    x_45 =
Prover 1:      concatCEPreOp("\x43\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x64\x65\x6c\x65\x74\x65\x20\x44\x42\x20\x63\x61\x63\x68\x65\x5f\x66\x69\x6c\x74\x65\x72\x73\x20\x65\x6e\x74\x72\x79\x20\x66\x6f\x72\x20", sigmaStar_764)
Prover 1:    x_44 =
Prover 1:      concatCEPreOp("\x44\x42\x20\x63\x61\x63\x68\x65\x5f\x66\x69\x6c\x74\x65\x72\x73\x20\x65\x6e\x74\x72\x79\x20\x66\x6f\x72\x20", sigmaStar_762)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_39, "\x5c\x6e")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp(x_34, "\x5c\x6e")
Prover 1:    x_47 =
Prover 1:      concatCEPreOp(x_38, "\x72\x61\x77\x74\x65\x78\x74\x20\x3d\x20\x5c\x6e")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp("\x4e\x75\x6d\x62\x65\x72\x20\x6f\x66\x20\x72\x65\x63\x6f\x72\x64\x73\x20\x64\x65\x6c\x65\x74\x65\x64\x20\x3d\x20", x_33)
Prover 1:    x_38 =
Prover 1:      concatCEPreOp(x_28, "\x6d\x64\x35\x6b\x65\x79\x20\x3d\x20\x5c\x6e")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp("\x44\x65\x6c\x65\x74\x69\x6e\x67\x20\x44\x42\x20\x63\x61\x63\x68\x65\x5f\x66\x69\x6c\x74\x65\x72\x73\x20\x65\x6e\x74\x72\x79\x20\x66\x6f\x72\x20", sigmaStar_757)
Prover 1:    x_28 =
Prover 1:      concatCEPreOp(x_23, "\x76\x65\x72\x73\x69\x6f\x6e\x20\x3d\x20\x5c\x6e")
Prover 1:    x_23 =
Prover 1:      concatCEPreOp(x_19, "\x66\x69\x6c\x74\x65\x72\x20\x3d\x20\x5c\x6e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_13, "\x69\x64\x20\x3d\x20\x5c\x6e")
Prover 1:    x_13 =
Prover 1:      concatCEPreOp(x_9, "\x5c\x6e")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x44\x42\x20\x63\x61\x63\x68\x65\x5f\x66\x69\x6c\x74\x65\x72\x73\x20\x65\x6e\x74\x72\x79\x20\x66\x6f\x72\x20", sigmaStar_749)
Prover 1: Exception: empty.reduceLeft
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped

real	30m0.033s
user	41m42.881s
sys	0m10.276s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace180.smt2):
Loading ./str_replace180.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (313ms)


320ms

real	0m0.416s
user	0m0.793s
sys	0m0.040s
unsat
Test (./str_replace181.smt2):
Loading ./str_replace181.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (332ms)


341ms

real	0m0.449s
user	0m0.919s
sys	0m0.050s
unsat
Test (./str_replace182.smt2):
Loading ./str_replace182.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (365ms)


373ms

real	0m0.470s
user	0m1.037s
sys	0m0.043s
unsat
Test (./str_replace183.smt2):
Loading ./str_replace183.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (322ms)


329ms

real	0m0.425s
user	0m0.832s
sys	0m0.050s
unsat
Test (./str_replace184.smt2):
Loading ./str_replace184.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (314ms)


321ms

real	0m0.430s
user	0m0.824s
sys	0m0.040s
unsat
Test (./str_replace185.smt2):
Loading ./str_replace185.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (312ms)


320ms

real	0m0.415s
user	0m0.805s
sys	0m0.049s
unsat
Test (./str_replace186.smt2):
Loading ./str_replace186.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (312ms)


320ms

real	0m0.417s
user	0m0.797s
sys	0m0.050s
unsat
Test (./str_replace187.smt2):
Loading ./str_replace187.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (311ms)


320ms

real	0m0.418s
user	0m0.786s
sys	0m0.049s
unsat
Test (./str_replace188.smt2):
Loading ./str_replace188.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "0/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (28ms)
Prover 0: stopped
Prover 2: stopped
Prover 1: stopped


17102ms

real	0m17.201s
user	0m29.413s
sys	0m0.487s
unsat
Test (./str_replace189.smt2):
Loading ./str_replace189.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (320ms)


328ms

real	0m0.423s
user	0m0.827s
sys	0m0.040s
unsat
Test (./str_replace19.smt2):
Loading ./str_replace19.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (335ms)


343ms

real	0m0.450s
user	0m0.863s
sys	0m0.052s
unsat
Test (./str_replace190.smt2):
Loading ./str_replace190.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (311ms)


320ms

real	0m0.426s
user	0m0.796s
sys	0m0.049s
unsat
Test (./str_replace191.smt2):
Loading ./str_replace191.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (310ms)


317ms

real	0m0.412s
user	0m0.800s
sys	0m0.048s
unsat
Test (./str_replace192.smt2):
Loading ./str_replace192.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (324ms)


332ms

real	0m0.427s
user	0m0.832s
sys	0m0.040s
unsat
Test (./str_replace193.smt2):
Loading ./str_replace193.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x\x3c\x2f\x61\x3e\x20\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x\x3c\x2f\x\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x3c\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x3c\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\\x\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.062s
user	36m32.015s
sys	0m13.476s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace194.smt2):
Loading ./str_replace194.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


338ms

real	0m0.450s
user	0m0.780s
sys	0m0.047s
unsat
Test (./str_replace195.smt2):
Loading ./str_replace195.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (362ms)


372ms

real	0m0.471s
user	0m0.861s
sys	0m0.056s
unsat
Test (./str_replace196.smt2):
Loading ./str_replace196.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (316ms)


325ms

real	0m0.431s
user	0m0.813s
sys	0m0.043s
unsat
Test (./str_replace197.smt2):
Loading ./str_replace197.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (336ms)


344ms

real	0m0.442s
user	0m0.847s
sys	0m0.049s
unsat
Test (./str_replace198.smt2):
Loading ./str_replace198.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (316ms)


323ms

real	0m0.420s
user	0m0.811s
sys	0m0.044s
unsat
Test (./str_replace199.smt2):
Loading ./str_replace199.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (319ms)


327ms

real	0m0.423s
user	0m0.831s
sys	0m0.043s
unsat
Test (./str_replace2.smt2):
Loading ./str_replace2.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (355ms)


364ms

real	0m0.474s
user	0m0.899s
sys	0m0.050s
unsat
Test (./str_replace20.smt2):
Loading ./str_replace20.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (363ms)


372ms

real	0m0.481s
user	0m0.959s
sys	0m0.060s
unsat
Test (./str_replace200.smt2):
Loading ./str_replace200.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (312ms)


319ms

real	0m0.417s
user	0m0.799s
sys	0m0.051s
unsat
Test (./str_replace201.smt2):
Loading ./str_replace201.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (314ms)


321ms

real	0m0.416s
user	0m0.809s
sys	0m0.046s
unsat
Test (./str_replace202.smt2):
Loading ./str_replace202.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (315ms)


323ms

real	0m0.433s
user	0m0.802s
sys	0m0.051s
unsat
Test (./str_replace203.smt2):
Loading ./str_replace203.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (290ms)


298ms

real	0m0.392s
user	0m0.706s
sys	0m0.039s
unsat
Test (./str_replace204.smt2):
Loading ./str_replace204.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (318ms)


326ms

real	0m0.424s
user	0m0.810s
sys	0m0.053s
unsat
Test (./str_replace205.smt2):
Loading ./str_replace205.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil//evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/ev/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (30ms)
Prover 1: stopped
Prover 0: stopped
Prover 2: stopped


13508ms

real	0m13.623s
user	0m26.481s
sys	0m0.513s
unsat
Test (./str_replace206.smt2):
Loading ./str_replace206.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5\x3c\x2f\x61\x3e\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x2\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\\x3c\x3c\x2f\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)

real	30m0.025s
user	37m40.845s
sys	0m16.852s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace207.smt2):
Loading ./str_replace207.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/ev/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/ev/ev/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/ev/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (29ms)
Prover 0: stopped
Prover 1: stopped
Prover 2: stopped


13634ms

real	0m13.766s
user	0m25.436s
sys	0m0.486s
unsat
Test (./str_replace208.smt2):
Loading ./str_replace208.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e\x3c\x2f\x61\x3e\x\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x61\x3e\x20\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x3c\x2f\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\\\x3c\x2f\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\\\x3c\x2f\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\\\x3c\x2f\x3c\x2f\x61\x3e\x2\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\\\x3c\x2f\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\\\x3c\x2f\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x\\\x3c\x2f\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.043s
user	33m49.774s
sys	0m17.312s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace209.smt2):
Loading ./str_replace209.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (296ms)


305ms

real	0m0.420s
user	0m0.630s
sys	0m0.035s
unsat
Test (./str_replace21.smt2):
Loading ./str_replace21.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (339ms)


347ms

real	0m0.443s
user	0m0.762s
sys	0m0.039s
unsat
Test (./str_replace210.smt2):
Loading ./str_replace210.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x6\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x6\x3c\x2f\x61\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x6\x3c\x2f\x61\x3c\x2f\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x6\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x6\\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x3\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x3\x3c\x2f\x\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x3\x3c\x2f\x\x3c\x2\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x3\x3c\x2f\x\x3c\x2\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x3\x3c\x2f\x\x3c\x2\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x3\x3c\x2f\x\x3c\x2\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x3\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.027s
user	35m54.031s
sys	0m17.088s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace211.smt2):
Loading ./str_replace211.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (325ms)


332ms

real	0m0.442s
user	0m0.827s
sys	0m0.047s
unsat
Test (./str_replace212.smt2):
Loading ./str_replace212.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\\x3\x3c\x2f\x61\x3e\x20\x5d\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x3c\x2f\\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x3c\x2f\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x3c\x2f\\x3c\x2f\x61\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x3c\x2f\\x3c\x2f\x61\x3e\x\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x3c\x2f\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x3c\x2f\\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x3c\x2f\\x3c\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3c\x2f\x3c\x2f\x61\x3e\x20\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3c\x2\x3c\x2f\x61\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3c\x2\x3c\x2f\x61\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3c\x2\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\\x3c\x2f\x61\x3c\x2\x3c\x2f\x61\x\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.016s
user	33m19.750s
sys	0m17.147s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace213.smt2):
Loading ./str_replace213.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (294ms)


302ms

real	0m0.422s
user	0m0.626s
sys	0m0.036s
unsat
Test (./str_replace214.smt2):
Loading ./str_replace214.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3175ms)
Prover 0: stopped
Prover 3: stopped
Prover 2: stopped
Prover 4: stopped


27052ms

real	0m27.163s
user	0m38.170s
sys	0m0.566s
unsat
Test (./str_replace215.smt2):
Loading ./str_replace215.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x3c\x\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x3c\x\x3\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x3c\x2f\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x3c\x2f\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x3c\x2f\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x\x3\x\x3c\x2f\x61\x3e\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\\x3c\x2f\x61\\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x6\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.021s
user	43m39.965s
sys	0m20.416s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace216.smt2):
Loading ./str_replace216.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (298ms)


307ms

real	0m0.428s
user	0m0.703s
sys	0m0.042s
unsat
Test (./str_replace217.smt2):
Loading ./str_replace217.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (325ms)


333ms

real	0m0.442s
user	0m0.770s
sys	0m0.044s
unsat
Test (./str_replace218.smt2):
Loading ./str_replace218.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (353ms)


361ms

real	0m0.470s
user	0m0.890s
sys	0m0.052s
unsat
Test (./str_replace219.smt2):
Loading ./str_replace219.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (344ms)


352ms

real	0m0.462s
user	0m0.853s
sys	0m0.059s
unsat
Test (./str_replace22.smt2):
Loading ./str_replace22.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      ReplaceCEPreOp(x_12)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(sigmaStar_751)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "' or 1=1 '" =
Prover 1:      ReplaceCEPreOp(x_12)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(sigmaStar_751)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: proven invalid (181ms)
Prover 0: stopped


7616ms

real	0m7.732s
user	0m15.019s
sys	0m0.342s
sat
Test (./str_replace220.smt2):
Loading ./str_replace220.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (407ms)


416ms

real	0m0.515s
user	0m1.036s
sys	0m0.072s
unsat
Test (./str_replace221.smt2):
Loading ./str_replace221.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (2949ms)
Prover 0: stopped
Prover 2: stopped
Prover 4: stopped
Prover 3: stopped


26380ms

real	0m26.485s
user	0m38.246s
sys	0m0.650s
unsat
Test (./str_replace222.smt2):
Loading ./str_replace222.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (440ms)


451ms

real	0m0.566s
user	0m1.418s
sys	0m0.070s
unsat
Test (./str_replace223.smt2):
Loading ./str_replace223.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (302ms)


311ms

real	0m0.408s
user	0m0.779s
sys	0m0.052s
unsat
Test (./str_replace224.smt2):
Loading ./str_replace224.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (332ms)


340ms

real	0m0.437s
user	0m0.814s
sys	0m0.056s
unsat
Test (./str_replace225.smt2):
Loading ./str_replace225.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (357ms)


365ms

real	0m0.473s
user	0m0.902s
sys	0m0.051s
unsat
Test (./str_replace226.smt2):
Loading ./str_replace226.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (352ms)


360ms

real	0m0.468s
user	0m0.888s
sys	0m0.059s
unsat
Test (./str_replace228.smt2):
Loading ./str_replace228.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (428ms)


436ms

real	0m0.549s
user	0m1.348s
sys	0m0.075s
unsat
Test (./str_replace229.smt2):
Loading ./str_replace229.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 1: proved (125570ms)
Prover 0: stopped
Prover 2: stopped
Prover 4: stopped


523913ms

real	8m44.023s
user	12m18.260s
sys	0m7.166s
unsat
Test (./str_replace23.smt2):
Loading ./str_replace23.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2996ms)


3005ms

real	0m3.116s
user	0m8.160s
sys	0m0.219s
sat
Test (./str_replace230.smt2):
Loading ./str_replace230.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (295ms)


303ms

real	0m0.401s
user	0m0.728s
sys	0m0.051s
unsat
Test (./str_replace231.smt2):
Loading ./str_replace231.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (330ms)


338ms

real	0m0.435s
user	0m0.828s
sys	0m0.055s
unsat
Test (./str_replace232.smt2):
Loading ./str_replace232.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (350ms)


359ms

real	0m0.468s
user	0m0.887s
sys	0m0.049s
unsat
Test (./str_replace233.smt2):
Loading ./str_replace233.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (348ms)


357ms

real	0m0.468s
user	0m0.884s
sys	0m0.059s
unsat
Test (./str_replace234.smt2):
Loading ./str_replace234.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (369ms)


377ms

real	0m0.487s
user	0m0.958s
sys	0m0.065s
unsat
Test (./str_replace235.smt2):
Loading ./str_replace235.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3062ms)
Prover 0: stopped
Prover 4: stopped
Prover 3: stopped
Prover 2: stopped


26964ms

real	0m27.079s
user	0m37.907s
sys	0m0.605s
unsat
Test (./str_replace24.smt2):
Loading ./str_replace24.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (3322ms)


3331ms

real	0m3.444s
user	0m9.137s
sys	0m0.227s
sat
Test (./str_replace25.smt2):
Loading ./str_replace25.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (6062ms)


6071ms

real	0m6.186s
user	0m14.282s
sys	0m0.335s
sat
Test (./str_replace26.smt2):
Loading ./str_replace26.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (315ms)


323ms

real	0m0.421s
user	0m0.793s
sys	0m0.043s
unsat
Test (./str_replace27.smt2):
Loading ./str_replace27.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (313ms)


322ms

real	0m0.421s
user	0m0.791s
sys	0m0.053s
unsat
Test (./str_replace28.smt2):
Loading ./str_replace28.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (311ms)


320ms

real	0m0.418s
user	0m0.789s
sys	0m0.053s
unsat
Test (./str_replace29.smt2):
Loading ./str_replace29.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (310ms)


318ms

real	0m0.417s
user	0m0.793s
sys	0m0.043s
unsat
Test (./str_replace3.smt2):
Loading ./str_replace3.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (347ms)


356ms

real	0m0.467s
user	0m0.865s
sys	0m0.058s
unsat
Test (./str_replace30.smt2):
Loading ./str_replace30.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (314ms)


323ms

real	0m0.433s
user	0m0.814s
sys	0m0.053s
unsat
Test (./str_replace31.smt2):
Loading ./str_replace31.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (309ms)


317ms

real	0m0.426s
user	0m0.791s
sys	0m0.043s
unsat
Test (./str_replace32.smt2):
Loading ./str_replace32.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (310ms)


319ms

real	0m0.417s
user	0m0.804s
sys	0m0.043s
unsat
Test (./str_replace33.smt2):
Loading ./str_replace33.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (309ms)


317ms

real	0m0.428s
user	0m0.793s
sys	0m0.043s
unsat
Test (./str_replace34.smt2):
Loading ./str_replace34.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (311ms)


319ms

real	0m0.429s
user	0m0.794s
sys	0m0.043s
unsat
Test (./str_replace35.smt2):
Loading ./str_replace35.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (319ms)


327ms

real	0m0.423s
user	0m0.836s
sys	0m0.052s
unsat
Test (./str_replace36.smt2):
Loading ./str_replace36.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (315ms)


323ms

real	0m0.422s
user	0m0.798s
sys	0m0.054s
unsat
Test (./str_replace37.smt2):
Loading ./str_replace37.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (312ms)


320ms

real	0m0.419s
user	0m0.808s
sys	0m0.053s
unsat
Test (./str_replace38.smt2):
Loading ./str_replace38.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (314ms)


322ms

real	0m0.433s
user	0m0.829s
sys	0m0.054s
unsat
Test (./str_replace39.smt2):
Loading ./str_replace39.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (311ms)


319ms

real	0m0.416s
user	0m0.765s
sys	0m0.052s
unsat
Test (./str_replace4.smt2):
Loading ./str_replace4.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (362ms)


370ms

real	0m0.467s
user	0m0.952s
sys	0m0.054s
unsat
Test (./str_replace40.smt2):
Loading ./str_replace40.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (310ms)


319ms

real	0m0.417s
user	0m0.790s
sys	0m0.054s
unsat
Test (./str_replace41.smt2):
Loading ./str_replace41.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (327ms)


335ms

real	0m0.432s
user	0m0.901s
sys	0m0.054s
unsat
Test (./str_replace42.smt2):
Loading ./str_replace42.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (358ms)


365ms

real	0m0.476s
user	0m1.034s
sys	0m0.057s
unsat
Test (./str_replace43.smt2):
Loading ./str_replace43.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (316ms)


325ms

real	0m0.422s
user	0m0.823s
sys	0m0.044s
unsat
Test (./str_replace44.smt2):
Loading ./str_replace44.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (310ms)


318ms

real	0m0.416s
user	0m0.794s
sys	0m0.046s
unsat
Test (./str_replace45.smt2):
Loading ./str_replace45.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (311ms)


320ms

real	0m0.418s
user	0m0.819s
sys	0m0.056s
unsat
Test (./str_replace46.smt2):
Loading ./str_replace46.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (311ms)


320ms

real	0m0.431s
user	0m0.817s
sys	0m0.054s
unsat
Test (./str_replace47.smt2):
Loading ./str_replace47.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (310ms)


319ms

real	0m0.417s
user	0m0.794s
sys	0m0.054s
unsat
Test (./str_replace48.smt2):
Loading ./str_replace48.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (325ms)


332ms

real	0m0.429s
user	0m0.847s
sys	0m0.054s
unsat
Test (./str_replace49.smt2):
Loading ./str_replace49.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (313ms)


321ms

real	0m0.418s
user	0m0.778s
sys	0m0.051s
unsat
Test (./str_replace5.smt2):
Loading ./str_replace5.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: proved (2901ms)
Prover 0: stopped


10422ms

real	0m10.525s
user	0m14.635s
sys	0m0.284s
unsat
Test (./str_replace50.smt2):
Loading ./str_replace50.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (313ms)


322ms

real	0m0.419s
user	0m0.825s
sys	0m0.052s
unsat
Test (./str_replace51.smt2):
Loading ./str_replace51.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (326ms)


333ms

real	0m0.431s
user	0m0.854s
sys	0m0.054s
unsat
Test (./str_replace52.smt2):
Loading ./str_replace52.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x2\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x2\x3c\x\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x2\x3c\x\\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x2\x3c\x\\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x2\x3c\x\\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2f\x61\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x2\x3c\x\\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x2\x3c\x\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x2\x3c\x\\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)

real	30m0.059s
user	37m38.291s
sys	0m17.852s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace53.smt2):
Loading ./str_replace53.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (322ms)


332ms

real	0m0.448s
user	0m0.790s
sys	0m0.057s
unsat
Test (./str_replace54.smt2):
Loading ./str_replace54.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (314ms)


322ms

real	0m0.419s
user	0m0.798s
sys	0m0.055s
unsat
Test (./str_replace55.smt2):
Loading ./str_replace55.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (313ms)


321ms

real	0m0.431s
user	0m0.807s
sys	0m0.046s
unsat
Test (./str_replace56.smt2):
Loading ./str_replace56.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (310ms)


318ms

real	0m0.415s
user	0m0.797s
sys	0m0.044s
unsat
Test (./str_replace57.smt2):
Loading ./str_replace57.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (312ms)


319ms

real	0m0.417s
user	0m0.795s
sys	0m0.054s
unsat
Test (./str_replace58.smt2):
Loading ./str_replace58.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (317ms)


325ms

real	0m0.436s
user	0m0.845s
sys	0m0.045s
unsat
Test (./str_replace59.smt2):
Loading ./str_replace59.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (312ms)


320ms

real	0m0.416s
user	0m0.813s
sys	0m0.044s
unsat
Test (./str_replace6.smt2):
Loading ./str_replace6.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (295ms)


303ms

real	0m0.412s
user	0m0.746s
sys	0m0.052s
unsat
Test (./str_replace60.smt2):
Loading ./str_replace60.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (314ms)


322ms

real	0m0.419s
user	0m0.808s
sys	0m0.053s
unsat
Test (./str_replace61.smt2):
Loading ./str_replace61.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (314ms)


322ms

real	0m0.432s
user	0m0.802s
sys	0m0.054s
unsat
Test (./str_replace62.smt2):
Loading ./str_replace62.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (297ms)


305ms

real	0m0.402s
user	0m0.733s
sys	0m0.051s
unsat
Test (./str_replace63.smt2):
Loading ./str_replace63.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (309ms)


316ms

real	0m0.416s
user	0m0.764s
sys	0m0.054s
unsat
Test (./str_replace64.smt2):
Loading ./str_replace64.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x\x3\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 0: proven invalid (110550ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


436525ms

real	7m16.646s
user	8m17.860s
sys	0m5.548s
sat
Test (./str_replace65.smt2):
Loading ./str_replace65.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (316ms)


323ms

real	0m0.419s
user	0m0.808s
sys	0m0.054s
unsat
Test (./str_replace66.smt2):
Loading ./str_replace66.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (311ms)


319ms

real	0m0.415s
user	0m0.797s
sys	0m0.054s
unsat
Test (./str_replace67.smt2):
Loading ./str_replace67.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (316ms)


323ms

real	0m0.419s
user	0m0.810s
sys	0m0.044s
unsat
Test (./str_replace68.smt2):
Loading ./str_replace68.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (313ms)


321ms

real	0m0.420s
user	0m0.826s
sys	0m0.054s
unsat
Test (./str_replace69.smt2):
Loading ./str_replace69.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (311ms)


320ms

real	0m0.428s
user	0m0.806s
sys	0m0.046s
unsat
Test (./str_replace7.smt2):
Loading ./str_replace7.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (325ms)


334ms

real	0m0.442s
user	0m0.812s
sys	0m0.056s
unsat
Test (./str_replace70.smt2):
Loading ./str_replace70.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (314ms)


322ms

real	0m0.430s
user	0m0.816s
sys	0m0.053s
unsat
Test (./str_replace71.smt2):
Loading ./str_replace71.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (316ms)


325ms

real	0m0.420s
user	0m0.809s
sys	0m0.054s
unsat
Test (./str_replace72.smt2):
Loading ./str_replace72.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (311ms)


319ms

real	0m0.415s
user	0m0.803s
sys	0m0.043s
unsat
Test (./str_replace73.smt2):
Loading ./str_replace73.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (317ms)


324ms

real	0m0.434s
user	0m0.836s
sys	0m0.054s
unsat
Test (./str_replace74.smt2):
Loading ./str_replace74.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (322ms)


331ms

real	0m0.439s
user	0m0.860s
sys	0m0.045s
unsat
Test (./str_replace75.smt2):
Loading ./str_replace75.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (316ms)


323ms

real	0m0.432s
user	0m0.809s
sys	0m0.053s
unsat
Test (./str_replace76.smt2):
Loading ./str_replace76.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (315ms)


322ms

real	0m0.417s
user	0m0.804s
sys	0m0.044s
unsat
Test (./str_replace77.smt2):
Loading ./str_replace77.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (314ms)


323ms

real	0m0.430s
user	0m0.808s
sys	0m0.044s
unsat
Test (./str_replace78.smt2):
Loading ./str_replace78.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (316ms)


325ms

real	0m0.434s
user	0m0.853s
sys	0m0.054s
unsat
Test (./str_replace79.smt2):
Loading ./str_replace79.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (308ms)


316ms

real	0m0.414s
user	0m0.802s
sys	0m0.055s
unsat
Test (./str_replace8.smt2):
Loading ./str_replace8.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (353ms)


362ms

real	0m0.470s
user	0m0.903s
sys	0m0.059s
unsat
Test (./str_replace80.smt2):
Loading ./str_replace80.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


339ms

real	0m0.448s
user	0m0.892s
sys	0m0.046s
unsat
Test (./str_replace81.smt2):
Loading ./str_replace81.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (363ms)


371ms

real	0m0.468s
user	0m1.058s
sys	0m0.058s
unsat
Test (./str_replace82.smt2):
Loading ./str_replace82.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (330ms)


339ms

real	0m0.435s
user	0m0.860s
sys	0m0.057s
unsat
Test (./str_replace83.smt2):
Loading ./str_replace83.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (318ms)


326ms

real	0m0.422s
user	0m0.830s
sys	0m0.055s
unsat
Test (./str_replace84.smt2):
Loading ./str_replace84.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (315ms)


322ms

real	0m0.431s
user	0m0.825s
sys	0m0.054s
unsat
Test (./str_replace85.smt2):
Loading ./str_replace85.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (313ms)


321ms

real	0m0.429s
user	0m0.838s
sys	0m0.054s
unsat
Test (./str_replace86.smt2):
Loading ./str_replace86.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (318ms)


327ms

real	0m0.421s
user	0m0.809s
sys	0m0.044s
unsat
Test (./str_replace87.smt2):
Loading ./str_replace87.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (327ms)


334ms

real	0m0.432s
user	0m0.841s
sys	0m0.055s
unsat
Test (./str_replace88.smt2):
Loading ./str_replace88.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (312ms)


321ms

real	0m0.417s
user	0m0.804s
sys	0m0.052s
unsat
Test (./str_replace89.smt2):
Loading ./str_replace89.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (316ms)


323ms

real	0m0.420s
user	0m0.827s
sys	0m0.053s
unsat
Test (./str_replace9.smt2):
Loading ./str_replace9.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (337ms)


345ms

real	0m0.441s
user	0m0.848s
sys	0m0.051s
unsat
Test (./str_replace90.smt2):
Loading ./str_replace90.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (322ms)


330ms

real	0m0.426s
user	0m0.850s
sys	0m0.054s
unsat
Test (./str_replace91.smt2):
Loading ./str_replace91.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\x61\x3e\x20\\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x3c\x2f\x61\x\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x2f\x6\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x2f\\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x2f\\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x2f\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x2f\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x3c\x2\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x\x3c\x3c\x2\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.002s
user	33m33.765s
sys	0m14.998s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace92.smt2):
Loading ./str_replace92.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (356ms)


365ms

real	0m0.488s
user	0m0.951s
sys	0m0.069s
unsat
Test (./str_replace93.smt2):
Loading ./str_replace93.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (337ms)


345ms

real	0m0.447s
user	0m0.898s
sys	0m0.065s
unsat
Test (./str_replace94.smt2):
Loading ./str_replace94.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


340ms

real	0m0.442s
user	0m0.856s
sys	0m0.053s
unsat
Test (./str_replace95.smt2):
Loading ./str_replace95.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (333ms)


341ms

real	0m0.443s
user	0m0.880s
sys	0m0.053s
unsat
Test (./str_replace96.smt2):
Loading ./str_replace96.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (336ms)


345ms

real	0m0.446s
user	0m0.870s
sys	0m0.052s
unsat
Test (./str_replace97.smt2):
Loading ./str_replace97.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (350ms)


357ms

real	0m0.472s
user	0m0.945s
sys	0m0.065s
unsat
Test (./str_replace98.smt2):
Loading ./str_replace98.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (341ms)


349ms

real	0m0.450s
user	0m0.901s
sys	0m0.053s
unsat
Test (./str_replace99.smt2):
Loading ./str_replace99.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (327ms)


336ms

real	0m0.438s
user	0m0.862s
sys	0m0.052s
unsat
