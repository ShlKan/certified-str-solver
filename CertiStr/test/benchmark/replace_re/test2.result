Test (./lan_replace0.smt2):
Loading ./lan_replace0.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\\x3c\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x3c\x2f\x74\x6\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x3c\x2f\x74\x6\x3c\x2f\x74\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x3c\x2f\x74\x6\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x3c\x2f\x74\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x3c\x2f\x74\x\x3c\x2f\x74\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x3c\x2f\x74\x\x3c\x2f\x74\x\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x3c\x2f\x74\x\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x3c\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x3c\x3c\x2f\x74\x6\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x\x3c\x2f\x74\x3c\x2f\x7\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x\x3c\x2f\x74\x3c\x2f\x7\x3c\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x\x3c\x2f\x74\x3c\x2f\x7\x3c\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (13245ms)
Prover 4: stopped
Prover 1: stopped
Prover 3: stopped
Prover 2: stopped


45475ms

real	0m45.713s
user	1m8.610s
sys	0m1.359s
sat
Test (./lan_replace1.smt2):
Loading ./lan_replace1.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    " \x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_14
Prover 1:    "]\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "^\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "_\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "`\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	10m0.051s
user	17m10.560s
sys	0m6.659s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace10.smt2):
Loading ./lan_replace10.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_078, x_81)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_573)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_469)
Prover 1:    sigmaStar_573 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_469 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_262)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_152)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_82
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_078, x_81)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_573)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_469)
Prover 1:    sigmaStar_573 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_469 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_262)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_152)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 2: Out of memory, giving up

real	10m0.033s
user	40m58.314s
sys	0m15.443s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace100.smt2):
Loading ./lan_replace100.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (3693ms)


3704ms

real	0m3.833s
user	0m12.699s
sys	0m0.321s
sat
Test (./lan_replace102.smt2):
Loading ./lan_replace102.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x7\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x7\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x64\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x64\x3c\x2f\x74\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x64\x3c\x2f\x74\x3c\x2f\x74\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x64\x3c\x2f\x74\x3c\x2f\x74\x3c\\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x64\x3c\x2f\x74\x3c\x2f\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x3c\x2f\x74\x64\x3c\x2f\x74\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\\x3c\x2f\x74\x64\x3e\x3c\x2f\x7\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\\x3c\x2f\x74\x64\x3e\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 0: proven invalid (8749ms)
Prover 1: stopped
Prover 3: stopped
Prover 4: stopped
Prover 2: stopped


22822ms

real	0m22.943s
user	0m42.515s
sys	0m0.709s
sat
Test (./lan_replace103.smt2):
Loading ./lan_replace103.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\x27\x3b\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\x27\x3b\x\x27\x3b\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\x27\x3b\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\x27\x3b\x\x\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\x27\x3b\x\x\x27\x3b\x5\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x3b\x5c\\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x3b\x5c\\x27\x3b\x5c\x6e\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x3b\x5c\\x27\x3b\x5c\x6e\x27\x3b\x5c\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x3b\x5c\\x27\x3b\x5c\x6e\x27\x3b\x5c\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x3b\x5c\\x27\x3b\x5c\x6e\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (29854ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


113686ms

real	1m53.792s
user	2m24.441s
sys	0m1.719s
sat
Test (./lan_replace104.smt2):
Loading ./lan_replace104.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x2\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x2\x27\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x2\x27\x\x27\x3b\x\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x2\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x2\\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x2\\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x2\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (30116ms)
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


114704ms

real	1m54.811s
user	2m27.008s
sys	0m1.786s
sat
Test (./lan_replace105.smt2):
Loading ./lan_replace105.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x2\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x2\x27\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x2\x27\x\x27\x3b\x\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x2\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x2\\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x2\\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\x2\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\\\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (30564ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


116580ms

real	1m56.686s
user	2m27.966s
sys	0m1.685s
sat
Test (./lan_replace106.smt2):
Loading ./lan_replace106.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_178, x_81)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_673)
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_673 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_569)
Prover 1:    sigmaStar_569 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_062)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_452)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_248)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_82
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_178, x_81)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_673)
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_673 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_569)
Prover 1:    sigmaStar_569 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_062)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_452)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_248)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 2: Out of memory, giving up

real	10m0.040s
user	36m5.509s
sys	0m13.167s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace107.smt2):
Loading ./lan_replace107.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3\x3c\x2f\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3\x3c\x2f\\\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3\x3c\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3\x3c\\\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 3: stopped
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3\\x3\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3\\x3\x3c\x\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3\\\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (34569ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


133081ms

real	2m13.202s
user	2m43.796s
sys	0m1.690s
sat
Test (./lan_replace108.smt2):
Loading ./lan_replace108.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_690, x_97)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_385)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_281)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_385 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    sigmaStar_281 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_162)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_552)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_98
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_690, x_97)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_385)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_281)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_385 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    sigmaStar_281 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_162)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_552)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 2: Out of memory, giving up

real	9m59.999s
user	44m29.207s
sys	0m14.460s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace12.smt2):
Loading ./lan_replace12.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\x70\\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\\x3c\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\\x3c\x3c\x2f\x70\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\\x3c\x3c\x2f\x70\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 3: stopped
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3c\x2f\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3c\x2f\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3c\x2f\x3c\x2\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3\x3c\x\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3\x3c\x\x3c\x2f\x70\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3\x3c\x\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3\x3c\x\x3c\x2f\x7\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e\x3\x3c\x\x3c\x2f\x7\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x\\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\x3c\x2f\x70\\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\x70\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\x70\x3\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\x70\x3\x3c\x2f\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\x70\x3\x3c\x2f\x3c\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\\x3c\\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\\\x3c\x2f\\x3c\\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	10m0.047s
user	11m10.801s
sys	0m4.898s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace13.smt2):
Loading ./lan_replace13.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x27\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x27\x27\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x2\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x2\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x2\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x2\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x2\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x2\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x2\x27\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x2\x27\x\x\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x2\x27\x\x\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x2\x27\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (33188ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


126753ms

real	2m6.860s
user	2m39.154s
sys	0m1.968s
sat
Test (./lan_replace14.smt2):
Loading ./lan_replace14.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\\x27\x3\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x\\x27\x3\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x\\x27\x3\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x\\x27\x3\x\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x2\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x2\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (33322ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


127716ms

real	2m7.822s
user	2m39.661s
sys	0m1.900s
sat
Test (./lan_replace15.smt2):
Loading ./lan_replace15.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x27\x3b\x\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x27\x3b\x\x2\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (33778ms)
Prover 4: stopped
Prover 2: stopped
Prover 1: stopped


130043ms

real	2m10.148s
user	2m41.685s
sys	0m1.945s
sat
Test (./lan_replace16.smt2):
Loading ./lan_replace16.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_590, x_97)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_485)
Prover 1:    sigmaStar_485 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_281)
Prover 1:    sigmaStar_281 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_362)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_052)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_98
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_590, x_97)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_485)
Prover 1:    sigmaStar_485 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_281)
Prover 1:    sigmaStar_281 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_362)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_052)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 2: Out of memory, giving up

real	70m6.004s
user	27m11.729s
sys	0m10.258s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace17.smt2):
Loading ./lan_replace17.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2\x3c\x2\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2\x3c\x2f\x74\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2\x3c\x2f\x74\x\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2\x3c\x2f\x74\x\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2\x3c\x2f\x74\x\x3c\x\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2f\x74\x64\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2f\x74\x6\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x\x3c\x2f\x74\x64\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x3c\x2f\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x3c\x2f\x\x3c\x2f\x74\x64\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x3c\x2f\x\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x3c\x2f\x\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x3c\x2f\x\x\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 3: stopped
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x3c\x2f\x\x\x3c\x\x3c\x2f\x74\x64\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x3c\x2f\x\x\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\\x3c\x2f\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\\x3c\x2f\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\\x3c\x2f\x3\x3c\x2f\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\\x3c\x2f\x3\x3c\x2f\x\x3c\x2f\x74\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\\x3c\x2f\x3\x3c\x2f\x\x3c\x2f\x74\\x3c\x2f\x74\x6\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\\x3c\x2f\x3\x3c\x2f\x\x3c\x2f\x74\\x3c\x2f\x74\x6\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\\x3c\x2f\x3\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\\x3c\\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\\x3c\\x3\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\\x3c\\x3\x\x3c\x2f\x74\x64\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\\x3c\\x3\x\x3c\x2\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3\x3c\x2\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3\x3c\x2\x3c\x2\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\\x3c\x2f\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\\x3c\x2f\x\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\\x\x3c\x2f\x74\x6\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	19m19.561s
user	10m28.941s
sys	0m5.097s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace18.smt2):
Loading ./lan_replace18.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_278, x_81)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_173)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_069)
Prover 1:    sigmaStar_173 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_069 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_362)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_452)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_548)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_82
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_278, x_81)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_173)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_069)
Prover 1:    sigmaStar_173 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_069 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_362)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_452)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_548)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 2: Out of memory, giving up

real	10m0.021s
user	44m7.645s
sys	0m18.941s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace19.smt2):
Loading ./lan_replace19.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x3c\x2f\x70\\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x3c\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x70\x3e\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\\\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\\\x3c\x\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\\\x3c\x\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\\\x3c\x\x3c\\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\x3c\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3\x3c\x2f\x3c\x3c\x\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\\x3c\\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\\x3c\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\\x3c\\x3c\\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\\x3c\\x3c\\x3c\x2f\x70\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\\x\\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\x3c\x\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\x3c\x\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\\x3c\x\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\\x3c\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\\x3c\x\\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\\x3c\x\\x3c\x2f\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\\x3c\x\\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\\x3c\x\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\\x3c\x\\\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\\x3c\x\\\x3c\x2f\x\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	10m0.022s
user	11m1.186s
sys	0m6.144s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace2.smt2):
Loading ./lan_replace2.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1368ms)


1377ms

real	0m1.504s
user	0m3.977s
sys	0m0.136s
sat
Test (./lan_replace20.smt2):
Loading ./lan_replace20.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_390, x_97)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_485)
Prover 1:    sigmaStar_485 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_081)
Prover 1:    sigmaStar_081 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_262)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_552)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_98
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_390, x_97)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_485)
Prover 1:    sigmaStar_485 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_081)
Prover 1:    sigmaStar_081 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_262)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_552)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 1: Out of memory, giving up

real	10m1.869s
user	56m35.271s
sys	0m23.567s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace21.smt2):
Loading ./lan_replace21.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27ed0\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20a\x20\x3d\x20\x27a\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (353ms)
Prover 3: stopped
Prover 0: stopped
Prover 1: stopped
Prover 2: stopped


15291ms

real	0m15.422s
user	0m35.013s
sys	0m0.683s
unsat
Test (./lan_replace22.smt2):
Loading ./lan_replace22.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (299ms)


308ms

real	0m0.405s
user	0m0.627s
sys	0m0.043s
unsat
Test (./lan_replace23.smt2):
Loading ./lan_replace23.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (300ms)


308ms

real	0m0.407s
user	0m0.630s
sys	0m0.056s
unsat
Test (./lan_replace24.smt2):
Loading ./lan_replace24.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (298ms)


305ms

real	0m0.403s
user	0m0.622s
sys	0m0.042s
unsat
Test (./lan_replace25.smt2):
Loading ./lan_replace25.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (226ms)
Prover 3: stopped
Prover 2: stopped
Prover 1: stopped
Prover 0: stopped


15249ms

real	0m15.366s
user	0m28.180s
sys	0m0.529s
unsat
Test (./lan_replace27.smt2):
Loading ./lan_replace27.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\\x27\\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x\x\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x\x27\x3b\x5\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\\x27\x3b\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\\x27\x3b\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\\x27\x3b\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (90872ms)
Prover 4: stopped
Prover 2: stopped
Prover 1: stopped


358328ms

real	5m58.451s
user	6m44.308s
sys	0m4.055s
sat
Test (./lan_replace28.smt2):
Loading ./lan_replace28.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x27\x3b\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x27\x3b\x27\x3\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x3b\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x3b\\x27\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x3b\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x3b\\x27\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x3b\\x27\\x27\x3\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x3b\\x27\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x\x27\x3b\x5c\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x\x27\x3b\x5c\\x27\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x\x27\x3b\x5c\\x27\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x\x27\x3b\x5c\\x27\\x27\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x\x27\x3b\x5c\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x2\x2\x27\x27\x\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\\x27\x3b\x5c\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\\x27\x3b\x5c\\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\\x\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\\x\x27\x3b\x5c\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\\x\x27\x3b\x5c\\x27\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\\x\x27\x3b\x5c\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (91980ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


362889ms

real	6m2.997s
user	6m49.359s
sys	0m4.227s
sat
Test (./lan_replace29.smt2):
Loading ./lan_replace29.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x27\x\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x27\x\x27\x3b\x5c\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x27\x\x27\x3b\x5c\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x27\x\x27\x3b\x5c\x27\x3\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x27\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x2\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x2\x27\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x\x27\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\x27\x3b\x5c\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\x27\x3\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\x27\x3\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\x27\x3\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\x27\x3\\x27\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\x27\x3\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\x27\x3\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\x27\x3\x27\x3b\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\x27\x3\x27\x3b\\x2\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\x27\x3\x27\x3b\\x2\x27\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\x27\x3\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\x27\x3\x27\x3\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\\x27\x3b\x5c\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\\x27\x3b\x5c\\x27\x\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\\x27\x3b\x5c\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\\\x\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (89795ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


353924ms

real	5m54.033s
user	6m42.147s
sys	0m4.135s
sat
Test (./lan_replace3.smt2):
Loading ./lan_replace3.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27Ad0\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27A\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (360ms)
Prover 0: stopped
Prover 3: stopped
Prover 1: stopped
Prover 2: stopped


15299ms

real	0m15.412s
user	0m35.613s
sys	0m0.653s
unsat
Test (./lan_replace30.smt2):
Loading ./lan_replace30.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27A\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20e\x20\x3d\x20\x27e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A_$1.\x20\x3d\x20\x27AedA\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20a\x20\x3d\x20\x27a\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (34578ms)
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


133478ms

real	2m13.588s
user	2m42.101s
sys	0m1.739s
sat
Test (./lan_replace31.smt2):
Loading ./lan_replace31.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1143ms)


1153ms

real	0m1.270s
user	0m4.161s
sys	0m0.158s
sat
Test (./lan_replace32.smt2):
Loading ./lan_replace32.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    " \x20\x20\x20\x20\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "]\x20\x20\x20\x20\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_14
Prover 1:    "^\x20\x20\x20\x20\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "_\x20\x20\x20\x20\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "`\x20\x20\x20\x20\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "a\x20\x20\x20\x20\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_9)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	10m0.052s
user	18m30.129s
sys	0m5.608s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace33.smt2):
Loading ./lan_replace33.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "]\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "^\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "_\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_14
Prover 1:    "`\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_14
Prover 1:    "a\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "b\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "c\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "d\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "e\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	10m0.092s
user	17m59.747s
sys	0m5.133s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace34.smt2):
Loading ./lan_replace34.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22a\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22b\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x220\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22c\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	10m0.028s
user	10m52.389s
sys	0m5.373s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace36.smt2):
Loading ./lan_replace36.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\x27\x3b\x5c\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\\x27\x3b\x5c\\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\\x27\x3b\x5c\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\\x27\x3b\x5c\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\\x27\x3b\x5\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x27\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x27\x3b\x\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\\x27\x3b\x5\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\\x27\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	43m17.844s
user	10m45.521s
sys	0m4.796s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace37.smt2):
Loading ./lan_replace37.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\x\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x\x27\x3b\x5c\x\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x\x27\x3b\x5c\x\x27\x3b\x5c\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x\x27\x3b\x5c\x\x27\x3b\x5c\\x27\\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x\x27\x3b\x5c\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\\x27\x3b\x\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\\x2\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\\x\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\\x\x27\x3b\x5\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\\x\x27\x3b\x5\x27\x3b\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x27\x3b\x5c\x6\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3\x27\x3\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3\x2\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3\x2\x27\x3b\x5c\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3\x2\x27\x3b\x5c\x\x27\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3\x2\x27\x3b\x5c\x\x27\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3\x2\x27\x3b\x5c\x\x27\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3\x2\x27\x3b\x5c\x\x27\x27\x3b\x5c\x\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	10m0.043s
user	11m0.471s
sys	0m6.102s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace38.smt2):
Loading ./lan_replace38.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3b\x5c\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x27\x3b\x5c\\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x27\x3b\x5c\\x27\x3b\x5c\x6e\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x27\x3b\x\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x27\x3b\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x27\x3b\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x5c\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x5c\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x5c\x\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x5\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x5\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x5\x2\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x\x27\x3b\x5c\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x\x27\x3b\x5c\x27\x3b\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x\x27\x3b\x5c\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x\x\x27\x3b\x\x27\x3b\x5c\x2\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	10m0.032s
user	11m6.688s
sys	0m4.675s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace39.smt2):
Loading ./lan_replace39.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27ddA\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x200\x20\x3d\x20\x270\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.0\x20\x3d\x20\x27dda0\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: proved (8039ms)
Prover 0: stopped
Prover 3: stopped
Prover 1: stopped
Prover 2: stopped


50125ms

real	0m50.254s
user	1m12.034s
sys	0m0.991s
unsat
Test (./lan_replace4.smt2):
Loading ./lan_replace4.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_49)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_49)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_49)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.A\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_49)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_49)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.a\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_49)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_49)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (186ms)
Prover 3: stopped
Prover 1: stopped
Prover 0: stopped
Prover 2: stopped


15122ms

real	0m15.254s
user	0m35.814s
sys	0m0.714s
unsat
Test (./lan_replace40.smt2):
Loading ./lan_replace40.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x270dA\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x200\x20\x3d\x20\x270\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x200_$1.\x20\x3d\x20\x270Ade\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: proved (8576ms)
Prover 3: stopped
Prover 1: stopped
Prover 0: stopped
Prover 2: stopped


51840ms

real	0m51.961s
user	1m14.670s
sys	0m1.104s
unsat
Test (./lan_replace41.smt2):
Loading ./lan_replace41.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2911ms)


2920ms

real	0m3.034s
user	0m8.252s
sys	0m0.243s
sat
Test (./lan_replace42.smt2):
Loading ./lan_replace42.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27Ada\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.a\x20\x3d\x20\x27Ad0a\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x200\x20\x3d\x20\x270\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: proved (8117ms)
Prover 3: stopped
Prover 0: stopped
Prover 1: stopped
Prover 2: stopped


49676ms

real	0m49.779s
user	1m12.790s
sys	0m0.995s
unsat
Test (./lan_replace43.smt2):
Loading ./lan_replace43.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (242ms)
Prover 2: stopped
Prover 3: stopped
Prover 1: stopped
Prover 0: stopped


15202ms

real	0m15.330s
user	0m28.581s
sys	0m0.494s
unsat
Test (./lan_replace44.smt2):
Loading ./lan_replace44.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1202ms)


1211ms

real	0m1.320s
user	0m4.297s
sys	0m0.138s
sat
Test (./lan_replace5.smt2):
Loading ./lan_replace5.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_278, x_81)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_173)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_469)
Prover 1:    sigmaStar_173 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_469 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_362)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_052)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_548)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_82
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_278, x_81)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_173)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_469)
Prover 1:    sigmaStar_173 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_469 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_362)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_052)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_548)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 2: Out of memory, giving up

real	10m0.020s
user	43m18.849s
sys	0m12.350s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace50.smt2):
Loading ./lan_replace50.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1640ms)


1651ms

real	0m1.788s
user	0m6.136s
sys	0m0.232s
sat
Test (./lan_replace51.smt2):
Loading ./lan_replace51.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2490ms)


2499ms

real	0m2.623s
user	0m9.505s
sys	0m0.280s
sat
Test (./lan_replace52.smt2):
Loading ./lan_replace52.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2522ms)


2532ms

real	0m2.652s
user	0m9.589s
sys	0m0.268s
sat
Test (./lan_replace53.smt2):
Loading ./lan_replace53.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (497ms)


506ms

real	0m0.621s
user	0m1.216s
sys	0m0.092s
sat
Test (./lan_replace55.smt2):
Loading ./lan_replace55.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x27\x3b\x\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x27\x3b\x\x2\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x5c\\\x2\x27\x3b\x5c\x27\x3b\x\x2\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\\x27\x3b\\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 0: proven invalid (34123ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


131308ms

real	2m11.430s
user	2m45.441s
sys	0m1.912s
sat
Test (./lan_replace56.smt2):
Loading ./lan_replace56.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x\x27\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x27\x3b\x\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x27\x3b\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x27\x3b\x\\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x27\x3b\x\\x27\x3b\x5\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x27\x3b\x\\x27\x3b\x5\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x27\x3b\x\\x27\x3b\x5\x27\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x27\x3b\x\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x27\x3b\x\\x27\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (34895ms)
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


134358ms

real	2m14.479s
user	2m49.948s
sys	0m1.944s
sat
Test (./lan_replace57.smt2):
Loading ./lan_replace57.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x\x27\x3\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x3b\x5c\\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x3b\x5c\\x27\x3b\x5c\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x3b\x5c\\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\x3b\x5c\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\\x27\\x27\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (33572ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


128781ms

real	2m8.904s
user	2m43.633s
sys	0m1.963s
sat
Test (./lan_replace58.smt2):
Loading ./lan_replace58.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x5c\\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x5c\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x5c\\x2\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x27\\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x27\\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x27\\x27\x3b\x5c\x\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x27\\x27\x3b\x5c\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x27\\x27\x3b\x5c\x\x27\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x2\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x2\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x2\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x3b\x2\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x\x27\x3b\x5c\x6\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x\x27\x3b\x5c\x6\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x\x\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20A\x20\x3d\x20\x27\x\x\x27\x3b\x5c\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_050)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (35503ms)
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


136905ms

real	2m17.025s
user	2m50.173s
sys	0m2.058s
sat
Test (./lan_replace59.smt2):
Loading ./lan_replace59.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27AdA\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.A\x20\x3d\x20\x27dddA\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (427ms)
Prover 3: stopped
Prover 1: stopped
Prover 2: stopped
Prover 0: stopped


15364ms

real	0m15.494s
user	0m38.330s
sys	0m0.799s
unsat
Test (./lan_replace6.smt2):
Loading ./lan_replace6.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x\x3\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3\x3\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x\x3c\x2f\x\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 3: stopped
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2\x3c\x2f\x70\x3e\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x\\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x\\x3c\x2f\x7\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x\\x3c\x2f\x7\x3c\x2f\x7\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x\\x3c\x2f\x7\x3c\x2f\x7\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x\\x3c\x2f\x7\x3c\x2f\x7\x\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x\\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (37456ms)
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


144718ms

real	2m24.828s
user	2m59.757s
sys	0m1.851s
sat
Test (./lan_replace60.smt2):
Loading ./lan_replace60.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1516ms)


1527ms

real	0m1.644s
user	0m5.439s
sys	0m0.205s
sat
Test (./lan_replace61.smt2):
Loading ./lan_replace61.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x270dA\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20a\x20\x3d\x20\x27a\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (338ms)
Prover 3: stopped
Prover 1: stopped
Prover 2: stopped
Prover 0: stopped


15282ms

real	0m15.391s
user	0m38.846s
sys	0m0.717s
unsat
Test (./lan_replace62.smt2):
Loading ./lan_replace62.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (285ms)
Prover 3: stopped
Prover 1: stopped
Prover 2: stopped
Prover 0: stopped


15290ms

real	0m15.404s
user	0m30.326s
sys	0m0.531s
unsat
Test (./lan_replace64.smt2):
Loading ./lan_replace64.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x\x27\x3\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x\x27\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x\x27\\x27\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x\x27\\x27\x27\x3b\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\x27\x\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x\\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x3b\x5c\\x27\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (37754ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


146298ms

real	2m26.420s
user	3m4.357s
sys	0m2.073s
sat
Test (./lan_replace65.smt2):
Loading ./lan_replace65.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x27\x3b\x5c\x6\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x27\x3b\x5c\x6\x27\x3b\x5c\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x27\x3b\x5c\x6\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\x5c\x27\x3b\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x27\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x2\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x2\x27\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x2\x27\\x27\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x2\x27\\x27\x27\x3b\x\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x2\x27\\x27\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x2\x27\\x27\x27\\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x2\x27\\x2\x2\x27\\x27\x27\\x27\x3b\x5c\x6e\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (38420ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


148543ms

real	2m28.660s
user	3m7.179s
sys	0m1.797s
sat
Test (./lan_replace66.smt2):
Loading ./lan_replace66.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3\x27\x3b\x5c\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3\x27\x3b\x5c\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3\x27\x3b\x5c\x\x27\\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3\x27\x3b\x5c\x\x27\\x27\x3b\x5c\x6e\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3\x27\x3b\x5c\x\x27\\x27\x3b\x5c\x6e\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\x3b\x5c\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\x3b\x5c\\x27\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x2\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x2\x27\x3b\x\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x2\x27\x3b\x\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x2\x27\x3b\x\x27\x3b\x5\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x2\x27\x3b\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x\x27\x3b\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x\x27\x3b\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (35869ms)
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


138197ms

real	2m18.304s
user	2m56.768s
sys	0m1.824s
sat
Test (./lan_replace67.smt2):
Loading ./lan_replace67.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (316ms)


324ms

real	0m0.437s
user	0m0.807s
sys	0m0.065s
sat
Test (./lan_replace68.smt2):
Loading ./lan_replace68.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_278, x_81)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_673)
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_673 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_169)
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_169 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_062)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_552)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_348)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_82
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_278, x_81)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_673)
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_673 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_169)
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_169 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_062)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_552)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_348)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped

real	10m1.132s
user	50m37.912s
sys	0m11.350s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace69.smt2):
Loading ./lan_replace69.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (1480ms)


1489ms

real	0m1.609s
user	0m5.471s
sys	0m0.188s
sat
Test (./lan_replace7.smt2):
Loading ./lan_replace7.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_690, x_97)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_585)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_585 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_181)
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_181 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_362)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_252)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_448)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_98
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_690, x_97)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_585)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_585 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_181)
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_181 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_362)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_252)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_448)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 2: Out of memory, giving up

real	10m0.024s
user	36m59.649s
sys	0m11.120s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace70.smt2):
Loading ./lan_replace70.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (3432ms)


3441ms

real	0m3.563s
user	0m7.289s
sys	0m0.211s
sat
Test (./lan_replace71.smt2):
Loading ./lan_replace71.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x200\x20\x3d\x20\x270\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27Add\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.a\x20\x3d\x20\x270d0a\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (490ms)
Prover 0: stopped
Prover 1: stopped
Prover 3: stopped
Prover 2: stopped


15434ms

real	0m15.553s
user	0m33.141s
sys	0m0.623s
unsat
Test (./lan_replace72.smt2):
Loading ./lan_replace72.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (3511ms)


3519ms

real	0m3.634s
user	0m7.594s
sys	0m0.227s
sat
Test (./lan_replace73.smt2):
Loading ./lan_replace73.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (566ms)


576ms

real	0m0.690s
user	0m1.744s
sys	0m0.096s
sat
Test (./lan_replace74.smt2):
Loading ./lan_replace74.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_490, x_97)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_085)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_181)
Prover 1:    sigmaStar_085 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_181 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_562)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_252)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_98
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_490, x_97)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_085)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_181)
Prover 1:    sigmaStar_085 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_181 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_562)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_252)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped

real	10m0.694s
user	57m7.816s
sys	0m14.731s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace75.smt2):
Loading ./lan_replace75.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (223ms)
Prover 2: stopped
Prover 1: stopped
Prover 3: stopped
Prover 0: stopped


22482ms

real	0m22.599s
user	0m37.651s
sys	0m0.572s
unsat
Test (./lan_replace76.smt2):
Loading ./lan_replace76.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2f\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2\x3c\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2\x3c\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2\x3c\x3c\x2f\x74\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x3e\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x3e\x3c\\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x3e\x3c\\\x3c\x2f\x74\x6\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (9188ms)
Prover 3: stopped
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


25113ms

real	0m25.231s
user	0m45.653s
sys	0m0.684s
sat
Test (./lan_replace78.smt2):
Loading ./lan_replace78.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_578, x_81)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_073)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_469)
Prover 1:    sigmaStar_073 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_469 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_262)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_352)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_82
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_578, x_81)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_073)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_469)
Prover 1:    sigmaStar_073 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_469 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_262)
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_352)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 2: Out of memory, giving up

real	10m0.059s
user	42m35.397s
sys	0m14.026s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace79.smt2):
Loading ./lan_replace79.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x3c\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x3c\\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x3\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x3\x3\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x3\x3\\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2f\x7\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2f\x7\x3c\x2f\x70\x\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2f\x7\x3c\x2f\x70\x\x3c\x2f\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2f\x7\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x\x3c\x2f\x70\x\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x\x3\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x\x3\x\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x3c\\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x3c\x\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x3c\x\x3c\x2\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x3c\x\x3c\x2\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x3c\x\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x3c\x\x3c\x2\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\\x3c\x3c\x\x3c\x2\x3c\x2f\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	10m0.027s
user	11m13.285s
sys	0m6.105s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace8.smt2):
Loading ./lan_replace8.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (195ms)
Prover 3: stopped
Prover 2: stopped
Prover 1: stopped
Prover 0: stopped


15204ms

real	0m15.322s
user	0m28.323s
sys	0m0.524s
unsat
Test (./lan_replace81.smt2):
Loading ./lan_replace81.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_490, x_97)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_185)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_081)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_185 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    sigmaStar_081 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_662)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_552)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_348)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_98
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_490, x_97)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_185)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_081)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_185 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    sigmaStar_081 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_662)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_552)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_348)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 2: Out of memory, giving up

real	69m19.436s
user	36m59.461s
sys	0m9.115s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace82.smt2):
Loading ./lan_replace82.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x\x27\x3\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\\x27\x\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\\x27\x\x27\x3b\x5c\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\\x27\x\x27\x3b\x5c\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\\x27\x\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x\x27\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x\x27\\x27\x3b\x5c\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x\x27\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x3b\x\x27\\x27\x\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x\x27\x3b\x\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x\x27\x3b\x\x27\x3\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x27\x\x27\x3b\\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3b\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3b\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3b\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3b\x27\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x3b\x27\x\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x\\x27\x3b\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x\\x27\x3b\x\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x\\x27\x3b\x\x27\x3b\x5c\x\x27\x3b\x5c\x6e\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x\\x27\x3b\x\x27\x3b\x5c\x\x27\x3b\x5c\x6e\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\x27\x\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x27\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x27\x27\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\\x27\x3b\x5c\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\\x27\x3b\x5c\\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\\x27\x3b\x5c\\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\\x27\x3b\x5\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\x27\x3\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\x27\x3\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\\x\\\\x\x27\x27\\x27\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (951479ms)
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


4639847ms

real	77m19.966s
user	7m53.395s
sys	0m4.509s
sat
Test (./lan_replace84.smt2):
Loading ./lan_replace84.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x27\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\x3b\x5c\x6\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\x3b\x5c\x6\x27\x3b\\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\x3b\x5c\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\\x2\x27\x3b\x5c\x\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27\x3b\x5c\x6e")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp(x_9, sigmaStar_054)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_9 =
Prover 1:      concatCEPreOp(x_7, "\x20\x3d\x20\x27")
Prover 1:    x_7 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_5)
Prover 1:    x_5 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 0: proven invalid (40542ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


879211ms

real	14m39.316s
user	2m25.585s
sys	0m1.435s
sat
Test (./lan_replace85.smt2):
Loading ./lan_replace85.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x3c\x2f\x74\x64\x3e\x3c\x2\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x3c\x2f\x3c\x2f\x74\x64\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x3c\x2f\x3c\x2f\x74\x64\x\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x3c\x2f\x3c\x2f\x74\x64\x\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x\x\x3c\x2f\x74\x6\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3\x\x\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2\x3c\x2f\x74\x6\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2\x3c\\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2\x3c\\x3c\x2f\x74\x3c\x2f\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2\x3c\\x3c\x2f\x74\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (16949ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


80620ms

real	1m20.780s
user	1m17.955s
sys	0m0.977s
sat
Test (./lan_replace86.smt2):
Loading ./lan_replace86.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_178, x_81)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_373)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_569)
Prover 1:    sigmaStar_373 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_569 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_062)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_252)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_82
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_178, x_81)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_373)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_569)
Prover 1:    sigmaStar_373 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_569 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_062)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_252)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped

real	126m6.300s
user	55m17.673s
sys	0m10.885s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace87.smt2):
Loading ./lan_replace87.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (965924ms)


965936ms

real	16m6.065s
user	1m18.989s
sys	0m0.743s
sat
Test (./lan_replace88.smt2):
Loading ./lan_replace88.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_090, x_97)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_285)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_381)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_285 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    sigmaStar_381 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_462)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_652)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_548)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_98
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_090, x_97)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_285)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_381)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_285 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    sigmaStar_381 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_462)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_652)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_548)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: stopped
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Out of memory, giving up

real	48m58.031s
user	77m28.382s
sys	0m16.203s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace89.smt2):
Loading ./lan_replace89.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (3059ms)


3068ms

real	0m3.193s
user	0m7.628s
sys	0m0.211s
sat
Test (./lan_replace9.smt2):
Loading ./lan_replace9.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3c\x2f\x7\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3c\x2f\x7\x3c\x2f\x74\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\x2f\x7\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\x2f\x7\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\x2f\x7\x\x3c\x2f\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\x2f\x7\x\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\x2f\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3c\x2f\x\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x2\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x3c\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2f\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2f\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2f\x3c\\x3c\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2f\x3c\\x3c\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2f\x3c\\x3c\x3c\x2f\x74\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x\x\x3c\x2f\x3c\\x3c\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x\x3c\x2f\x74\x6\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x\x3c\x2f\x74\x6\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x\x3c\x2f\x74\x6\x3c\x\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x3c\x2f\x74\x64\x3c\x2\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x\x3c\x2f\x74\x64\x3e\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x\x3c\x2f\x74\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x\x3c\x2f\x74\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3\x\x3c\x2\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (59709ms)
Prover 1: stopped
Prover 2: stopped
Prover 4: stopped


233327ms

real	3m53.447s
user	4m28.310s
sys	0m2.348s
sat
Test (./lan_replace91.smt2):
Loading ./lan_replace91.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2095ms)


2103ms

real	0m2.219s
user	0m6.465s
sys	0m0.174s
sat
Test (./lan_replace92.smt2):
Loading ./lan_replace92.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20\x20\x3d\x20\x27\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x200\x20\x3d\x20\x270\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x20\x20\x20\x20_$1.\x20\x3d\x20\x27add\x27\x3b\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x27\x3b\x5c\x6e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(x_11, sigmaStar_safe_48)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp(x_9, "\x20\x3d\x20\x27")
Prover 1:    x_9 =
Prover 1:      concatCEPreOp("\x20\x20\x20\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (401ms)
Prover 3: stopped
Prover 2: stopped
Prover 1: stopped
Prover 0: stopped


15336ms

real	0m15.437s
user	0m33.225s
sys	0m0.541s
unsat
Test (./lan_replace93.smt2):
Loading ./lan_replace93.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x74\x64\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x3c\x2f\x74\x64\\x3c\x2f\x74\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x2f\x74\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\x2f\x74\x64\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\x2f\x74\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\x2f\x74\\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\x2f\x74\\x\x3c\x2f\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\x2f\x74\\x\x3c\x2f\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\\x3c\x\x3c\x2f\x74\x64\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\\x3c\x\x3c\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3c\\x3c\x\x3c\x\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\x3c\x\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\x3c\x2f\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\x3c\x2f\x\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\x3c\x2f\x\x3c\x2f\x74\x64\x3e\x3c\x2f\x74\x\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\x3c\x2f\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\x3c\x2f\\x3c\x2f\\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\x3c\x2f\\x3c\x2f\x7\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20\\\\x3c\x2f\\x3c\x2f\x7\x3\x3c\x2f\x74\x64\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x3c\x2f\x74\x64\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x3c\x74\x64\x3e\x55\x52\x4c\x3a\x20", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (46867ms)
Prover 1: stopped
Prover 2: stopped
Prover 4: stopped


181824ms

real	3m1.958s
user	3m40.153s
sys	0m1.852s
sat
Test (./lan_replace94.smt2):
Loading ./lan_replace94.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_14
Prover 1:    "\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_12, "\x22\x3c\x2f\x66\x6f\x6e\x74\x3e\x3c\x2f\x63\x65\x6e\x74\x65\x72\x3e\x3c\x62\x72\x20\x2f\x3e")
Prover 1:    x_12 =
Prover 1:      concatCEPreOp("\x3c\x63\x65\x6e\x74\x65\x72\x3e\x3c\x66\x6f\x6e\x74\x20\x63\x6f\x6c\x6f\x72\x3d\x22\x72\x65\x64\x22\x3e\x6e\x6f\x6e\x75\x6d\x65\x72\x69\x63\x77\x65\x69\x67\x68\x74\x3a\x20\x22", x_8)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 4: proved (243ms)
Prover 1: stopped
Prover 2: stopped
Prover 3: stopped
Prover 0: stopped


15208ms

real	0m15.404s
user	0m27.622s
sys	0m0.565s
unsat
Test (./lan_replace95.smt2):
Loading ./lan_replace95.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_82 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_378, x_81)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_273)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_569)
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_273 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_569 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_462)
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_152)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_82
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_378, x_81)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_81 =
Prover 1:      concatCEPreOp(x_79, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_79 =
Prover 1:      concatCEPreOp(x_78, x_77)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_75, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_77 =
Prover 1:      concatCEPreOp(x_71, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_71 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_75 =
Prover 1:      concatCEPreOp(x_69, sigmaStar_273)
Prover 1:    x_69 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_569)
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_54, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_273 =
Prover 1:      concatCEPreOp(x_57, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_57 =
Prover 1:      concatCEPreOp(x_46, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    sigmaStar_569 =
Prover 1:      concatCEPreOp(x_48, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_54 =
Prover 1:      concatCEPreOp(x_43, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp(x_39, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_40, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_43 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", sigmaStar_462)
Prover 1:    x_39 =
Prover 1:      concatCEPreOp(x_32, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_40 =
Prover 1:      concatCEPreOp(x_34, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_32 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_24)
Prover 1:    x_34 =
Prover 1:      concatCEPreOp(x_29, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_29 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_15)
Prover 1:    x_24 =
Prover 1:      ReplaceCEPreOp(sigmaStar_152)
Prover 1:    x_15 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 2: Out of memory, giving up

real	10m0.026s
user	47m18.629s
sys	0m12.311s
TIMEOUT (1 hour limit exceeded)
Test (./lan_replace96.smt2):
Loading ./lan_replace96.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3\x3c\x2f\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3\x3c\x2f\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3\x3c\x2f\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 3: stopped
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3\x3c\x2f\x3\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3\x3c\x2f\x3\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3\x3c\x2f\x3\x3c\x\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3\x3c\x2\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3\x3c\x2\x3c\x2f\x70\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x\\x3c\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x\\x3c\\x3c\\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x\\x3c\\x3c\\x3c\x2\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x2f\x\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_4 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 0: proven invalid (120303ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


478526ms

real	7m58.635s
user	9m18.991s
sys	0m4.452s
sat
Test (./lan_replace97.smt2):
Loading ./lan_replace97.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (3704ms)


3714ms

real	0m3.835s
user	0m12.554s
sys	0m0.317s
sat
Test (./lan_replace98.smt2):
Loading ./lan_replace98.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (3707ms)


3714ms

real	0m3.831s
user	0m12.641s
sys	0m0.317s
sat
Test (./lan_replace99.smt2):
Loading ./lan_replace99.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_98 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_090, x_97)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_485)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_581)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_485 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    sigmaStar_581 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_262)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_152)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_98
Prover 1:    "\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(sigmaStar_090, x_97)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_97 =
Prover 1:      concatCEPreOp(x_95, "\x3c\x2f\x46\x4f\x4e\x54\x3e\x3c\x2f\x54\x44\x3e\x3c\x2f\x54\x52\x3e")
Prover 1:    x_95 =
Prover 1:      concatCEPreOp(x_94, x_93)
Prover 1:    x_94 =
Prover 1:      concatCEPreOp(x_91, "\x26\x6e\x62\x73\x70\x3b\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x69\x70\x62\x75\x74\x2e\x70\x6e\x67\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22\x22\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_93 =
Prover 1:      concatCEPreOp(x_87, "\x64\x65\x6c\x65\x74\x65\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_91 =
Prover 1:      concatCEPreOp(x_85, sigmaStar_485)
Prover 1:    x_87 =
Prover 1:      concatCEPreOp(x_78, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_85 =
Prover 1:      concatCEPreOp("\x3c\x2f\x54\x44\x3e\x3c\x54\x44\x20\x53\x54\x59\x4c\x45\x3d\x54\x45\x58\x54\x2d\x41\x4c\x49\x47\x4e\x3a\x72\x69\x67\x68\x74\x3b\x3e\x3c\x46\x4f\x4e\x54\x20\x53\x49\x5a\x45\x3d\x31\x3e", sigmaStar_581)
Prover 1:    x_78 =
Prover 1:      concatCEPreOp(x_70, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x64\x65\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    sigmaStar_485 =
Prover 1:      concatCEPreOp(x_73, "\x77\x65\x62\x73\x69\x74\x65\x20\x55\x52\x4c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_73 =
Prover 1:      concatCEPreOp(x_62, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_70 =
Prover 1:      concatCEPreOp(x_59, "\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    sigmaStar_581 =
Prover 1:      concatCEPreOp(x_64, "\x65\x6d\x61\x69\x6c\x22\x3e\x3c\x2f\x41\x3e\x26\x6e\x62\x73\x70\x3b")
Prover 1:    x_64 =
Prover 1:      concatCEPreOp(x_56, "\x20\x42\x4f\x52\x44\x45\x52\x3d\x30\x20\x41\x4c\x54\x3d\x5c\x22")
Prover 1:    x_62 =
Prover 1:      concatCEPreOp(x_55, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x68\x6f\x6d\x65\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_59 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x70\x62\x6c\x67\x75\x65\x73\x74\x62\x6f\x6f\x6b\x2e\x70\x68\x70\x3f\x61\x63\x74\x69\x6f\x6e\x3d\x64\x65\x6c\x65\x74\x65\x26\x69\x64\x3d", x_50)
Prover 1:    x_50 =
Prover 1:      ReplaceCEPreOp(x_37)
Prover 1:    x_55 =
Prover 1:      concatCEPreOp(x_46, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_56 =
Prover 1:      concatCEPreOp(x_48, "\x68\x74\x74\x70\x3a\x2f\x2f\x6c\x6f\x63\x61\x6c\x68\x6f\x73\x74\x2f\x65\x6d\x61\x69\x6c\x62\x75\x74\x2e\x70\x6e\x67")
Prover 1:    x_46 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x68\x74\x74\x70\x3a\x2f\x2f", x_34)
Prover 1:    x_37 =
Prover 1:      ReplaceCEPreOp(sigmaStar_262)
Prover 1:    x_48 =
Prover 1:      concatCEPreOp(x_41, "\x5c\x22\x3e\x3c\x49\x4d\x47\x20\x53\x52\x43\x3d")
Prover 1:    x_41 =
Prover 1:      concatCEPreOp("\x26\x6e\x62\x73\x70\x3b\x3c\x41\x20\x53\x54\x59\x4c\x45\x3d\x43\x4f\x4c\x4f\x52\x3a\x62\x6c\x75\x65\x3b\x20\x48\x52\x45\x46\x3d\x5c\x22\x6d\x61\x69\x6c\x74\x6f\x3a", x_23)
Prover 1:    x_34 =
Prover 1:      ReplaceCEPreOp(x_17)
Prover 1:    x_23 =
Prover 1:      ReplaceCEPreOp(x_10)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_152)
Prover 1:    x_10 =
Prover 1:      ReplaceCEPreOp(sigmaStar_648)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replacere/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 2: Out of memory, giving up

real	10m0.032s
user	46m35.489s
sys	0m15.068s
TIMEOUT (1 hour limit exceeded)
