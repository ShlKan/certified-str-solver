Test (./pcp_instance_0.smt2):
Loading ./pcp_instance_0.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (481ms)


490ms

real	0m0.613s
user	0m1.485s
sys	0m0.094s
sat
Test (./pcp_instance_1.smt2):
Loading ./pcp_instance_1.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (447ms)


456ms

real	0m0.572s
user	0m1.373s
sys	0m0.083s
sat
Test (./pcp_instance_10.smt2):
Loading ./pcp_instance_10.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (352ms)


360ms

real	0m0.467s
user	0m0.944s
sys	0m0.050s
sat
Test (./pcp_instance_100.smt2):
Loading ./pcp_instance_100.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11126ms

real	0m11.227s
user	0m18.262s
sys	0m0.419s
unsat
Test (./pcp_instance_101.smt2):
Loading ./pcp_instance_101.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11115ms

real	0m11.215s
user	0m17.860s
sys	0m0.422s
unsat
Test (./pcp_instance_102.smt2):
Loading ./pcp_instance_102.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11108ms

real	0m11.214s
user	0m18.057s
sys	0m0.447s
unsat
Test (./pcp_instance_103.smt2):
Loading ./pcp_instance_103.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11111ms

real	0m11.224s
user	0m18.222s
sys	0m0.413s
unsat
Test (./pcp_instance_104.smt2):
Loading ./pcp_instance_104.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (410ms)


418ms

real	0m0.519s
user	0m0.901s
sys	0m0.047s
sat
Test (./pcp_instance_105.smt2):
Loading ./pcp_instance_105.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (359ms)


368ms

real	0m0.479s
user	0m1.035s
sys	0m0.048s
sat
Test (./pcp_instance_106.smt2):
Loading ./pcp_instance_106.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (364ms)


373ms

real	0m0.480s
user	0m1.075s
sys	0m0.070s
sat
Test (./pcp_instance_107.smt2):
Loading ./pcp_instance_107.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (357ms)


365ms

real	0m0.459s
user	0m1.014s
sys	0m0.050s
sat
Test (./pcp_instance_108.smt2):
Loading ./pcp_instance_108.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (448ms)


456ms

real	0m0.563s
user	0m1.400s
sys	0m0.078s
sat
Test (./pcp_instance_109.smt2):
Loading ./pcp_instance_109.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (446ms)


454ms

real	0m0.562s
user	0m1.393s
sys	0m0.065s
sat
Test (./pcp_instance_11.smt2):
Loading ./pcp_instance_11.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (483ms)


491ms

real	0m0.598s
user	0m1.539s
sys	0m0.092s
sat
Test (./pcp_instance_110.smt2):
Loading ./pcp_instance_110.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (412ms)


425ms

real	0m0.527s
user	0m1.175s
sys	0m0.085s
sat
Test (./pcp_instance_111.smt2):
Loading ./pcp_instance_111.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (507ms)


519ms

real	0m0.651s
user	0m1.479s
sys	0m0.107s
sat
Test (./pcp_instance_112.smt2):
Loading ./pcp_instance_112.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11151ms

real	0m11.266s
user	0m17.663s
sys	0m0.424s
unsat
Test (./pcp_instance_113.smt2):
Loading ./pcp_instance_113.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (478ms)


487ms

real	0m0.601s
user	0m1.138s
sys	0m0.049s
sat
Test (./pcp_instance_114.smt2):
Loading ./pcp_instance_114.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (453ms)


462ms

real	0m0.569s
user	0m1.419s
sys	0m0.076s
sat
Test (./pcp_instance_115.smt2):
Loading ./pcp_instance_115.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11122ms

real	0m11.233s
user	0m17.553s
sys	0m0.407s
unsat
Test (./pcp_instance_116.smt2):
Loading ./pcp_instance_116.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (57ms)
Prover 1: stopped
Prover 0: stopped


11091ms

real	0m11.197s
user	0m16.871s
sys	0m0.380s
unsat
Test (./pcp_instance_117.smt2):
Loading ./pcp_instance_117.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (481ms)


489ms

real	0m0.581s
user	0m1.120s
sys	0m0.050s
sat
Test (./pcp_instance_118.smt2):
Loading ./pcp_instance_118.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101101101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101101101101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11121ms

real	0m11.232s
user	0m17.977s
sys	0m0.416s
unsat
Test (./pcp_instance_119.smt2):
Loading ./pcp_instance_119.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (38ms)
Prover 0: stopped
Prover 1: stopped


11116ms

real	0m11.214s
user	0m17.573s
sys	0m0.407s
unsat
Test (./pcp_instance_12.smt2):
Loading ./pcp_instance_12.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11098ms

real	0m11.210s
user	0m17.276s
sys	0m0.387s
unsat
Test (./pcp_instance_120.smt2):
Loading ./pcp_instance_120.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (54ms)
Prover 1: stopped
Prover 0: stopped


11103ms

real	0m11.214s
user	0m18.153s
sys	0m0.400s
unsat
Test (./pcp_instance_121.smt2):
Loading ./pcp_instance_121.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (49ms)
Prover 1: stopped
Prover 0: stopped


11100ms

real	0m11.212s
user	0m17.872s
sys	0m0.419s
unsat
Test (./pcp_instance_122.smt2):
Loading ./pcp_instance_122.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (55ms)
Prover 1: stopped
Prover 0: stopped


11110ms

real	0m11.222s
user	0m17.032s
sys	0m0.397s
unsat
Test (./pcp_instance_123.smt2):
Loading ./pcp_instance_123.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11109ms

real	0m11.227s
user	0m17.291s
sys	0m0.382s
unsat
Test (./pcp_instance_124.smt2):
Loading ./pcp_instance_124.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11088ms

real	0m11.199s
user	0m18.548s
sys	0m0.440s
unsat
Test (./pcp_instance_125.smt2):
Loading ./pcp_instance_125.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (358ms)


366ms

real	0m0.472s
user	0m0.957s
sys	0m0.052s
sat
Test (./pcp_instance_126.smt2):
Loading ./pcp_instance_126.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11100ms

real	0m11.212s
user	0m17.823s
sys	0m0.426s
unsat
Test (./pcp_instance_127.smt2):
Loading ./pcp_instance_127.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (469ms)


476ms

real	0m0.582s
user	0m1.068s
sys	0m0.048s
sat
Test (./pcp_instance_128.smt2):
Loading ./pcp_instance_128.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11088ms

real	0m11.199s
user	0m17.847s
sys	0m0.405s
unsat
Test (./pcp_instance_129.smt2):
Loading ./pcp_instance_129.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (55ms)
Prover 1: stopped
Prover 0: stopped


11111ms

real	0m11.223s
user	0m18.266s
sys	0m0.441s
unsat
Test (./pcp_instance_13.smt2):
Loading ./pcp_instance_13.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (366ms)


375ms

real	0m0.481s
user	0m1.062s
sys	0m0.065s
sat
Test (./pcp_instance_130.smt2):
Loading ./pcp_instance_130.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (351ms)


360ms

real	0m0.466s
user	0m0.991s
sys	0m0.051s
sat
Test (./pcp_instance_131.smt2):
Loading ./pcp_instance_131.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (593ms)


601ms

real	0m0.708s
user	0m1.798s
sys	0m0.113s
sat
Test (./pcp_instance_132.smt2):
Loading ./pcp_instance_132.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (496ms)


506ms

real	0m0.620s
user	0m1.633s
sys	0m0.073s
sat
Test (./pcp_instance_133.smt2):
Loading ./pcp_instance_133.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (366ms)


375ms

real	0m0.483s
user	0m1.063s
sys	0m0.066s
sat
Test (./pcp_instance_134.smt2):
Loading ./pcp_instance_134.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (431ms)


439ms

real	0m0.536s
user	0m1.222s
sys	0m0.096s
sat
Test (./pcp_instance_135.smt2):
Loading ./pcp_instance_135.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11124ms

real	0m11.245s
user	0m17.682s
sys	0m0.430s
unsat
Test (./pcp_instance_136.smt2):
Loading ./pcp_instance_136.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (494ms)


508ms

real	0m0.628s
user	0m1.520s
sys	0m0.084s
sat
Test (./pcp_instance_137.smt2):
Loading ./pcp_instance_137.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (63ms)
Prover 1: stopped
Prover 0: stopped


11231ms

real	0m11.345s
user	0m19.054s
sys	0m0.552s
unsat
Test (./pcp_instance_138.smt2):
Loading ./pcp_instance_138.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (685ms)


699ms

real	0m0.862s
user	0m2.056s
sys	0m0.132s
sat
Test (./pcp_instance_139.smt2):
Loading ./pcp_instance_139.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (620ms)


632ms

real	0m0.780s
user	0m1.927s
sys	0m0.134s
sat
Test (./pcp_instance_14.smt2):
Loading ./pcp_instance_14.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (49ms)
Prover 1: stopped
Prover 0: stopped


11123ms

real	0m11.263s
user	0m17.783s
sys	0m0.434s
unsat
Test (./pcp_instance_140.smt2):
Loading ./pcp_instance_140.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11181ms

real	0m11.309s
user	0m17.660s
sys	0m0.470s
unsat
Test (./pcp_instance_141.smt2):
Loading ./pcp_instance_141.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (363ms)


371ms

real	0m0.484s
user	0m1.015s
sys	0m0.048s
sat
Test (./pcp_instance_142.smt2):
Loading ./pcp_instance_142.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11276ms

real	0m11.390s
user	0m19.175s
sys	0m0.455s
unsat
Test (./pcp_instance_143.smt2):
Loading ./pcp_instance_143.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (621ms)


633ms

real	0m0.776s
user	0m1.861s
sys	0m0.116s
sat
Test (./pcp_instance_144.smt2):
Loading ./pcp_instance_144.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11110ms

real	0m11.238s
user	0m19.286s
sys	0m0.489s
unsat
Test (./pcp_instance_145.smt2):
Loading ./pcp_instance_145.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11122ms

real	0m11.228s
user	0m17.085s
sys	0m0.332s
unsat
Test (./pcp_instance_146.smt2):
Loading ./pcp_instance_146.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (468ms)


475ms

real	0m0.578s
user	0m1.064s
sys	0m0.041s
sat
Test (./pcp_instance_147.smt2):
Loading ./pcp_instance_147.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (55ms)
Prover 1: stopped
Prover 0: stopped


11116ms

real	0m11.227s
user	0m17.763s
sys	0m0.353s
unsat
Test (./pcp_instance_148.smt2):
Loading ./pcp_instance_148.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (523ms)


532ms

real	0m0.642s
user	0m1.666s
sys	0m0.088s
sat
Test (./pcp_instance_149.smt2):
Loading ./pcp_instance_149.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (53ms)
Prover 1: stopped
Prover 0: stopped


11189ms

real	0m11.307s
user	0m18.012s
sys	0m0.448s
unsat
Test (./pcp_instance_15.smt2):
Loading ./pcp_instance_15.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11110ms

real	0m11.253s
user	0m18.261s
sys	0m0.512s
unsat
Test (./pcp_instance_150.smt2):
Loading ./pcp_instance_150.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (500ms)


509ms

real	0m0.623s
user	0m1.116s
sys	0m0.052s
sat
Test (./pcp_instance_151.smt2):
Loading ./pcp_instance_151.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (360ms)


369ms

real	0m0.475s
user	0m1.056s
sys	0m0.067s
sat
Test (./pcp_instance_152.smt2):
Loading ./pcp_instance_152.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (54ms)
Prover 1: stopped
Prover 0: stopped


11147ms

real	0m11.262s
user	0m18.299s
sys	0m0.462s
unsat
Test (./pcp_instance_153.smt2):
Loading ./pcp_instance_153.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11089ms

real	0m11.202s
user	0m18.007s
sys	0m0.413s
unsat
Test (./pcp_instance_154.smt2):
Loading ./pcp_instance_154.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11106ms

real	0m11.219s
user	0m18.501s
sys	0m0.433s
unsat
Test (./pcp_instance_155.smt2):
Loading ./pcp_instance_155.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (375ms)


384ms

real	0m0.490s
user	0m1.085s
sys	0m0.060s
sat
Test (./pcp_instance_156.smt2):
Loading ./pcp_instance_156.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (63ms)
Prover 1: stopped
Prover 0: stopped


11148ms

real	0m11.261s
user	0m18.794s
sys	0m0.410s
unsat
Test (./pcp_instance_157.smt2):
Loading ./pcp_instance_157.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (368ms)


376ms

real	0m0.484s
user	0m1.072s
sys	0m0.066s
sat
Test (./pcp_instance_158.smt2):
Loading ./pcp_instance_158.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (453ms)


462ms

real	0m0.571s
user	0m1.440s
sys	0m0.076s
sat
Test (./pcp_instance_159.smt2):
Loading ./pcp_instance_159.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (453ms)


462ms

real	0m0.569s
user	0m1.450s
sys	0m0.075s
sat
Test (./pcp_instance_16.smt2):
Loading ./pcp_instance_16.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (64ms)
Prover 1: stopped
Prover 0: stopped


11129ms

real	0m11.242s
user	0m19.266s
sys	0m0.452s
unsat
Test (./pcp_instance_160.smt2):
Loading ./pcp_instance_160.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11118ms

real	0m11.228s
user	0m18.620s
sys	0m0.433s
unsat
Test (./pcp_instance_161.smt2):
Loading ./pcp_instance_161.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11126ms

real	0m11.239s
user	0m18.127s
sys	0m0.391s
unsat
Test (./pcp_instance_162.smt2):
Loading ./pcp_instance_162.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000011000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11123ms

real	0m11.236s
user	0m18.288s
sys	0m0.430s
unsat
Test (./pcp_instance_163.smt2):
Loading ./pcp_instance_163.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (408ms)


417ms

real	0m0.525s
user	0m0.905s
sys	0m0.047s
sat
Test (./pcp_instance_164.smt2):
Loading ./pcp_instance_164.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (361ms)


370ms

real	0m0.463s
user	0m1.025s
sys	0m0.051s
sat
Test (./pcp_instance_165.smt2):
Loading ./pcp_instance_165.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (519ms)


527ms

real	0m0.637s
user	0m1.420s
sys	0m0.099s
sat
Test (./pcp_instance_166.smt2):
Loading ./pcp_instance_166.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (466ms)


474ms

real	0m0.582s
user	0m1.476s
sys	0m0.080s
sat
Test (./pcp_instance_167.smt2):
Loading ./pcp_instance_167.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (39ms)
Prover 1: stopped
Prover 0: stopped


11117ms

real	0m11.229s
user	0m17.487s
sys	0m0.436s
unsat
Test (./pcp_instance_168.smt2):
Loading ./pcp_instance_168.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11154ms

real	0m11.267s
user	0m18.215s
sys	0m0.457s
unsat
Test (./pcp_instance_169.smt2):
Loading ./pcp_instance_169.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (482ms)


491ms

real	0m0.605s
user	0m1.068s
sys	0m0.051s
sat
Test (./pcp_instance_17.smt2):
Loading ./pcp_instance_17.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11105ms

real	0m11.218s
user	0m18.013s
sys	0m0.494s
unsat
Test (./pcp_instance_170.smt2):
Loading ./pcp_instance_170.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (554ms)


563ms

real	0m0.675s
user	0m1.235s
sys	0m0.068s
sat
Test (./pcp_instance_171.smt2):
Loading ./pcp_instance_171.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (458ms)


467ms

real	0m0.583s
user	0m1.383s
sys	0m0.067s
sat
Test (./pcp_instance_172.smt2):
Loading ./pcp_instance_172.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (53ms)
Prover 1: stopped
Prover 0: stopped


11114ms

real	0m11.228s
user	0m18.379s
sys	0m0.507s
unsat
Test (./pcp_instance_173.smt2):
Loading ./pcp_instance_173.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (487ms)


496ms

real	0m0.603s
user	0m1.113s
sys	0m0.047s
sat
Test (./pcp_instance_174.smt2):
Loading ./pcp_instance_174.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (431ms)


438ms

real	0m0.547s
user	0m1.325s
sys	0m0.076s
sat
Test (./pcp_instance_175.smt2):
Loading ./pcp_instance_175.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11117ms

real	0m11.234s
user	0m17.756s
sys	0m0.426s
unsat
Test (./pcp_instance_176.smt2):
Loading ./pcp_instance_176.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101101101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101101101101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11093ms

real	0m11.205s
user	0m17.053s
sys	0m0.380s
unsat
Test (./pcp_instance_177.smt2):
Loading ./pcp_instance_177.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (401ms)


409ms

real	0m0.515s
user	0m0.899s
sys	0m0.047s
sat
Test (./pcp_instance_178.smt2):
Loading ./pcp_instance_178.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11128ms

real	0m11.241s
user	0m18.047s
sys	0m0.420s
unsat
Test (./pcp_instance_179.smt2):
Loading ./pcp_instance_179.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (474ms)


482ms

real	0m0.596s
user	0m1.365s
sys	0m0.059s
sat
Test (./pcp_instance_18.smt2):
Loading ./pcp_instance_18.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (433ms)


441ms

real	0m0.547s
user	0m1.371s
sys	0m0.075s
sat
Test (./pcp_instance_180.smt2):
Loading ./pcp_instance_180.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (364ms)


373ms

real	0m0.480s
user	0m1.054s
sys	0m0.066s
sat
Test (./pcp_instance_181.smt2):
Loading ./pcp_instance_181.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (439ms)


448ms

real	0m0.555s
user	0m1.377s
sys	0m0.075s
sat
Test (./pcp_instance_182.smt2):
Loading ./pcp_instance_182.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (487ms)


496ms

real	0m0.603s
user	0m1.589s
sys	0m0.068s
sat
Test (./pcp_instance_183.smt2):
Loading ./pcp_instance_183.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111111111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111111111111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (51ms)
Prover 1: stopped
Prover 0: stopped


11129ms

real	0m11.240s
user	0m18.303s
sys	0m0.430s
unsat
Test (./pcp_instance_184.smt2):
Loading ./pcp_instance_184.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (429ms)


437ms

real	0m0.544s
user	0m1.356s
sys	0m0.062s
sat
Test (./pcp_instance_185.smt2):
Loading ./pcp_instance_185.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (358ms)


367ms

real	0m0.461s
user	0m1.030s
sys	0m0.051s
sat
Test (./pcp_instance_186.smt2):
Loading ./pcp_instance_186.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11084ms

real	0m11.198s
user	0m18.454s
sys	0m0.430s
unsat
Test (./pcp_instance_187.smt2):
Loading ./pcp_instance_187.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (54ms)
Prover 1: stopped
Prover 0: stopped


11104ms

real	0m11.215s
user	0m18.573s
sys	0m0.429s
unsat
Test (./pcp_instance_188.smt2):
Loading ./pcp_instance_188.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (418ms)


426ms

real	0m0.533s
user	0m1.178s
sys	0m0.054s
sat
Test (./pcp_instance_189.smt2):
Loading ./pcp_instance_189.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (359ms)


368ms

real	0m0.461s
user	0m1.030s
sys	0m0.051s
sat
Test (./pcp_instance_19.smt2):
Loading ./pcp_instance_19.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (360ms)


368ms

real	0m0.475s
user	0m1.039s
sys	0m0.052s
sat
Test (./pcp_instance_190.smt2):
Loading ./pcp_instance_190.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11091ms

real	0m11.191s
user	0m17.932s
sys	0m0.428s
unsat
Test (./pcp_instance_191.smt2):
Loading ./pcp_instance_191.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11109ms

real	0m11.219s
user	0m18.298s
sys	0m0.419s
unsat
Test (./pcp_instance_192.smt2):
Loading ./pcp_instance_192.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (417ms)


426ms

real	0m0.534s
user	0m1.249s
sys	0m0.056s
sat
Test (./pcp_instance_193.smt2):
Loading ./pcp_instance_193.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11106ms

real	0m11.207s
user	0m18.336s
sys	0m0.408s
unsat
Test (./pcp_instance_194.smt2):
Loading ./pcp_instance_194.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (87ms)
Prover 1: stopped
Prover 0: stopped


11169ms

real	0m11.282s
user	0m18.045s
sys	0m0.407s
unsat
Test (./pcp_instance_195.smt2):
Loading ./pcp_instance_195.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11106ms

real	0m11.209s
user	0m17.979s
sys	0m0.415s
unsat
Test (./pcp_instance_196.smt2):
Loading ./pcp_instance_196.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (37ms)
Prover 1: stopped
Prover 0: stopped


11081ms

real	0m11.200s
user	0m17.535s
sys	0m0.380s
unsat
Test (./pcp_instance_197.smt2):
Loading ./pcp_instance_197.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (529ms)


537ms

real	0m0.633s
user	0m1.221s
sys	0m0.051s
sat
Test (./pcp_instance_198.smt2):
Loading ./pcp_instance_198.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (451ms)


460ms

real	0m0.568s
user	0m1.444s
sys	0m0.076s
sat
Test (./pcp_instance_199.smt2):
Loading ./pcp_instance_199.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11145ms

real	0m11.259s
user	0m18.141s
sys	0m0.432s
unsat
Test (./pcp_instance_2.smt2):
Loading ./pcp_instance_2.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11098ms

real	0m11.211s
user	0m17.979s
sys	0m0.493s
unsat
Test (./pcp_instance_20.smt2):
Loading ./pcp_instance_20.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11124ms

real	0m11.259s
user	0m17.839s
sys	0m0.563s
unsat
Test (./pcp_instance_200.smt2):
Loading ./pcp_instance_200.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11113ms

real	0m11.231s
user	0m16.830s
sys	0m0.406s
unsat
Test (./pcp_instance_201.smt2):
Loading ./pcp_instance_201.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (527ms)


536ms

real	0m0.642s
user	0m1.221s
sys	0m0.050s
sat
Test (./pcp_instance_202.smt2):
Loading ./pcp_instance_202.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (352ms)


360ms

real	0m0.454s
user	0m0.994s
sys	0m0.047s
sat
Test (./pcp_instance_203.smt2):
Loading ./pcp_instance_203.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11135ms

real	0m11.254s
user	0m18.468s
sys	0m0.499s
unsat
Test (./pcp_instance_204.smt2):
Loading ./pcp_instance_204.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (483ms)


491ms

real	0m0.606s
user	0m1.073s
sys	0m0.049s
sat
Test (./pcp_instance_205.smt2):
Loading ./pcp_instance_205.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (366ms)


373ms

real	0m0.482s
user	0m1.070s
sys	0m0.066s
sat
Test (./pcp_instance_206.smt2):
Loading ./pcp_instance_206.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (55ms)
Prover 1: stopped
Prover 0: stopped


11095ms

real	0m11.209s
user	0m17.893s
sys	0m0.426s
unsat
Test (./pcp_instance_207.smt2):
Loading ./pcp_instance_207.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11086ms

real	0m11.187s
user	0m17.222s
sys	0m0.396s
unsat
Test (./pcp_instance_208.smt2):
Loading ./pcp_instance_208.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (468ms)


476ms

real	0m0.583s
user	0m1.065s
sys	0m0.045s
sat
Test (./pcp_instance_209.smt2):
Loading ./pcp_instance_209.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (424ms)


433ms

real	0m0.539s
user	0m1.315s
sys	0m0.057s
sat
Test (./pcp_instance_21.smt2):
Loading ./pcp_instance_21.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (52ms)
Prover 1: stopped
Prover 0: stopped


11137ms

real	0m11.249s
user	0m18.225s
sys	0m0.421s
unsat
Test (./pcp_instance_210.smt2):
Loading ./pcp_instance_210.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11117ms

real	0m11.229s
user	0m17.588s
sys	0m0.382s
unsat
Test (./pcp_instance_211.smt2):
Loading ./pcp_instance_211.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11102ms

real	0m11.212s
user	0m18.114s
sys	0m0.390s
unsat
Test (./pcp_instance_212.smt2):
Loading ./pcp_instance_212.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (38ms)
Prover 1: stopped
Prover 0: stopped


11096ms

real	0m11.205s
user	0m17.606s
sys	0m0.379s
unsat
Test (./pcp_instance_213.smt2):
Loading ./pcp_instance_213.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (381ms)


390ms

real	0m0.497s
user	0m0.955s
sys	0m0.048s
sat
Test (./pcp_instance_214.smt2):
Loading ./pcp_instance_214.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (54ms)
Prover 1: stopped
Prover 0: stopped


11168ms

real	0m11.280s
user	0m18.641s
sys	0m0.414s
unsat
Test (./pcp_instance_215.smt2):
Loading ./pcp_instance_215.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (50ms)
Prover 1: stopped
Prover 0: stopped


11131ms

real	0m11.245s
user	0m18.862s
sys	0m0.424s
unsat
Test (./pcp_instance_216.smt2):
Loading ./pcp_instance_216.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (424ms)


432ms

real	0m0.539s
user	0m1.327s
sys	0m0.058s
sat
Test (./pcp_instance_217.smt2):
Loading ./pcp_instance_217.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (452ms)


461ms

real	0m0.568s
user	0m1.457s
sys	0m0.076s
sat
Test (./pcp_instance_218.smt2):
Loading ./pcp_instance_218.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (60ms)
Prover 1: stopped
Prover 0: stopped


11137ms

real	0m11.247s
user	0m18.897s
sys	0m0.420s
unsat
Test (./pcp_instance_219.smt2):
Loading ./pcp_instance_219.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (366ms)


374ms

real	0m0.479s
user	0m1.063s
sys	0m0.067s
sat
Test (./pcp_instance_22.smt2):
Loading ./pcp_instance_22.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (52ms)
Prover 1: stopped
Prover 0: stopped


11137ms

real	0m11.248s
user	0m19.167s
sys	0m0.424s
unsat
Test (./pcp_instance_220.smt2):
Loading ./pcp_instance_220.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (70ms)
Prover 1: stopped
Prover 0: stopped


11149ms

real	0m11.263s
user	0m18.907s
sys	0m0.481s
unsat
Test (./pcp_instance_221.smt2):
Loading ./pcp_instance_221.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (362ms)


371ms

real	0m0.476s
user	0m1.048s
sys	0m0.065s
sat
Test (./pcp_instance_222.smt2):
Loading ./pcp_instance_222.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11095ms

real	0m11.207s
user	0m18.439s
sys	0m0.452s
unsat
Test (./pcp_instance_223.smt2):
Loading ./pcp_instance_223.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (441ms)


450ms

real	0m0.563s
user	0m1.237s
sys	0m0.063s
sat
Test (./pcp_instance_224.smt2):
Loading ./pcp_instance_224.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (423ms)


431ms

real	0m0.540s
user	0m1.309s
sys	0m0.065s
sat
Test (./pcp_instance_225.smt2):
Loading ./pcp_instance_225.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (505ms)


515ms

real	0m0.627s
user	0m1.582s
sys	0m0.099s
sat
Test (./pcp_instance_226.smt2):
Loading ./pcp_instance_226.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (370ms)


379ms

real	0m0.498s
user	0m1.082s
sys	0m0.069s
sat
Test (./pcp_instance_227.smt2):
Loading ./pcp_instance_227.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11108ms

real	0m11.222s
user	0m18.203s
sys	0m0.401s
unsat
Test (./pcp_instance_228.smt2):
Loading ./pcp_instance_228.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (355ms)


362ms

real	0m0.471s
user	0m0.943s
sys	0m0.054s
sat
Test (./pcp_instance_229.smt2):
Loading ./pcp_instance_229.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11083ms

real	0m11.195s
user	0m17.880s
sys	0m0.406s
unsat
Test (./pcp_instance_23.smt2):
Loading ./pcp_instance_23.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (489ms)


497ms

real	0m0.604s
user	0m1.128s
sys	0m0.049s
sat
Test (./pcp_instance_230.smt2):
Loading ./pcp_instance_230.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11146ms

real	0m11.256s
user	0m18.493s
sys	0m0.403s
unsat
Test (./pcp_instance_231.smt2):
Loading ./pcp_instance_231.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11103ms

real	0m11.215s
user	0m17.248s
sys	0m0.403s
unsat
Test (./pcp_instance_232.smt2):
Loading ./pcp_instance_232.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (53ms)
Prover 1: stopped
Prover 0: stopped


11117ms

real	0m11.237s
user	0m17.337s
sys	0m0.401s
unsat
Test (./pcp_instance_233.smt2):
Loading ./pcp_instance_233.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11110ms

real	0m11.223s
user	0m18.148s
sys	0m0.409s
unsat
Test (./pcp_instance_234.smt2):
Loading ./pcp_instance_234.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11089ms

real	0m11.201s
user	0m18.041s
sys	0m0.392s
unsat
Test (./pcp_instance_235.smt2):
Loading ./pcp_instance_235.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (466ms)


474ms

real	0m0.568s
user	0m1.055s
sys	0m0.046s
sat
Test (./pcp_instance_236.smt2):
Loading ./pcp_instance_236.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11102ms

real	0m11.220s
user	0m17.869s
sys	0m0.386s
unsat
Test (./pcp_instance_237.smt2):
Loading ./pcp_instance_237.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (364ms)


373ms

real	0m0.487s
user	0m1.005s
sys	0m0.050s
sat
Test (./pcp_instance_238.smt2):
Loading ./pcp_instance_238.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (475ms)


483ms

real	0m0.590s
user	0m1.453s
sys	0m0.093s
sat
Test (./pcp_instance_239.smt2):
Loading ./pcp_instance_239.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11122ms

real	0m11.241s
user	0m17.991s
sys	0m0.422s
unsat
Test (./pcp_instance_24.smt2):
Loading ./pcp_instance_24.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11095ms

real	0m11.208s
user	0m18.431s
sys	0m0.407s
unsat
Test (./pcp_instance_240.smt2):
Loading ./pcp_instance_240.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (348ms)


356ms

real	0m0.464s
user	0m0.930s
sys	0m0.050s
sat
Test (./pcp_instance_241.smt2):
Loading ./pcp_instance_241.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11093ms

real	0m11.206s
user	0m18.054s
sys	0m0.393s
unsat
Test (./pcp_instance_242.smt2):
Loading ./pcp_instance_242.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11116ms

real	0m11.227s
user	0m17.871s
sys	0m0.386s
unsat
Test (./pcp_instance_243.smt2):
Loading ./pcp_instance_243.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (49ms)
Prover 1: stopped
Prover 0: stopped


11113ms

real	0m11.224s
user	0m17.797s
sys	0m0.389s
unsat
Test (./pcp_instance_244.smt2):
Loading ./pcp_instance_244.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11131ms

real	0m11.246s
user	0m17.856s
sys	0m0.458s
unsat
Test (./pcp_instance_245.smt2):
Loading ./pcp_instance_245.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (426ms)


434ms

real	0m0.540s
user	0m1.321s
sys	0m0.074s
sat
Test (./pcp_instance_246.smt2):
Loading ./pcp_instance_246.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11094ms

real	0m11.207s
user	0m18.036s
sys	0m0.419s
unsat
Test (./pcp_instance_247.smt2):
Loading ./pcp_instance_247.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11093ms

real	0m11.206s
user	0m17.252s
sys	0m0.388s
unsat
Test (./pcp_instance_248.smt2):
Loading ./pcp_instance_248.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11115ms

real	0m11.227s
user	0m17.433s
sys	0m0.375s
unsat
Test (./pcp_instance_249.smt2):
Loading ./pcp_instance_249.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (462ms)


471ms

real	0m0.583s
user	0m1.281s
sys	0m0.054s
sat
Test (./pcp_instance_25.smt2):
Loading ./pcp_instance_25.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (359ms)


367ms

real	0m0.473s
user	0m1.044s
sys	0m0.053s
sat
Test (./pcp_instance_250.smt2):
Loading ./pcp_instance_250.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (424ms)


431ms

real	0m0.539s
user	0m1.321s
sys	0m0.072s
sat
Test (./pcp_instance_251.smt2):
Loading ./pcp_instance_251.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (53ms)
Prover 1: stopped
Prover 0: stopped


11130ms

real	0m11.242s
user	0m18.933s
sys	0m0.417s
unsat
Test (./pcp_instance_252.smt2):
Loading ./pcp_instance_252.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (56ms)
Prover 1: stopped
Prover 0: stopped


11139ms

real	0m11.251s
user	0m19.014s
sys	0m0.425s
unsat
Test (./pcp_instance_253.smt2):
Loading ./pcp_instance_253.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11157ms

real	0m11.268s
user	0m18.856s
sys	0m0.394s
unsat
Test (./pcp_instance_254.smt2):
Loading ./pcp_instance_254.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (51ms)
Prover 1: stopped
Prover 0: stopped


11136ms

real	0m11.249s
user	0m18.124s
sys	0m0.369s
unsat
Test (./pcp_instance_255.smt2):
Loading ./pcp_instance_255.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (354ms)


362ms

real	0m0.469s
user	0m0.963s
sys	0m0.044s
sat
Test (./pcp_instance_256.smt2):
Loading ./pcp_instance_256.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (436ms)


445ms

real	0m0.549s
user	0m1.371s
sys	0m0.060s
sat
Test (./pcp_instance_257.smt2):
Loading ./pcp_instance_257.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (461ms)


469ms

real	0m0.562s
user	0m1.456s
sys	0m0.073s
sat
Test (./pcp_instance_258.smt2):
Loading ./pcp_instance_258.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (367ms)


376ms

real	0m0.482s
user	0m1.069s
sys	0m0.062s
sat
Test (./pcp_instance_259.smt2):
Loading ./pcp_instance_259.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (53ms)
Prover 1: stopped
Prover 0: stopped


11179ms

real	0m11.308s
user	0m19.085s
sys	0m0.415s
unsat
Test (./pcp_instance_26.smt2):
Loading ./pcp_instance_26.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (444ms)


452ms

real	0m0.559s
user	0m1.408s
sys	0m0.072s
sat
Test (./pcp_instance_260.smt2):
Loading ./pcp_instance_260.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (57ms)
Prover 1: stopped
Prover 0: stopped


11128ms

real	0m11.239s
user	0m18.930s
sys	0m0.403s
unsat
Test (./pcp_instance_261.smt2):
Loading ./pcp_instance_261.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (460ms)


468ms

real	0m0.576s
user	0m1.463s
sys	0m0.073s
sat
Test (./pcp_instance_262.smt2):
Loading ./pcp_instance_262.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (58ms)
Prover 1: stopped
Prover 0: stopped


11171ms

real	0m11.282s
user	0m19.345s
sys	0m0.371s
unsat
Test (./pcp_instance_263.smt2):
Loading ./pcp_instance_263.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (584ms)


592ms

real	0m0.699s
user	0m1.797s
sys	0m0.101s
sat
Test (./pcp_instance_264.smt2):
Loading ./pcp_instance_264.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11129ms

real	0m11.239s
user	0m18.705s
sys	0m0.444s
unsat
Test (./pcp_instance_265.smt2):
Loading ./pcp_instance_265.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (55ms)
Prover 1: stopped
Prover 0: stopped


11178ms

real	0m11.292s
user	0m19.045s
sys	0m0.455s
unsat
Test (./pcp_instance_266.smt2):
Loading ./pcp_instance_266.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11169ms

real	0m11.281s
user	0m18.632s
sys	0m0.474s
unsat
Test (./pcp_instance_267.smt2):
Loading ./pcp_instance_267.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (54ms)
Prover 1: stopped
Prover 0: stopped


11133ms

real	0m11.245s
user	0m19.057s
sys	0m0.504s
unsat
Test (./pcp_instance_268.smt2):
Loading ./pcp_instance_268.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (490ms)


499ms

real	0m0.594s
user	0m1.610s
sys	0m0.078s
sat
Test (./pcp_instance_269.smt2):
Loading ./pcp_instance_269.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11156ms

real	0m11.275s
user	0m19.119s
sys	0m0.415s
unsat
Test (./pcp_instance_27.smt2):
Loading ./pcp_instance_27.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (365ms)


373ms

real	0m0.481s
user	0m1.060s
sys	0m0.065s
sat
Test (./pcp_instance_270.smt2):
Loading ./pcp_instance_270.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (363ms)


372ms

real	0m0.479s
user	0m1.056s
sys	0m0.062s
sat
Test (./pcp_instance_271.smt2):
Loading ./pcp_instance_271.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (364ms)


372ms

real	0m0.480s
user	0m1.075s
sys	0m0.065s
sat
Test (./pcp_instance_272.smt2):
Loading ./pcp_instance_272.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11114ms

real	0m11.223s
user	0m18.438s
sys	0m0.403s
unsat
Test (./pcp_instance_273.smt2):
Loading ./pcp_instance_273.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11124ms

real	0m11.237s
user	0m18.952s
sys	0m0.436s
unsat
Test (./pcp_instance_274.smt2):
Loading ./pcp_instance_274.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (430ms)


438ms

real	0m0.546s
user	0m1.333s
sys	0m0.072s
sat
Test (./pcp_instance_275.smt2):
Loading ./pcp_instance_275.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (362ms)


371ms

real	0m0.479s
user	0m1.061s
sys	0m0.062s
sat
Test (./pcp_instance_276.smt2):
Loading ./pcp_instance_276.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (61ms)
Prover 1: stopped
Prover 0: stopped


11154ms

real	0m11.266s
user	0m18.275s
sys	0m0.419s
unsat
Test (./pcp_instance_277.smt2):
Loading ./pcp_instance_277.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11146ms

real	0m11.259s
user	0m19.330s
sys	0m0.446s
unsat
Test (./pcp_instance_278.smt2):
Loading ./pcp_instance_278.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (371ms)


380ms

real	0m0.488s
user	0m1.085s
sys	0m0.066s
sat
Test (./pcp_instance_279.smt2):
Loading ./pcp_instance_279.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11146ms

real	0m11.259s
user	0m18.684s
sys	0m0.453s
unsat
Test (./pcp_instance_28.smt2):
Loading ./pcp_instance_28.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (431ms)


440ms

real	0m0.548s
user	0m1.344s
sys	0m0.060s
sat
Test (./pcp_instance_280.smt2):
Loading ./pcp_instance_280.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (60ms)
Prover 1: stopped
Prover 0: stopped


11148ms

real	0m11.262s
user	0m19.228s
sys	0m0.474s
unsat
Test (./pcp_instance_281.smt2):
Loading ./pcp_instance_281.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (39ms)
Prover 1: stopped
Prover 0: stopped


11135ms

real	0m11.250s
user	0m19.372s
sys	0m0.459s
unsat
Test (./pcp_instance_282.smt2):
Loading ./pcp_instance_282.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (51ms)
Prover 1: stopped
Prover 0: stopped


11173ms

real	0m11.287s
user	0m18.961s
sys	0m0.452s
unsat
Test (./pcp_instance_283.smt2):
Loading ./pcp_instance_283.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11098ms

real	0m11.202s
user	0m18.833s
sys	0m0.457s
unsat
Test (./pcp_instance_284.smt2):
Loading ./pcp_instance_284.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11140ms

real	0m11.254s
user	0m19.115s
sys	0m0.425s
unsat
Test (./pcp_instance_285.smt2):
Loading ./pcp_instance_285.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11097ms

real	0m11.212s
user	0m18.669s
sys	0m0.453s
unsat
Test (./pcp_instance_286.smt2):
Loading ./pcp_instance_286.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (63ms)
Prover 1: stopped
Prover 0: stopped


11156ms

real	0m11.276s
user	0m18.954s
sys	0m0.431s
unsat
Test (./pcp_instance_287.smt2):
Loading ./pcp_instance_287.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (495ms)


504ms

real	0m0.612s
user	0m1.627s
sys	0m0.078s
sat
Test (./pcp_instance_288.smt2):
Loading ./pcp_instance_288.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (63ms)
Prover 1: stopped
Prover 0: stopped


11166ms

real	0m11.280s
user	0m18.955s
sys	0m0.467s
unsat
Test (./pcp_instance_289.smt2):
Loading ./pcp_instance_289.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (57ms)
Prover 1: stopped
Prover 0: stopped


11169ms

real	0m11.281s
user	0m18.720s
sys	0m0.418s
unsat
Test (./pcp_instance_29.smt2):
Loading ./pcp_instance_29.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (429ms)


437ms

real	0m0.543s
user	0m1.344s
sys	0m0.072s
sat
Test (./pcp_instance_290.smt2):
Loading ./pcp_instance_290.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (63ms)
Prover 1: stopped
Prover 0: stopped


11142ms

real	0m11.254s
user	0m18.515s
sys	0m0.417s
unsat
Test (./pcp_instance_291.smt2):
Loading ./pcp_instance_291.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (436ms)


445ms

real	0m0.552s
user	0m1.367s
sys	0m0.073s
sat
Test (./pcp_instance_292.smt2):
Loading ./pcp_instance_292.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (366ms)


375ms

real	0m0.480s
user	0m1.072s
sys	0m0.064s
sat
Test (./pcp_instance_293.smt2):
Loading ./pcp_instance_293.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (367ms)


375ms

real	0m0.483s
user	0m1.072s
sys	0m0.065s
sat
Test (./pcp_instance_294.smt2):
Loading ./pcp_instance_294.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (361ms)


370ms

real	0m0.476s
user	0m1.063s
sys	0m0.064s
sat
Test (./pcp_instance_295.smt2):
Loading ./pcp_instance_295.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (52ms)
Prover 1: stopped
Prover 0: stopped


11122ms

real	0m11.233s
user	0m18.328s
sys	0m0.417s
unsat
Test (./pcp_instance_296.smt2):
Loading ./pcp_instance_296.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (428ms)


437ms

real	0m0.544s
user	0m1.323s
sys	0m0.071s
sat
Test (./pcp_instance_297.smt2):
Loading ./pcp_instance_297.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (57ms)
Prover 1: stopped
Prover 0: stopped


11131ms

real	0m11.246s
user	0m18.050s
sys	0m0.441s
unsat
Test (./pcp_instance_298.smt2):
Loading ./pcp_instance_298.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11247ms

real	0m11.368s
user	0m18.496s
sys	0m0.537s
unsat
Test (./pcp_instance_299.smt2):
Loading ./pcp_instance_299.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (619ms)


630ms

real	0m0.756s
user	0m1.616s
sys	0m0.110s
sat
Test (./pcp_instance_3.smt2):
Loading ./pcp_instance_3.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (618ms)


632ms

real	0m0.826s
user	0m1.715s
sys	0m0.144s
sat
Test (./pcp_instance_30.smt2):
Loading ./pcp_instance_30.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (667ms)


681ms

real	0m0.842s
user	0m1.511s
sys	0m0.125s
sat
Test (./pcp_instance_300.smt2):
Loading ./pcp_instance_300.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11139ms

real	0m11.290s
user	0m16.947s
sys	0m0.426s
unsat
Test (./pcp_instance_301.smt2):
Loading ./pcp_instance_301.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (568ms)


576ms

real	0m0.699s
user	0m1.272s
sys	0m0.048s
sat
Test (./pcp_instance_302.smt2):
Loading ./pcp_instance_302.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11131ms

real	0m11.249s
user	0m17.721s
sys	0m0.383s
unsat
Test (./pcp_instance_303.smt2):
Loading ./pcp_instance_303.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11131ms

real	0m11.253s
user	0m18.111s
sys	0m0.359s
unsat
Test (./pcp_instance_304.smt2):
Loading ./pcp_instance_304.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (366ms)


374ms

real	0m0.483s
user	0m1.089s
sys	0m0.064s
sat
Test (./pcp_instance_305.smt2):
Loading ./pcp_instance_305.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (374ms)


383ms

real	0m0.488s
user	0m1.098s
sys	0m0.065s
sat
Test (./pcp_instance_306.smt2):
Loading ./pcp_instance_306.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (433ms)


441ms

real	0m0.550s
user	0m1.347s
sys	0m0.059s
sat
Test (./pcp_instance_307.smt2):
Loading ./pcp_instance_307.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (437ms)


444ms

real	0m0.550s
user	0m1.368s
sys	0m0.075s
sat
Test (./pcp_instance_308.smt2):
Loading ./pcp_instance_308.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110101110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11096ms

real	0m11.207s
user	0m18.896s
sys	0m0.388s
unsat
Test (./pcp_instance_309.smt2):
Loading ./pcp_instance_309.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (39ms)
Prover 1: stopped
Prover 0: stopped


11112ms

real	0m11.225s
user	0m18.145s
sys	0m0.419s
unsat
Test (./pcp_instance_31.smt2):
Loading ./pcp_instance_31.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11106ms

real	0m11.225s
user	0m18.315s
sys	0m0.419s
unsat
Test (./pcp_instance_310.smt2):
Loading ./pcp_instance_310.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11233ms

real	0m11.335s
user	0m19.104s
sys	0m0.467s
unsat
Test (./pcp_instance_311.smt2):
Loading ./pcp_instance_311.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (420ms)


429ms

real	0m0.540s
user	0m1.169s
sys	0m0.058s
sat
Test (./pcp_instance_312.smt2):
Loading ./pcp_instance_312.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (49ms)
Prover 1: stopped
Prover 0: stopped


11169ms

real	0m11.283s
user	0m18.245s
sys	0m0.455s
unsat
Test (./pcp_instance_313.smt2):
Loading ./pcp_instance_313.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (388ms)


397ms

real	0m0.513s
user	0m1.124s
sys	0m0.064s
sat
Test (./pcp_instance_314.smt2):
Loading ./pcp_instance_314.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11103ms

real	0m11.229s
user	0m19.066s
sys	0m0.503s
unsat
Test (./pcp_instance_315.smt2):
Loading ./pcp_instance_315.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (112ms)
Prover 1: stopped
Prover 0: stopped


11688ms

real	0m11.812s
user	0m19.263s
sys	0m0.600s
unsat
Test (./pcp_instance_316.smt2):
Loading ./pcp_instance_316.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (56ms)
Prover 1: stopped
Prover 0: stopped


11256ms

real	0m11.460s
user	0m20.587s
sys	0m0.568s
unsat
Test (./pcp_instance_317.smt2):
Loading ./pcp_instance_317.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (601ms)


611ms

real	0m0.725s
user	0m1.929s
sys	0m0.092s
sat
Test (./pcp_instance_318.smt2):
Loading ./pcp_instance_318.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (79ms)
Prover 1: stopped
Prover 0: stopped


11254ms

real	0m11.372s
user	0m20.097s
sys	0m0.501s
unsat
Test (./pcp_instance_319.smt2):
Loading ./pcp_instance_319.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (95ms)
Prover 1: stopped
Prover 0: stopped


11267ms

real	0m11.376s
user	0m20.867s
sys	0m0.499s
unsat
Test (./pcp_instance_32.smt2):
Loading ./pcp_instance_32.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (491ms)


500ms

real	0m0.613s
user	0m1.560s
sys	0m0.097s
sat
Test (./pcp_instance_320.smt2):
Loading ./pcp_instance_320.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111010111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (51ms)
Prover 1: stopped
Prover 0: stopped


11148ms

real	0m11.264s
user	0m19.805s
sys	0m0.455s
unsat
Test (./pcp_instance_321.smt2):
Loading ./pcp_instance_321.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (453ms)


461ms

real	0m0.568s
user	0m1.468s
sys	0m0.072s
sat
Test (./pcp_instance_322.smt2):
Loading ./pcp_instance_322.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (378ms)


387ms

real	0m0.482s
user	0m1.077s
sys	0m0.057s
sat
Test (./pcp_instance_323.smt2):
Loading ./pcp_instance_323.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (372ms)


380ms

real	0m0.490s
user	0m1.091s
sys	0m0.068s
sat
Test (./pcp_instance_324.smt2):
Loading ./pcp_instance_324.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (440ms)


449ms

real	0m0.568s
user	0m1.395s
sys	0m0.077s
sat
Test (./pcp_instance_325.smt2):
Loading ./pcp_instance_325.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (427ms)


435ms

real	0m0.543s
user	0m1.182s
sys	0m0.078s
sat
Test (./pcp_instance_326.smt2):
Loading ./pcp_instance_326.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (56ms)
Prover 1: stopped
Prover 0: stopped


11151ms

real	0m11.265s
user	0m18.147s
sys	0m0.457s
unsat
Test (./pcp_instance_327.smt2):
Loading ./pcp_instance_327.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (51ms)
Prover 1: stopped
Prover 0: stopped


11120ms

real	0m11.243s
user	0m17.873s
sys	0m0.521s
unsat
Test (./pcp_instance_328.smt2):
Loading ./pcp_instance_328.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11133ms

real	0m11.258s
user	0m18.737s
sys	0m0.475s
unsat
Test (./pcp_instance_329.smt2):
Loading ./pcp_instance_329.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110110110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110110110110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11178ms

real	0m11.292s
user	0m18.233s
sys	0m0.434s
unsat
Test (./pcp_instance_33.smt2):
Loading ./pcp_instance_33.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (439ms)


448ms

real	0m0.564s
user	0m1.356s
sys	0m0.078s
sat
Test (./pcp_instance_330.smt2):
Loading ./pcp_instance_330.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (57ms)
Prover 1: stopped
Prover 0: stopped


11142ms

real	0m11.255s
user	0m18.809s
sys	0m0.433s
unsat
Test (./pcp_instance_331.smt2):
Loading ./pcp_instance_331.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11157ms

real	0m11.269s
user	0m18.544s
sys	0m0.421s
unsat
Test (./pcp_instance_332.smt2):
Loading ./pcp_instance_332.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000011000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (54ms)
Prover 1: stopped
Prover 0: stopped


11143ms

real	0m11.258s
user	0m19.512s
sys	0m0.457s
unsat
Test (./pcp_instance_333.smt2):
Loading ./pcp_instance_333.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (56ms)
Prover 1: stopped
Prover 0: stopped


11148ms

real	0m11.262s
user	0m18.985s
sys	0m0.400s
unsat
Test (./pcp_instance_334.smt2):
Loading ./pcp_instance_334.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11101ms

real	0m11.214s
user	0m18.937s
sys	0m0.411s
unsat
Test (./pcp_instance_335.smt2):
Loading ./pcp_instance_335.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (54ms)
Prover 1: stopped
Prover 0: stopped


11138ms

real	0m11.251s
user	0m18.930s
sys	0m0.382s
unsat
Test (./pcp_instance_336.smt2):
Loading ./pcp_instance_336.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (367ms)


375ms

real	0m0.483s
user	0m1.081s
sys	0m0.065s
sat
Test (./pcp_instance_337.smt2):
Loading ./pcp_instance_337.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (394ms)


402ms

real	0m0.507s
user	0m1.131s
sys	0m0.057s
sat
Test (./pcp_instance_338.smt2):
Loading ./pcp_instance_338.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (507ms)


516ms

real	0m0.625s
user	0m1.682s
sys	0m0.083s
sat
Test (./pcp_instance_339.smt2):
Loading ./pcp_instance_339.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (365ms)


374ms

real	0m0.469s
user	0m1.040s
sys	0m0.053s
sat
Test (./pcp_instance_34.smt2):
Loading ./pcp_instance_34.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (56ms)
Prover 1: stopped
Prover 0: stopped


11185ms

real	0m11.300s
user	0m18.621s
sys	0m0.405s
unsat
Test (./pcp_instance_340.smt2):
Loading ./pcp_instance_340.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11152ms

real	0m11.268s
user	0m18.279s
sys	0m0.429s
unsat
Test (./pcp_instance_341.smt2):
Loading ./pcp_instance_341.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11098ms

real	0m11.222s
user	0m18.353s
sys	0m0.464s
unsat
Test (./pcp_instance_342.smt2):
Loading ./pcp_instance_342.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (471ms)


480ms

real	0m0.587s
user	0m1.070s
sys	0m0.048s
sat
Test (./pcp_instance_343.smt2):
Loading ./pcp_instance_343.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11110ms

real	0m11.222s
user	0m18.199s
sys	0m0.421s
unsat
Test (./pcp_instance_344.smt2):
Loading ./pcp_instance_344.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (476ms)


484ms

real	0m0.592s
user	0m1.383s
sys	0m0.060s
sat
Test (./pcp_instance_345.smt2):
Loading ./pcp_instance_345.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (362ms)


370ms

real	0m0.464s
user	0m1.039s
sys	0m0.053s
sat
Test (./pcp_instance_346.smt2):
Loading ./pcp_instance_346.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (423ms)


432ms

real	0m0.541s
user	0m1.325s
sys	0m0.074s
sat
Test (./pcp_instance_347.smt2):
Loading ./pcp_instance_347.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11140ms

real	0m11.252s
user	0m18.675s
sys	0m0.428s
unsat
Test (./pcp_instance_348.smt2):
Loading ./pcp_instance_348.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (444ms)


452ms

real	0m0.559s
user	0m1.401s
sys	0m0.064s
sat
Test (./pcp_instance_349.smt2):
Loading ./pcp_instance_349.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (51ms)
Prover 1: stopped
Prover 0: stopped


11151ms

real	0m11.263s
user	0m18.569s
sys	0m0.429s
unsat
Test (./pcp_instance_35.smt2):
Loading ./pcp_instance_35.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (508ms)


518ms

real	0m0.626s
user	0m1.630s
sys	0m0.090s
sat
Test (./pcp_instance_350.smt2):
Loading ./pcp_instance_350.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (491ms)


501ms

real	0m0.611s
user	0m1.621s
sys	0m0.082s
sat
Test (./pcp_instance_351.smt2):
Loading ./pcp_instance_351.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (52ms)
Prover 1: stopped
Prover 0: stopped


11145ms

real	0m11.259s
user	0m18.641s
sys	0m0.431s
unsat
Test (./pcp_instance_352.smt2):
Loading ./pcp_instance_352.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (434ms)


444ms

real	0m0.551s
user	0m1.362s
sys	0m0.062s
sat
Test (./pcp_instance_353.smt2):
Loading ./pcp_instance_353.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (367ms)


375ms

real	0m0.483s
user	0m1.070s
sys	0m0.067s
sat
Test (./pcp_instance_354.smt2):
Loading ./pcp_instance_354.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (52ms)
Prover 1: stopped
Prover 0: stopped


11147ms

real	0m11.259s
user	0m18.812s
sys	0m0.438s
unsat
Test (./pcp_instance_355.smt2):
Loading ./pcp_instance_355.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11142ms

real	0m11.254s
user	0m18.670s
sys	0m0.421s
unsat
Test (./pcp_instance_356.smt2):
Loading ./pcp_instance_356.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (501ms)


510ms

real	0m0.629s
user	0m1.689s
sys	0m0.080s
sat
Test (./pcp_instance_357.smt2):
Loading ./pcp_instance_357.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11105ms

real	0m11.218s
user	0m17.946s
sys	0m0.419s
unsat
Test (./pcp_instance_358.smt2):
Loading ./pcp_instance_358.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (418ms)


426ms

real	0m0.534s
user	0m1.169s
sys	0m0.057s
sat
Test (./pcp_instance_359.smt2):
Loading ./pcp_instance_359.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11151ms

real	0m11.266s
user	0m18.153s
sys	0m0.460s
unsat
Test (./pcp_instance_36.smt2):
Loading ./pcp_instance_36.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (508ms)


518ms

real	0m0.635s
user	0m1.164s
sys	0m0.053s
sat
Test (./pcp_instance_360.smt2):
Loading ./pcp_instance_360.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11092ms

real	0m11.206s
user	0m18.040s
sys	0m0.446s
unsat
Test (./pcp_instance_361.smt2):
Loading ./pcp_instance_361.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11107ms

real	0m11.213s
user	0m17.611s
sys	0m0.408s
unsat
Test (./pcp_instance_362.smt2):
Loading ./pcp_instance_362.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11131ms

real	0m11.234s
user	0m17.562s
sys	0m0.468s
unsat
Test (./pcp_instance_363.smt2):
Loading ./pcp_instance_363.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (57ms)
Prover 1: stopped
Prover 0: stopped


11134ms

real	0m11.243s
user	0m18.404s
sys	0m0.431s
unsat
Test (./pcp_instance_364.smt2):
Loading ./pcp_instance_364.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (474ms)


483ms

real	0m0.579s
user	0m1.078s
sys	0m0.048s
sat
Test (./pcp_instance_365.smt2):
Loading ./pcp_instance_365.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (436ms)


444ms

real	0m0.539s
user	0m1.356s
sys	0m0.061s
sat
Test (./pcp_instance_366.smt2):
Loading ./pcp_instance_366.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11097ms

real	0m11.211s
user	0m18.431s
sys	0m0.434s
unsat
Test (./pcp_instance_367.smt2):
Loading ./pcp_instance_367.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (356ms)


364ms

real	0m0.472s
user	0m0.950s
sys	0m0.050s
sat
Test (./pcp_instance_368.smt2):
Loading ./pcp_instance_368.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (54ms)
Prover 1: stopped
Prover 0: stopped


11192ms

real	0m11.309s
user	0m18.347s
sys	0m0.473s
unsat
Test (./pcp_instance_369.smt2):
Loading ./pcp_instance_369.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (572ms)


581ms

real	0m0.695s
user	0m1.475s
sys	0m0.075s
sat
Test (./pcp_instance_37.smt2):
Loading ./pcp_instance_37.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11103ms

real	0m11.225s
user	0m17.481s
sys	0m0.433s
unsat
Test (./pcp_instance_370.smt2):
Loading ./pcp_instance_370.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (419ms)


428ms

real	0m0.529s
user	0m0.909s
sys	0m0.046s
sat
Test (./pcp_instance_371.smt2):
Loading ./pcp_instance_371.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11092ms

real	0m11.204s
user	0m18.290s
sys	0m0.412s
unsat
Test (./pcp_instance_372.smt2):
Loading ./pcp_instance_372.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (417ms)


425ms

real	0m0.519s
user	0m1.171s
sys	0m0.058s
sat
Test (./pcp_instance_373.smt2):
Loading ./pcp_instance_373.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (53ms)
Prover 1: stopped
Prover 0: stopped


11181ms

real	0m11.294s
user	0m18.770s
sys	0m0.429s
unsat
Test (./pcp_instance_374.smt2):
Loading ./pcp_instance_374.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (434ms)


443ms

real	0m0.550s
user	0m1.359s
sys	0m0.077s
sat
Test (./pcp_instance_375.smt2):
Loading ./pcp_instance_375.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (359ms)


367ms

real	0m0.462s
user	0m1.013s
sys	0m0.052s
sat
Test (./pcp_instance_376.smt2):
Loading ./pcp_instance_376.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (368ms)


376ms

real	0m0.484s
user	0m1.077s
sys	0m0.068s
sat
Test (./pcp_instance_377.smt2):
Loading ./pcp_instance_377.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (368ms)


377ms

real	0m0.484s
user	0m1.079s
sys	0m0.067s
sat
Test (./pcp_instance_378.smt2):
Loading ./pcp_instance_378.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (60ms)
Prover 1: stopped
Prover 0: stopped


11161ms

real	0m11.274s
user	0m18.574s
sys	0m0.452s
unsat
Test (./pcp_instance_379.smt2):
Loading ./pcp_instance_379.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (58ms)
Prover 1: stopped
Prover 0: stopped


11127ms

real	0m11.241s
user	0m18.746s
sys	0m0.449s
unsat
Test (./pcp_instance_38.smt2):
Loading ./pcp_instance_38.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (455ms)


465ms

real	0m0.578s
user	0m1.475s
sys	0m0.077s
sat
Test (./pcp_instance_380.smt2):
Loading ./pcp_instance_380.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11098ms

real	0m11.211s
user	0m18.142s
sys	0m0.410s
unsat
Test (./pcp_instance_381.smt2):
Loading ./pcp_instance_381.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (60ms)
Prover 1: stopped
Prover 0: stopped


11143ms

real	0m11.254s
user	0m18.892s
sys	0m0.412s
unsat
Test (./pcp_instance_382.smt2):
Loading ./pcp_instance_382.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11117ms

real	0m11.230s
user	0m18.225s
sys	0m0.398s
unsat
Test (./pcp_instance_383.smt2):
Loading ./pcp_instance_383.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11121ms

real	0m11.234s
user	0m18.071s
sys	0m0.391s
unsat
Test (./pcp_instance_384.smt2):
Loading ./pcp_instance_384.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (423ms)


431ms

real	0m0.537s
user	0m1.191s
sys	0m0.056s
sat
Test (./pcp_instance_385.smt2):
Loading ./pcp_instance_385.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (486ms)


495ms

real	0m0.603s
user	0m1.605s
sys	0m0.067s
sat
Test (./pcp_instance_386.smt2):
Loading ./pcp_instance_386.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (364ms)


372ms

real	0m0.477s
user	0m1.056s
sys	0m0.065s
sat
Test (./pcp_instance_387.smt2):
Loading ./pcp_instance_387.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11120ms

real	0m11.233s
user	0m18.239s
sys	0m0.439s
unsat
Test (./pcp_instance_388.smt2):
Loading ./pcp_instance_388.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (368ms)


376ms

real	0m0.483s
user	0m1.067s
sys	0m0.051s
sat
Test (./pcp_instance_389.smt2):
Loading ./pcp_instance_389.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (552ms)


560ms

real	0m0.667s
user	0m1.517s
sys	0m0.091s
sat
Test (./pcp_instance_39.smt2):
Loading ./pcp_instance_39.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (54ms)
Prover 1: stopped
Prover 0: stopped


11088ms

real	0m11.222s
user	0m17.455s
sys	0m0.426s
unsat
Test (./pcp_instance_390.smt2):
Loading ./pcp_instance_390.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (506ms)


515ms

real	0m0.630s
user	0m1.135s
sys	0m0.052s
sat
Test (./pcp_instance_391.smt2):
Loading ./pcp_instance_391.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11123ms

real	0m11.222s
user	0m17.816s
sys	0m0.400s
unsat
Test (./pcp_instance_392.smt2):
Loading ./pcp_instance_392.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (402ms)


410ms

real	0m0.505s
user	0m0.885s
sys	0m0.048s
sat
Test (./pcp_instance_393.smt2):
Loading ./pcp_instance_393.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (441ms)


450ms

real	0m0.560s
user	0m1.389s
sys	0m0.075s
sat
Test (./pcp_instance_394.smt2):
Loading ./pcp_instance_394.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (498ms)


507ms

real	0m0.621s
user	0m1.621s
sys	0m0.083s
sat
Test (./pcp_instance_395.smt2):
Loading ./pcp_instance_395.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (368ms)


381ms

real	0m0.485s
user	0m1.074s
sys	0m0.070s
sat
Test (./pcp_instance_396.smt2):
Loading ./pcp_instance_396.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (49ms)
Prover 1: stopped
Prover 0: stopped


11108ms

real	0m11.219s
user	0m17.913s
sys	0m0.416s
unsat
Test (./pcp_instance_397.smt2):
Loading ./pcp_instance_397.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11104ms

real	0m11.214s
user	0m17.064s
sys	0m0.365s
unsat
Test (./pcp_instance_398.smt2):
Loading ./pcp_instance_398.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (528ms)


537ms

real	0m0.631s
user	0m1.227s
sys	0m0.052s
sat
Test (./pcp_instance_399.smt2):
Loading ./pcp_instance_399.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11122ms

real	0m11.234s
user	0m17.647s
sys	0m0.388s
unsat
Test (./pcp_instance_4.smt2):
Loading ./pcp_instance_4.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (554ms)


563ms

real	0m0.677s
user	0m1.396s
sys	0m0.058s
sat
Test (./pcp_instance_40.smt2):
Loading ./pcp_instance_40.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11138ms

real	0m11.258s
user	0m17.588s
sys	0m0.438s
unsat
Test (./pcp_instance_400.smt2):
Loading ./pcp_instance_400.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010010010010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11121ms

real	0m11.250s
user	0m17.867s
sys	0m0.399s
unsat
Test (./pcp_instance_401.smt2):
Loading ./pcp_instance_401.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (458ms)


466ms

real	0m0.581s
user	0m1.404s
sys	0m0.062s
sat
Test (./pcp_instance_402.smt2):
Loading ./pcp_instance_402.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (439ms)


448ms

real	0m0.556s
user	0m1.399s
sys	0m0.074s
sat
Test (./pcp_instance_403.smt2):
Loading ./pcp_instance_403.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (368ms)


376ms

real	0m0.485s
user	0m1.087s
sys	0m0.062s
sat
Test (./pcp_instance_404.smt2):
Loading ./pcp_instance_404.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (435ms)


444ms

real	0m0.550s
user	0m1.372s
sys	0m0.072s
sat
Test (./pcp_instance_405.smt2):
Loading ./pcp_instance_405.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (506ms)


515ms

real	0m0.624s
user	0m1.685s
sys	0m0.080s
sat
Test (./pcp_instance_406.smt2):
Loading ./pcp_instance_406.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (439ms)


447ms

real	0m0.556s
user	0m1.384s
sys	0m0.073s
sat
Test (./pcp_instance_407.smt2):
Loading ./pcp_instance_407.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (376ms)


385ms

real	0m0.491s
user	0m1.106s
sys	0m0.065s
sat
Test (./pcp_instance_408.smt2):
Loading ./pcp_instance_408.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (400ms)


409ms

real	0m0.518s
user	0m1.216s
sys	0m0.075s
sat
Test (./pcp_instance_409.smt2):
Loading ./pcp_instance_409.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11111ms

real	0m11.225s
user	0m18.167s
sys	0m0.366s
unsat
Test (./pcp_instance_41.smt2):
Loading ./pcp_instance_41.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11103ms

real	0m11.207s
user	0m17.469s
sys	0m0.372s
unsat
Test (./pcp_instance_410.smt2):
Loading ./pcp_instance_410.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (503ms)


512ms

real	0m0.625s
user	0m1.129s
sys	0m0.045s
sat
Test (./pcp_instance_411.smt2):
Loading ./pcp_instance_411.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11156ms

real	0m11.273s
user	0m18.715s
sys	0m0.423s
unsat
Test (./pcp_instance_412.smt2):
Loading ./pcp_instance_412.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11132ms

real	0m11.244s
user	0m18.452s
sys	0m0.465s
unsat
Test (./pcp_instance_413.smt2):
Loading ./pcp_instance_413.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (455ms)


464ms

real	0m0.570s
user	0m1.202s
sys	0m0.094s
sat
Test (./pcp_instance_414.smt2):
Loading ./pcp_instance_414.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (438ms)


446ms

real	0m0.553s
user	0m1.367s
sys	0m0.075s
sat
Test (./pcp_instance_415.smt2):
Loading ./pcp_instance_415.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (366ms)


374ms

real	0m0.483s
user	0m1.066s
sys	0m0.067s
sat
Test (./pcp_instance_416.smt2):
Loading ./pcp_instance_416.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (436ms)


443ms

real	0m0.551s
user	0m1.348s
sys	0m0.076s
sat
Test (./pcp_instance_417.smt2):
Loading ./pcp_instance_417.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (469ms)


477ms

real	0m0.583s
user	0m1.391s
sys	0m0.082s
sat
Test (./pcp_instance_418.smt2):
Loading ./pcp_instance_418.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11129ms

real	0m11.244s
user	0m18.078s
sys	0m0.463s
unsat
Test (./pcp_instance_419.smt2):
Loading ./pcp_instance_419.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (471ms)


480ms

real	0m0.575s
user	0m1.081s
sys	0m0.049s
sat
Test (./pcp_instance_42.smt2):
Loading ./pcp_instance_42.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11134ms

real	0m11.237s
user	0m17.883s
sys	0m0.426s
unsat
Test (./pcp_instance_420.smt2):
Loading ./pcp_instance_420.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11109ms

real	0m11.230s
user	0m17.345s
sys	0m0.389s
unsat
Test (./pcp_instance_421.smt2):
Loading ./pcp_instance_421.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (480ms)


488ms

real	0m0.595s
user	0m1.085s
sys	0m0.048s
sat
Test (./pcp_instance_422.smt2):
Loading ./pcp_instance_422.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (445ms)


453ms

real	0m0.562s
user	0m1.384s
sys	0m0.078s
sat
Test (./pcp_instance_423.smt2):
Loading ./pcp_instance_423.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (372ms)


381ms

real	0m0.478s
user	0m1.086s
sys	0m0.068s
sat
Test (./pcp_instance_424.smt2):
Loading ./pcp_instance_424.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (437ms)


445ms

real	0m0.554s
user	0m1.369s
sys	0m0.078s
sat
Test (./pcp_instance_425.smt2):
Loading ./pcp_instance_425.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (434ms)


443ms

real	0m0.551s
user	0m1.338s
sys	0m0.076s
sat
Test (./pcp_instance_426.smt2):
Loading ./pcp_instance_426.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (539ms)


547ms

real	0m0.655s
user	0m1.555s
sys	0m0.112s
sat
Test (./pcp_instance_427.smt2):
Loading ./pcp_instance_427.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (71ms)
Prover 1: stopped
Prover 0: stopped


11180ms

real	0m11.302s
user	0m18.581s
sys	0m0.494s
unsat
Test (./pcp_instance_428.smt2):
Loading ./pcp_instance_428.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11112ms

real	0m11.247s
user	0m17.889s
sys	0m0.456s
unsat
Test (./pcp_instance_429.smt2):
Loading ./pcp_instance_429.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (77ms)
Prover 1: stopped
Prover 0: stopped


11276ms

real	0m11.393s
user	0m19.561s
sys	0m0.575s
unsat
Test (./pcp_instance_43.smt2):
Loading ./pcp_instance_43.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (76ms)
Prover 1: stopped
Prover 0: stopped


11428ms

real	0m11.557s
user	0m19.914s
sys	0m0.609s
unsat
Test (./pcp_instance_430.smt2):
Loading ./pcp_instance_430.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (55ms)
Prover 1: stopped
Prover 0: stopped


11229ms

real	0m11.369s
user	0m20.864s
sys	0m0.619s
unsat
Test (./pcp_instance_431.smt2):
Loading ./pcp_instance_431.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11139ms

real	0m11.257s
user	0m19.136s
sys	0m0.522s
unsat
Test (./pcp_instance_432.smt2):
Loading ./pcp_instance_432.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11114ms

real	0m11.232s
user	0m19.024s
sys	0m0.482s
unsat
Test (./pcp_instance_433.smt2):
Loading ./pcp_instance_433.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11096ms

real	0m11.214s
user	0m18.224s
sys	0m0.447s
unsat
Test (./pcp_instance_434.smt2):
Loading ./pcp_instance_434.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11118ms

real	0m11.231s
user	0m17.518s
sys	0m0.404s
unsat
Test (./pcp_instance_435.smt2):
Loading ./pcp_instance_435.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (40ms)
Prover 1: stopped
Prover 0: stopped


11114ms

real	0m11.229s
user	0m18.642s
sys	0m0.426s
unsat
Test (./pcp_instance_436.smt2):
Loading ./pcp_instance_436.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11124ms

real	0m11.236s
user	0m18.371s
sys	0m0.396s
unsat
Test (./pcp_instance_437.smt2):
Loading ./pcp_instance_437.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (354ms)


362ms

real	0m0.468s
user	0m1.033s
sys	0m0.047s
sat
Test (./pcp_instance_438.smt2):
Loading ./pcp_instance_438.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11115ms

real	0m11.228s
user	0m18.364s
sys	0m0.404s
unsat
Test (./pcp_instance_439.smt2):
Loading ./pcp_instance_439.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11133ms

real	0m11.244s
user	0m18.605s
sys	0m0.401s
unsat
Test (./pcp_instance_44.smt2):
Loading ./pcp_instance_44.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (70ms)
Prover 1: stopped
Prover 0: stopped


11144ms

real	0m11.257s
user	0m18.759s
sys	0m0.429s
unsat
Test (./pcp_instance_440.smt2):
Loading ./pcp_instance_440.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (427ms)


435ms

real	0m0.542s
user	0m1.346s
sys	0m0.059s
sat
Test (./pcp_instance_441.smt2):
Loading ./pcp_instance_441.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (363ms)


372ms

real	0m0.480s
user	0m1.049s
sys	0m0.064s
sat
Test (./pcp_instance_442.smt2):
Loading ./pcp_instance_442.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (368ms)


376ms

real	0m0.484s
user	0m1.072s
sys	0m0.066s
sat
Test (./pcp_instance_443.smt2):
Loading ./pcp_instance_443.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (366ms)


374ms

real	0m0.482s
user	0m1.070s
sys	0m0.064s
sat
Test (./pcp_instance_444.smt2):
Loading ./pcp_instance_444.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (434ms)


443ms

real	0m0.551s
user	0m1.359s
sys	0m0.073s
sat
Test (./pcp_instance_445.smt2):
Loading ./pcp_instance_445.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (362ms)


370ms

real	0m0.477s
user	0m1.052s
sys	0m0.065s
sat
Test (./pcp_instance_446.smt2):
Loading ./pcp_instance_446.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (434ms)


443ms

real	0m0.551s
user	0m1.369s
sys	0m0.073s
sat
Test (./pcp_instance_447.smt2):
Loading ./pcp_instance_447.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11130ms

real	0m11.240s
user	0m18.937s
sys	0m0.405s
unsat
Test (./pcp_instance_448.smt2):
Loading ./pcp_instance_448.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11145ms

real	0m11.246s
user	0m19.512s
sys	0m0.420s
unsat
Test (./pcp_instance_449.smt2):
Loading ./pcp_instance_449.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (430ms)


439ms

real	0m0.545s
user	0m1.356s
sys	0m0.059s
sat
Test (./pcp_instance_45.smt2):
Loading ./pcp_instance_45.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (451ms)


459ms

real	0m0.567s
user	0m1.428s
sys	0m0.076s
sat
Test (./pcp_instance_450.smt2):
Loading ./pcp_instance_450.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11105ms

real	0m11.218s
user	0m18.790s
sys	0m0.429s
unsat
Test (./pcp_instance_451.smt2):
Loading ./pcp_instance_451.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11106ms

real	0m11.217s
user	0m17.737s
sys	0m0.394s
unsat
Test (./pcp_instance_452.smt2):
Loading ./pcp_instance_452.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (456ms)


466ms

real	0m0.579s
user	0m1.391s
sys	0m0.066s
sat
Test (./pcp_instance_453.smt2):
Loading ./pcp_instance_453.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11123ms

real	0m11.241s
user	0m18.319s
sys	0m0.419s
unsat
Test (./pcp_instance_454.smt2):
Loading ./pcp_instance_454.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (411ms)


419ms

real	0m0.528s
user	0m0.906s
sys	0m0.045s
sat
Test (./pcp_instance_455.smt2):
Loading ./pcp_instance_455.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (455ms)


463ms

real	0m0.571s
user	0m1.444s
sys	0m0.065s
sat
Test (./pcp_instance_456.smt2):
Loading ./pcp_instance_456.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (398ms)


405ms

real	0m0.503s
user	0m1.124s
sys	0m0.079s
sat
Test (./pcp_instance_457.smt2):
Loading ./pcp_instance_457.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (590ms)


598ms

real	0m0.705s
user	0m1.767s
sys	0m0.111s
sat
Test (./pcp_instance_458.smt2):
Loading ./pcp_instance_458.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (387ms)


395ms

real	0m0.506s
user	0m1.130s
sys	0m0.077s
sat
Test (./pcp_instance_459.smt2):
Loading ./pcp_instance_459.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (429ms)


438ms

real	0m0.557s
user	0m1.193s
sys	0m0.064s
sat
Test (./pcp_instance_46.smt2):
Loading ./pcp_instance_46.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001101001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11126ms

real	0m11.239s
user	0m17.454s
sys	0m0.371s
unsat
Test (./pcp_instance_460.smt2):
Loading ./pcp_instance_460.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11099ms

real	0m11.200s
user	0m16.748s
sys	0m0.355s
unsat
Test (./pcp_instance_461.smt2):
Loading ./pcp_instance_461.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11112ms

real	0m11.229s
user	0m18.155s
sys	0m0.414s
unsat
Test (./pcp_instance_462.smt2):
Loading ./pcp_instance_462.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (498ms)


507ms

real	0m0.616s
user	0m1.637s
sys	0m0.066s
sat
Test (./pcp_instance_463.smt2):
Loading ./pcp_instance_463.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11099ms

real	0m11.214s
user	0m17.663s
sys	0m0.421s
unsat
Test (./pcp_instance_464.smt2):
Loading ./pcp_instance_464.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (49ms)
Prover 1: stopped
Prover 0: stopped


11097ms

real	0m11.208s
user	0m17.481s
sys	0m0.393s
unsat
Test (./pcp_instance_465.smt2):
Loading ./pcp_instance_465.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (57ms)
Prover 1: stopped
Prover 0: stopped


11091ms

real	0m11.201s
user	0m16.979s
sys	0m0.394s
unsat
Test (./pcp_instance_466.smt2):
Loading ./pcp_instance_466.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (522ms)


531ms

real	0m0.638s
user	0m1.578s
sys	0m0.061s
sat
Test (./pcp_instance_467.smt2):
Loading ./pcp_instance_467.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (456ms)


465ms

real	0m0.571s
user	0m1.409s
sys	0m0.085s
sat
Test (./pcp_instance_468.smt2):
Loading ./pcp_instance_468.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (369ms)


377ms

real	0m0.486s
user	0m1.074s
sys	0m0.067s
sat
Test (./pcp_instance_469.smt2):
Loading ./pcp_instance_469.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (68ms)
Prover 1: stopped
Prover 0: stopped


11175ms

real	0m11.296s
user	0m17.792s
sys	0m0.525s
unsat
Test (./pcp_instance_47.smt2):
Loading ./pcp_instance_47.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (537ms)


547ms

real	0m0.678s
user	0m1.331s
sys	0m0.068s
sat
Test (./pcp_instance_470.smt2):
Loading ./pcp_instance_470.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (548ms)


557ms

real	0m0.665s
user	0m1.696s
sys	0m0.087s
sat
Test (./pcp_instance_471.smt2):
Loading ./pcp_instance_471.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (533ms)


542ms

real	0m0.649s
user	0m1.669s
sys	0m0.094s
sat
Test (./pcp_instance_472.smt2):
Loading ./pcp_instance_472.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (365ms)


374ms

real	0m0.481s
user	0m1.069s
sys	0m0.065s
sat
Test (./pcp_instance_473.smt2):
Loading ./pcp_instance_473.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11091ms

real	0m11.204s
user	0m18.000s
sys	0m0.399s
unsat
Test (./pcp_instance_474.smt2):
Loading ./pcp_instance_474.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (409ms)


417ms

real	0m0.512s
user	0m0.919s
sys	0m0.050s
sat
Test (./pcp_instance_475.smt2):
Loading ./pcp_instance_475.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11110ms

real	0m11.222s
user	0m18.256s
sys	0m0.421s
unsat
Test (./pcp_instance_476.smt2):
Loading ./pcp_instance_476.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (529ms)


539ms

real	0m0.636s
user	0m1.202s
sys	0m0.055s
sat
Test (./pcp_instance_477.smt2):
Loading ./pcp_instance_477.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (52ms)
Prover 1: stopped
Prover 0: stopped


11142ms

real	0m11.249s
user	0m18.372s
sys	0m0.451s
unsat
Test (./pcp_instance_478.smt2):
Loading ./pcp_instance_478.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (49ms)
Prover 1: stopped
Prover 0: stopped


11106ms

real	0m11.231s
user	0m17.574s
sys	0m0.402s
unsat
Test (./pcp_instance_479.smt2):
Loading ./pcp_instance_479.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (410ms)


419ms

real	0m0.528s
user	0m0.913s
sys	0m0.046s
sat
Test (./pcp_instance_48.smt2):
Loading ./pcp_instance_48.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (56ms)
Prover 1: stopped
Prover 0: stopped


11151ms

real	0m11.266s
user	0m18.546s
sys	0m0.457s
unsat
Test (./pcp_instance_480.smt2):
Loading ./pcp_instance_480.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (369ms)


378ms

real	0m0.493s
user	0m1.024s
sys	0m0.054s
sat
Test (./pcp_instance_481.smt2):
Loading ./pcp_instance_481.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (440ms)


449ms

real	0m0.555s
user	0m1.355s
sys	0m0.079s
sat
Test (./pcp_instance_482.smt2):
Loading ./pcp_instance_482.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (389ms)


398ms

real	0m0.506s
user	0m1.107s
sys	0m0.070s
sat
Test (./pcp_instance_483.smt2):
Loading ./pcp_instance_483.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (364ms)


373ms

real	0m0.470s
user	0m1.040s
sys	0m0.055s
sat
Test (./pcp_instance_484.smt2):
Loading ./pcp_instance_484.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (386ms)


396ms

real	0m0.492s
user	0m1.128s
sys	0m0.073s
sat
Test (./pcp_instance_485.smt2):
Loading ./pcp_instance_485.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (55ms)
Prover 1: stopped
Prover 0: stopped


11148ms

real	0m11.259s
user	0m17.745s
sys	0m0.447s
unsat
Test (./pcp_instance_486.smt2):
Loading ./pcp_instance_486.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11119ms

real	0m11.226s
user	0m17.617s
sys	0m0.425s
unsat
Test (./pcp_instance_487.smt2):
Loading ./pcp_instance_487.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11130ms

real	0m11.245s
user	0m17.993s
sys	0m0.444s
unsat
Test (./pcp_instance_488.smt2):
Loading ./pcp_instance_488.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (42ms)
Prover 1: stopped
Prover 0: stopped


11130ms

real	0m11.250s
user	0m18.269s
sys	0m0.432s
unsat
Test (./pcp_instance_489.smt2):
Loading ./pcp_instance_489.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11092ms

real	0m11.205s
user	0m17.658s
sys	0m0.401s
unsat
Test (./pcp_instance_49.smt2):
Loading ./pcp_instance_49.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11091ms

real	0m11.204s
user	0m17.483s
sys	0m0.384s
unsat
Test (./pcp_instance_490.smt2):
Loading ./pcp_instance_490.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11134ms

real	0m11.235s
user	0m17.722s
sys	0m0.402s
unsat
Test (./pcp_instance_491.smt2):
Loading ./pcp_instance_491.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11095ms

real	0m11.211s
user	0m17.969s
sys	0m0.450s
unsat
Test (./pcp_instance_492.smt2):
Loading ./pcp_instance_492.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (474ms)


483ms

real	0m0.590s
user	0m1.080s
sys	0m0.042s
sat
Test (./pcp_instance_493.smt2):
Loading ./pcp_instance_493.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11120ms

real	0m11.232s
user	0m18.452s
sys	0m0.437s
unsat
Test (./pcp_instance_494.smt2):
Loading ./pcp_instance_494.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (471ms)


480ms

real	0m0.589s
user	0m1.081s
sys	0m0.044s
sat
Test (./pcp_instance_495.smt2):
Loading ./pcp_instance_495.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (520ms)


529ms

real	0m0.647s
user	0m1.639s
sys	0m0.084s
sat
Test (./pcp_instance_496.smt2):
Loading ./pcp_instance_496.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (472ms)


480ms

real	0m0.591s
user	0m1.487s
sys	0m0.080s
sat
Test (./pcp_instance_497.smt2):
Loading ./pcp_instance_497.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11137ms

real	0m11.240s
user	0m17.582s
sys	0m0.424s
unsat
Test (./pcp_instance_498.smt2):
Loading ./pcp_instance_498.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (430ms)


439ms

real	0m0.552s
user	0m1.237s
sys	0m0.058s
sat
Test (./pcp_instance_499.smt2):
Loading ./pcp_instance_499.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11111ms

real	0m11.225s
user	0m17.657s
sys	0m0.401s
unsat
Test (./pcp_instance_5.smt2):
Loading ./pcp_instance_5.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11096ms

real	0m11.212s
user	0m17.321s
sys	0m0.435s
unsat
Test (./pcp_instance_50.smt2):
Loading ./pcp_instance_50.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (426ms)


435ms

real	0m0.542s
user	0m1.301s
sys	0m0.058s
sat
Test (./pcp_instance_51.smt2):
Loading ./pcp_instance_51.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11175ms

real	0m11.286s
user	0m18.056s
sys	0m0.440s
unsat
Test (./pcp_instance_52.smt2):
Loading ./pcp_instance_52.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11182ms

real	0m11.299s
user	0m18.406s
sys	0m0.526s
unsat
Test (./pcp_instance_53.smt2):
Loading ./pcp_instance_53.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (48ms)
Prover 1: stopped
Prover 0: stopped


11137ms

real	0m11.263s
user	0m18.277s
sys	0m0.432s
unsat
Test (./pcp_instance_54.smt2):
Loading ./pcp_instance_54.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11129ms

real	0m11.235s
user	0m17.824s
sys	0m0.452s
unsat
Test (./pcp_instance_55.smt2):
Loading ./pcp_instance_55.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11130ms

real	0m11.249s
user	0m17.143s
sys	0m0.455s
unsat
Test (./pcp_instance_56.smt2):
Loading ./pcp_instance_56.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (454ms)


463ms

real	0m0.582s
user	0m0.949s
sys	0m0.055s
sat
Test (./pcp_instance_57.smt2):
Loading ./pcp_instance_57.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11116ms

real	0m11.218s
user	0m18.010s
sys	0m0.378s
unsat
Test (./pcp_instance_58.smt2):
Loading ./pcp_instance_58.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (485ms)


494ms

real	0m0.609s
user	0m1.081s
sys	0m0.048s
sat
Test (./pcp_instance_59.smt2):
Loading ./pcp_instance_59.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (451ms)


460ms

real	0m0.567s
user	0m1.430s
sys	0m0.063s
sat
Test (./pcp_instance_6.smt2):
Loading ./pcp_instance_6.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (357ms)


366ms

real	0m0.472s
user	0m1.031s
sys	0m0.054s
sat
Test (./pcp_instance_60.smt2):
Loading ./pcp_instance_60.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11108ms

real	0m11.223s
user	0m18.348s
sys	0m0.458s
unsat
Test (./pcp_instance_61.smt2):
Loading ./pcp_instance_61.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (410ms)


419ms

real	0m0.534s
user	0m0.900s
sys	0m0.048s
sat
Test (./pcp_instance_62.smt2):
Loading ./pcp_instance_62.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (433ms)


441ms

real	0m0.548s
user	0m1.358s
sys	0m0.063s
sat
Test (./pcp_instance_63.smt2):
Loading ./pcp_instance_63.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (450ms)


458ms

real	0m0.564s
user	0m1.426s
sys	0m0.063s
sat
Test (./pcp_instance_64.smt2):
Loading ./pcp_instance_64.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (455ms)


464ms

real	0m0.572s
user	0m1.464s
sys	0m0.065s
sat
Test (./pcp_instance_65.smt2):
Loading ./pcp_instance_65.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000101000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11123ms

real	0m11.238s
user	0m18.137s
sys	0m0.458s
unsat
Test (./pcp_instance_66.smt2):
Loading ./pcp_instance_66.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010101010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (57ms)
Prover 1: stopped
Prover 0: stopped


11204ms

real	0m11.327s
user	0m17.928s
sys	0m0.465s
unsat
Test (./pcp_instance_67.smt2):
Loading ./pcp_instance_67.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11120ms

real	0m11.236s
user	0m17.313s
sys	0m0.409s
unsat
Test (./pcp_instance_68.smt2):
Loading ./pcp_instance_68.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110110110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110110110110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (43ms)
Prover 1: stopped
Prover 0: stopped


11115ms

real	0m11.237s
user	0m17.877s
sys	0m0.412s
unsat
Test (./pcp_instance_69.smt2):
Loading ./pcp_instance_69.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (361ms)


369ms

real	0m0.478s
user	0m0.971s
sys	0m0.051s
sat
Test (./pcp_instance_7.smt2):
Loading ./pcp_instance_7.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (364ms)


372ms

real	0m0.468s
user	0m1.032s
sys	0m0.055s
sat
Test (./pcp_instance_70.smt2):
Loading ./pcp_instance_70.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101110101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11107ms

real	0m11.220s
user	0m18.035s
sys	0m0.424s
unsat
Test (./pcp_instance_71.smt2):
Loading ./pcp_instance_71.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (436ms)


444ms

real	0m0.552s
user	0m1.374s
sys	0m0.058s
sat
Test (./pcp_instance_72.smt2):
Loading ./pcp_instance_72.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (440ms)


451ms

real	0m0.560s
user	0m1.403s
sys	0m0.074s
sat
Test (./pcp_instance_73.smt2):
Loading ./pcp_instance_73.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (500ms)


510ms

real	0m0.618s
user	0m1.655s
sys	0m0.066s
sat
Test (./pcp_instance_74.smt2):
Loading ./pcp_instance_74.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11140ms

real	0m11.253s
user	0m17.947s
sys	0m0.448s
unsat
Test (./pcp_instance_75.smt2):
Loading ./pcp_instance_75.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (47ms)
Prover 1: stopped
Prover 0: stopped


11128ms

real	0m11.240s
user	0m17.532s
sys	0m0.409s
unsat
Test (./pcp_instance_76.smt2):
Loading ./pcp_instance_76.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (357ms)


366ms

real	0m0.473s
user	0m1.018s
sys	0m0.049s
sat
Test (./pcp_instance_77.smt2):
Loading ./pcp_instance_77.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (507ms)


514ms

real	0m0.622s
user	0m1.515s
sys	0m0.088s
sat
Test (./pcp_instance_78.smt2):
Loading ./pcp_instance_78.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (49ms)
Prover 1: stopped
Prover 0: stopped


11154ms

real	0m11.280s
user	0m18.281s
sys	0m0.445s
unsat
Test (./pcp_instance_79.smt2):
Loading ./pcp_instance_79.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (70ms)
Prover 1: stopped
Prover 0: stopped


11158ms

real	0m11.281s
user	0m17.796s
sys	0m0.448s
unsat
Test (./pcp_instance_8.smt2):
Loading ./pcp_instance_8.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (50ms)
Prover 1: stopped
Prover 0: stopped


11099ms

real	0m11.212s
user	0m18.024s
sys	0m0.409s
unsat
Test (./pcp_instance_80.smt2):
Loading ./pcp_instance_80.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (45ms)
Prover 1: stopped
Prover 0: stopped


11105ms

real	0m11.218s
user	0m18.968s
sys	0m0.422s
unsat
Test (./pcp_instance_81.smt2):
Loading ./pcp_instance_81.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (426ms)


436ms

real	0m0.541s
user	0m1.335s
sys	0m0.062s
sat
Test (./pcp_instance_82.smt2):
Loading ./pcp_instance_82.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (367ms)


375ms

real	0m0.482s
user	0m1.069s
sys	0m0.065s
sat
Test (./pcp_instance_83.smt2):
Loading ./pcp_instance_83.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (372ms)


380ms

real	0m0.487s
user	0m1.097s
sys	0m0.066s
sat
Test (./pcp_instance_84.smt2):
Loading ./pcp_instance_84.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (426ms)


433ms

real	0m0.544s
user	0m1.329s
sys	0m0.075s
sat
Test (./pcp_instance_85.smt2):
Loading ./pcp_instance_85.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (366ms)


376ms

real	0m0.483s
user	0m1.045s
sys	0m0.056s
sat
Test (./pcp_instance_86.smt2):
Loading ./pcp_instance_86.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000000" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "000100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (52ms)
Prover 1: stopped
Prover 0: stopped


11122ms

real	0m11.236s
user	0m18.191s
sys	0m0.443s
unsat
Test (./pcp_instance_87.smt2):
Loading ./pcp_instance_87.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (41ms)
Prover 1: stopped
Prover 0: stopped


11116ms

real	0m11.231s
user	0m17.663s
sys	0m0.350s
unsat
Test (./pcp_instance_88.smt2):
Loading ./pcp_instance_88.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010011010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11138ms

real	0m11.258s
user	0m17.460s
sys	0m0.344s
unsat
Test (./pcp_instance_89.smt2):
Loading ./pcp_instance_89.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "101101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "010101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111010" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111101" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (46ms)
Prover 1: stopped
Prover 0: stopped


11117ms

real	0m11.225s
user	0m17.316s
sys	0m0.335s
unsat
Test (./pcp_instance_9.smt2):
Loading ./pcp_instance_9.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110110001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110001001" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (44ms)
Prover 1: stopped
Prover 0: stopped


11128ms

real	0m11.233s
user	0m17.330s
sys	0m0.364s
unsat
Test (./pcp_instance_90.smt2):
Loading ./pcp_instance_90.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (364ms)


372ms

real	0m0.466s
user	0m1.054s
sys	0m0.048s
sat
Test (./pcp_instance_91.smt2):
Loading ./pcp_instance_91.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (365ms)


373ms

real	0m0.467s
user	0m1.062s
sys	0m0.064s
sat
Test (./pcp_instance_92.smt2):
Loading ./pcp_instance_92.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100110" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "100100" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (121ms)
Prover 0: stopped
Prover 1: stopped


11871ms

real	0m11.986s
user	0m19.179s
sys	0m0.452s
unsat
Test (./pcp_instance_93.smt2):
Loading ./pcp_instance_93.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "011111" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x
Prover 1:    "111111011" =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1:    x =
Prover 1:      ReplaceCEPreOp(y_2)
Prover 1:      ReplaceCEPreOp(x_2)
Prover 1:    y_2 =
Prover 1:      ReplaceCEPreOp(y_1)
Prover 1:    x_2 =
Prover 1:      ReplaceCEPreOp(x_1)
Prover 1:    x_1 =
Prover 1:      ReplaceCEPreOp(x_0)
Prover 1:    y_1 =
Prover 1:      ReplaceCEPreOp(y_0)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 2: gave up
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (58ms)
Prover 1: stopped
Prover 0: stopped


11117ms

real	0m11.264s
user	0m18.108s
sys	0m0.649s
unsat
Test (./pcp_instance_94.smt2):
Loading ./pcp_instance_94.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (426ms)


435ms

real	0m0.552s
user	0m1.162s
sys	0m0.056s
sat
Test (./pcp_instance_95.smt2):
Loading ./pcp_instance_95.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (449ms)


457ms

real	0m0.565s
user	0m1.434s
sys	0m0.064s
sat
Test (./pcp_instance_96.smt2):
Loading ./pcp_instance_96.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (363ms)


372ms

real	0m0.479s
user	0m1.058s
sys	0m0.054s
sat
Test (./pcp_instance_97.smt2):
Loading ./pcp_instance_97.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (369ms)


377ms

real	0m0.486s
user	0m1.071s
sys	0m0.067s
sat
Test (./pcp_instance_98.smt2):
Loading ./pcp_instance_98.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (395ms)


403ms

real	0m0.511s
user	0m1.096s
sys	0m0.073s
sat
Test (./pcp_instance_99.smt2):
Loading ./pcp_instance_99.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (502ms)


511ms

real	0m0.619s
user	0m1.621s
sys	0m0.086s
sat
