Test (./str_replace_all162.smt2):
Loading ./str_replace_all162.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 3: stopped
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x\x\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\x\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\\\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\\\\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\\\\x2\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.067s
user	31m41.596s
sys	0m11.456s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all163.smt2):
Loading ./str_replace_all163.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27\x\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27\x\x\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)

real	30m0.041s
user	40m2.083s
sys	0m10.551s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all164.smt2):
Loading ./str_replace_all164.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27 \x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27 \x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27 \x\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27 \\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27 \\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.022s
user	37m24.657s
sys	0m10.805s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all165.smt2):
Loading ./str_replace_all165.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x2\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x2\x27\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x2\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\x2\x\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1:    x_12 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_12
Prover 1:    "\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27\\x\x27" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_10, "\x27")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_10 =
Prover 1:      concatCEPreOp("\x53\x45\x4c\x45\x43\x54\x20\x69\x64\x2c\x75\x73\x65\x72\x6e\x61\x6d\x65\x2c\x72\x65\x61\x6c\x6e\x61\x6d\x65\x2c\x70\x61\x73\x73\x77\x64\x20\x46\x52\x4f\x4d\x20\x75\x73\x65\x72\x73\x20\x57\x48\x45\x52\x45\x20\x75\x73\x65\x72\x6e\x61\x6d\x65\x3d\x27", x_7)
Prover 1:    x_7 =
Prover 1:      ReplaceCEPreOp(sigmaStar_048)

real	29m59.942s
user	33m16.919s
sys	0m10.514s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all166.smt2):
Loading ./str_replace_all166.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (412ms)


421ms

real	0m0.546s
user	0m1.127s
sys	0m0.075s
unsat
Test (./str_replace_all167.smt2):
Loading ./str_replace_all167.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (388ms)


398ms

real	0m0.511s
user	0m1.007s
sys	0m0.072s
unsat
Test (./str_replace_all168.smt2):
Loading ./str_replace_all168.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (640ms)


656ms

real	0m0.840s
user	0m1.513s
sys	0m0.096s
unsat
Test (./str_replace_all169.smt2):
Loading ./str_replace_all169.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (644ms)


666ms

real	0m0.872s
user	0m1.453s
sys	0m0.097s
unsat
Test (./str_replace_all17.smt2):
Loading ./str_replace_all17.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (6522ms)
Prover 0: stopped
Prover 3: stopped
Prover 4: stopped
Prover 2: stopped


45717ms

real	0m45.926s
user	0m59.628s
sys	0m0.762s
unsat
Test (./str_replace_all170.smt2):
Loading ./str_replace_all170.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (581ms)


599ms

real	0m0.840s
user	0m1.448s
sys	0m0.086s
unsat
Test (./str_replace_all171.smt2):
Loading ./str_replace_all171.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (635ms)


653ms

real	0m0.846s
user	0m1.467s
sys	0m0.098s
unsat
Test (./str_replace_all172.smt2):
Loading ./str_replace_all172.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (671ms)


683ms

real	0m0.875s
user	0m1.378s
sys	0m0.100s
unsat
Test (./str_replace_all173.smt2):
Loading ./str_replace_all173.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (583ms)


605ms

real	0m0.806s
user	0m1.410s
sys	0m0.088s
unsat
Test (./str_replace_all174.smt2):
Loading ./str_replace_all174.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (636ms)


653ms

real	0m0.863s
user	0m1.481s
sys	0m0.094s
unsat
Test (./str_replace_all175.smt2):
Loading ./str_replace_all175.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (653ms)


671ms

real	0m0.861s
user	0m1.515s
sys	0m0.096s
unsat
Test (./str_replace_all176.smt2):
Loading ./str_replace_all176.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (657ms)


682ms

real	0m0.902s
user	0m1.448s
sys	0m0.092s
unsat
Test (./str_replace_all177.smt2):
Loading ./str_replace_all177.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (637ms)


648ms

real	0m0.866s
user	0m1.449s
sys	0m0.091s
unsat
Test (./str_replace_all178.smt2):
Loading ./str_replace_all178.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (644ms)


663ms

real	0m0.849s
user	0m1.376s
sys	0m0.091s
unsat
Test (./str_replace_all179.smt2):
Loading ./str_replace_all179.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (643ms)


660ms

real	0m0.882s
user	0m1.458s
sys	0m0.096s
unsat
Test (./str_replace_all18.smt2):
Loading ./str_replace_all18.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (601ms)


622ms

real	0m0.838s
user	0m1.427s
sys	0m0.093s
unsat
Test (./str_replace_all180.smt2):
Loading ./str_replace_all180.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (620ms)


640ms

real	0m0.855s
user	0m1.481s
sys	0m0.095s
unsat
Test (./str_replace_all181.smt2):
Loading ./str_replace_all181.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (735ms)


756ms

real	0m0.972s
user	0m1.685s
sys	0m0.098s
unsat
Test (./str_replace_all182.smt2):
Loading ./str_replace_all182.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (778ms)


798ms

real	0m1.022s
user	0m1.880s
sys	0m0.103s
unsat
Test (./str_replace_all183.smt2):
Loading ./str_replace_all183.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (615ms)


636ms

real	0m0.822s
user	0m1.449s
sys	0m0.098s
unsat
Test (./str_replace_all184.smt2):
Loading ./str_replace_all184.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (655ms)


673ms

real	0m0.875s
user	0m1.482s
sys	0m0.094s
unsat
Test (./str_replace_all185.smt2):
Loading ./str_replace_all185.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (622ms)


638ms

real	0m0.859s
user	0m1.439s
sys	0m0.095s
unsat
Test (./str_replace_all186.smt2):
Loading ./str_replace_all186.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (608ms)


627ms

real	0m0.823s
user	0m1.398s
sys	0m0.088s
unsat
Test (./str_replace_all187.smt2):
Loading ./str_replace_all187.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (630ms)


649ms

real	0m0.835s
user	0m1.421s
sys	0m0.091s
unsat
Test (./str_replace_all188.smt2):
Loading ./str_replace_all188.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/ev/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "///evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "///e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "///evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "////evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/////evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "///evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "////evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "////e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "///evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "////evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/ev/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi//evil/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi//evil/evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (57ms)
Prover 0: stopped
Prover 1: stopped
Prover 2: stopped


13570ms

real	0m13.785s
user	0m30.779s
sys	0m0.758s
unsat
Test (./str_replace_all189.smt2):
Loading ./str_replace_all189.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (621ms)


639ms

real	0m0.844s
user	0m1.533s
sys	0m0.094s
unsat
Test (./str_replace_all19.smt2):
Loading ./str_replace_all19.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (690ms)


705ms

real	0m0.892s
user	0m1.470s
sys	0m0.099s
unsat
Test (./str_replace_all190.smt2):
Loading ./str_replace_all190.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (678ms)


694ms

real	0m0.914s
user	0m1.552s
sys	0m0.093s
unsat
Test (./str_replace_all191.smt2):
Loading ./str_replace_all191.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (575ms)


592ms

real	0m0.779s
user	0m1.343s
sys	0m0.086s
unsat
Test (./str_replace_all192.smt2):
Loading ./str_replace_all192.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (648ms)


665ms

real	0m0.858s
user	0m1.548s
sys	0m0.102s
unsat
Test (./str_replace_all193.smt2):
Loading ./str_replace_all193.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\\x3c\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\\x3c\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 4: Out of memory, giving up
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.037s
user	43m29.432s
sys	0m11.784s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all194.smt2):
Loading ./str_replace_all194.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (376ms)


384ms

real	0m0.483s
user	0m0.993s
sys	0m0.064s
unsat
Test (./str_replace_all195.smt2):
Loading ./str_replace_all195.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (328ms)


336ms

real	0m0.438s
user	0m0.839s
sys	0m0.057s
unsat
Test (./str_replace_all196.smt2):
Loading ./str_replace_all196.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (378ms)


386ms

real	0m0.484s
user	0m1.001s
sys	0m0.054s
unsat
Test (./str_replace_all197.smt2):
Loading ./str_replace_all197.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (334ms)


342ms

real	0m0.439s
user	0m0.854s
sys	0m0.047s
unsat
Test (./str_replace_all198.smt2):
Loading ./str_replace_all198.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (363ms)


372ms

real	0m0.483s
user	0m0.959s
sys	0m0.063s
unsat
Test (./str_replace_all199.smt2):
Loading ./str_replace_all199.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (397ms)


406ms

real	0m0.506s
user	0m1.095s
sys	0m0.066s
unsat
Test (./str_replace_all2.smt2):
Loading ./str_replace_all2.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (366ms)


375ms

real	0m0.484s
user	0m0.927s
sys	0m0.053s
unsat
Test (./str_replace_all20.smt2):
Loading ./str_replace_all20.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (410ms)


419ms

real	0m0.529s
user	0m1.081s
sys	0m0.072s
unsat
Test (./str_replace_all200.smt2):
Loading ./str_replace_all200.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (373ms)


382ms

real	0m0.494s
user	0m1.007s
sys	0m0.053s
unsat
Test (./str_replace_all201.smt2):
Loading ./str_replace_all201.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (333ms)


342ms

real	0m0.441s
user	0m0.857s
sys	0m0.057s
unsat
Test (./str_replace_all202.smt2):
Loading ./str_replace_all202.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (379ms)


387ms

real	0m0.496s
user	0m1.012s
sys	0m0.062s
unsat
Test (./str_replace_all203.smt2):
Loading ./str_replace_all203.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (311ms)


319ms

real	0m0.417s
user	0m0.771s
sys	0m0.054s
unsat
Test (./str_replace_all204.smt2):
Loading ./str_replace_all204.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (383ms)


392ms

real	0m0.494s
user	0m1.027s
sys	0m0.054s
unsat
Test (./str_replace_all205.smt2):
Loading ./str_replace_all205.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e///evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e//evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e//evil /evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/evil /evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/evil /e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/ev/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/evil /" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/evil //evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/ev/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e///evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e////evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/////evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e/////evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e//evil /" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e//e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e//ev/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e//ev/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e///evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e///ev/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e///ev/evil/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e///ev/evil/evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e///ev/evil//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e//evil /e" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e///ev//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e///e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e///e/evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/e///e/evi/e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (27ms)
Prover 0: stopped
Prover 1: stopped
Prover 2: stopped


13548ms

real	0m13.664s
user	0m30.148s
sys	0m0.542s
unsat
Test (./str_replace_all206.smt2):
Loading ./str_replace_all206.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\x3c\x2f\x61\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\x3c\x2f\x61\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\x3c\x2f\x61\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\x3c\x2f\x61\\x3c\x2f\x61\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\x3c\x2f\x61\\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\x3c\x2f\x61\\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\x3c\x2f\x61\\\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: Out of memory, giving up
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\\x3c\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\\x3c\x3c\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\\x3c\x3c\x3c\x2f\x\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x\\\\x3c\x3c\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)

real	30m0.075s
user	43m28.573s
sys	0m13.030s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all207.smt2):
Loading ./str_replace_all207.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/ev/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "///evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "///e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "///evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "////evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/////evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "///evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "////evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "////e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "///evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "////evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/ev/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi//evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi//evil/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi//evil/evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi//evil/evi/ev/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi//evil/evi/ev/evil " =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//evi//e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/evi/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/evil/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/evil/evil/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/ev/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_3
Prover 1:    "//e/ev/e/evil" =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_3 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_48)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 3: proved (31ms)
Prover 1: stopped
Prover 0: stopped
Prover 2: stopped


13510ms

real	0m13.641s
user	0m29.533s
sys	0m0.564s
unsat
Test (./str_replace_all208.smt2):
Loading ./str_replace_all208.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\\x3c\x\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\\x3c\x\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (223700ms)
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


889542ms

real	14m49.645s
user	16m17.670s
sys	0m6.880s
sat
Test (./str_replace_all209.smt2):
Loading ./str_replace_all209.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (312ms)


320ms

real	0m0.432s
user	0m0.779s
sys	0m0.056s
unsat
Test (./str_replace_all21.smt2):
Loading ./str_replace_all21.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (381ms)


389ms

real	0m0.488s
user	0m0.966s
sys	0m0.069s
unsat
Test (./str_replace_all210.smt2):
Loading ./str_replace_all210.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x\\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x\\x3c\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x\\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x\\x3\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x\\x3\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x\\x3\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x\\x3\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\x61\x3\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.077s
user	34m28.787s
sys	0m10.312s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all211.smt2):
Loading ./str_replace_all211.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (392ms)


402ms

real	0m0.500s
user	0m1.040s
sys	0m0.069s
unsat
Test (./str_replace_all212.smt2):
Loading ./str_replace_all212.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x6\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x6\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x6\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x6\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\x3c\x2f\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: Out of memory, giving up
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\\x3\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\\x3\x3c\x2f\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.085s
user	40m20.146s
sys	0m13.368s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all213.smt2):
Loading ./str_replace_all213.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (312ms)


321ms

real	0m0.419s
user	0m0.776s
sys	0m0.056s
unsat
Test (./str_replace_all214.smt2):
Loading ./str_replace_all214.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3069ms)
Prover 3: stopped
Prover 4: stopped
Prover 2: stopped
Prover 0: stopped


26983ms

real	0m27.086s
user	0m39.213s
sys	0m0.525s
unsat
Test (./str_replace_all215.smt2):
Loading ./str_replace_all215.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x3c\x2\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x3c\x2\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\\x3c\x2\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (104373ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


412024ms

real	6m52.129s
user	7m41.849s
sys	0m3.811s
sat
Test (./str_replace_all216.smt2):
Loading ./str_replace_all216.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (321ms)


329ms

real	0m0.441s
user	0m0.793s
sys	0m0.056s
unsat
Test (./str_replace_all217.smt2):
Loading ./str_replace_all217.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (387ms)


397ms

real	0m0.522s
user	0m1.008s
sys	0m0.072s
unsat
Test (./str_replace_all218.smt2):
Loading ./str_replace_all218.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (383ms)


392ms

real	0m0.505s
user	0m0.967s
sys	0m0.069s
unsat
Test (./str_replace_all219.smt2):
Loading ./str_replace_all219.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (363ms)


372ms

real	0m0.476s
user	0m0.926s
sys	0m0.066s
unsat
Test (./str_replace_all22.smt2):
Loading ./str_replace_all22.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      ReplaceCEPreOp(x_12)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(sigmaStar_751)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "' or 1=1 '" =
Prover 1:      ReplaceCEPreOp(x_12)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(sigmaStar_751)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: proven invalid (181ms)
Prover 0: stopped


7632ms

real	0m7.748s
user	0m16.157s
sys	0m0.319s
sat
Test (./str_replace_all220.smt2):
Loading ./str_replace_all220.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (413ms)


421ms

real	0m0.522s
user	0m1.064s
sys	0m0.071s
unsat
Test (./str_replace_all221.smt2):
Loading ./str_replace_all221.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3061ms)
Prover 4: stopped
Prover 2: stopped
Prover 3: stopped
Prover 0: stopped


25390ms

real	0m25.493s
user	0m38.366s
sys	0m0.525s
unsat
Test (./str_replace_all222.smt2):
Loading ./str_replace_all222.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (530ms)


539ms

real	0m0.650s
user	0m1.616s
sys	0m0.083s
unsat
Test (./str_replace_all223.smt2):
Loading ./str_replace_all223.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (368ms)


377ms

real	0m0.476s
user	0m0.919s
sys	0m0.065s
unsat
Test (./str_replace_all224.smt2):
Loading ./str_replace_all224.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (366ms)


378ms

real	0m0.490s
user	0m0.920s
sys	0m0.066s
unsat
Test (./str_replace_all225.smt2):
Loading ./str_replace_all225.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (385ms)


394ms

real	0m0.525s
user	0m1.042s
sys	0m0.075s
unsat
Test (./str_replace_all226.smt2):
Loading ./str_replace_all226.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (370ms)


380ms

real	0m0.490s
user	0m0.946s
sys	0m0.067s
unsat
Test (./str_replace_all228.smt2):
Loading ./str_replace_all228.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (488ms)


499ms

real	0m0.631s
user	0m1.593s
sys	0m0.089s
unsat
Test (./str_replace_all229.smt2):
Loading ./str_replace_all229.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 1: proved (124093ms)
Prover 0: stopped
Prover 4: stopped
Prover 2: stopped


518845ms

real	8m38.968s
user	14m56.663s
sys	0m3.723s
unsat
Test (./str_replace_all23.smt2):
Loading ./str_replace_all23.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      ReplaceCEPreOp(x_12)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(sigmaStar_751)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "'or" =
Prover 1:      ReplaceCEPreOp(x_12)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(sigmaStar_751)
Prover 1: proven invalid (157ms)
Prover 0: stopped


15999ms

real	0m16.128s
user	0m31.442s
sys	0m0.517s
sat
Test (./str_replace_all230.smt2):
Loading ./str_replace_all230.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (319ms)


328ms

real	0m0.456s
user	0m0.856s
sys	0m0.066s
unsat
Test (./str_replace_all231.smt2):
Loading ./str_replace_all231.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (407ms)


417ms

real	0m0.527s
user	0m1.024s
sys	0m0.072s
unsat
Test (./str_replace_all232.smt2):
Loading ./str_replace_all232.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (430ms)


439ms

real	0m0.549s
user	0m1.123s
sys	0m0.065s
unsat
Test (./str_replace_all233.smt2):
Loading ./str_replace_all233.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (416ms)


426ms

real	0m0.523s
user	0m1.067s
sys	0m0.076s
unsat
Test (./str_replace_all234.smt2):
Loading ./str_replace_all234.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (371ms)


380ms

real	0m0.489s
user	0m1.028s
sys	0m0.077s
unsat
Test (./str_replace_all235.smt2):
Loading ./str_replace_all235.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3113ms)
Prover 3: stopped
Prover 4: stopped
Prover 0: stopped
Prover 2: stopped


26878ms

real	0m27.010s
user	0m38.619s
sys	0m0.515s
unsat
Test (./str_replace_all24.smt2):
Loading ./str_replace_all24.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      ReplaceCEPreOp(x_12)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(sigmaStar_751)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "'union" =
Prover 1:      ReplaceCEPreOp(x_12)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(sigmaStar_751)
Prover 1: proven invalid (146ms)
Prover 0: stopped


16948ms

real	0m17.067s
user	0m34.129s
sys	0m0.508s
sat
Test (./str_replace_all25.smt2):
Loading ./str_replace_all25.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      ReplaceCEPreOp(x_12)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(sigmaStar_751)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "exec+sp" =
Prover 1:      ReplaceCEPreOp(x_12)
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(sigmaStar_751)
Prover 1: proven invalid (137ms)
Prover 0: stopped


7573ms

real	0m7.677s
user	0m16.081s
sys	0m0.315s
sat
Test (./str_replace_all26.smt2):
Loading ./str_replace_all26.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (364ms)


373ms

real	0m0.483s
user	0m1.010s
sys	0m0.063s
unsat
Test (./str_replace_all27.smt2):
Loading ./str_replace_all27.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (326ms)


335ms

real	0m0.433s
user	0m0.845s
sys	0m0.057s
unsat
Test (./str_replace_all28.smt2):
Loading ./str_replace_all28.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (341ms)


349ms

real	0m0.446s
user	0m0.887s
sys	0m0.047s
unsat
Test (./str_replace_all29.smt2):
Loading ./str_replace_all29.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (347ms)


355ms

real	0m0.468s
user	0m0.902s
sys	0m0.058s
unsat
Test (./str_replace_all3.smt2):
Loading ./str_replace_all3.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (376ms)


384ms

real	0m0.495s
user	0m0.943s
sys	0m0.054s
unsat
Test (./str_replace_all30.smt2):
Loading ./str_replace_all30.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (335ms)


344ms

real	0m0.460s
user	0m0.901s
sys	0m0.049s
unsat
Test (./str_replace_all31.smt2):
Loading ./str_replace_all31.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (328ms)


337ms

real	0m0.436s
user	0m0.857s
sys	0m0.047s
unsat
Test (./str_replace_all32.smt2):
Loading ./str_replace_all32.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (341ms)


348ms

real	0m0.463s
user	0m0.897s
sys	0m0.058s
unsat
Test (./str_replace_all33.smt2):
Loading ./str_replace_all33.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (322ms)


330ms

real	0m0.441s
user	0m0.838s
sys	0m0.045s
unsat
Test (./str_replace_all34.smt2):
Loading ./str_replace_all34.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (334ms)


342ms

real	0m0.440s
user	0m0.864s
sys	0m0.056s
unsat
Test (./str_replace_all35.smt2):
Loading ./str_replace_all35.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (338ms)


346ms

real	0m0.447s
user	0m0.905s
sys	0m0.059s
unsat
Test (./str_replace_all36.smt2):
Loading ./str_replace_all36.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (328ms)


337ms

real	0m0.449s
user	0m0.832s
sys	0m0.045s
unsat
Test (./str_replace_all37.smt2):
Loading ./str_replace_all37.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


337ms

real	0m0.435s
user	0m0.829s
sys	0m0.046s
unsat
Test (./str_replace_all38.smt2):
Loading ./str_replace_all38.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


338ms

real	0m0.438s
user	0m0.847s
sys	0m0.057s
unsat
Test (./str_replace_all39.smt2):
Loading ./str_replace_all39.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


340ms

real	0m0.438s
user	0m0.869s
sys	0m0.057s
unsat
Test (./str_replace_all4.smt2):
Loading ./str_replace_all4.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (345ms)


354ms

real	0m0.467s
user	0m0.963s
sys	0m0.069s
unsat
Test (./str_replace_all40.smt2):
Loading ./str_replace_all40.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


339ms

real	0m0.450s
user	0m0.894s
sys	0m0.047s
unsat
Test (./str_replace_all41.smt2):
Loading ./str_replace_all41.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (347ms)


357ms

real	0m0.455s
user	0m0.919s
sys	0m0.059s
unsat
Test (./str_replace_all42.smt2):
Loading ./str_replace_all42.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (387ms)


396ms

real	0m0.494s
user	0m1.132s
sys	0m0.064s
unsat
Test (./str_replace_all43.smt2):
Loading ./str_replace_all43.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (341ms)


351ms

real	0m0.449s
user	0m0.910s
sys	0m0.057s
unsat
Test (./str_replace_all44.smt2):
Loading ./str_replace_all44.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (349ms)


357ms

real	0m0.471s
user	0m0.935s
sys	0m0.062s
unsat
Test (./str_replace_all45.smt2):
Loading ./str_replace_all45.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (339ms)


347ms

real	0m0.446s
user	0m0.858s
sys	0m0.058s
unsat
Test (./str_replace_all46.smt2):
Loading ./str_replace_all46.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (337ms)


346ms

real	0m0.463s
user	0m0.913s
sys	0m0.060s
unsat
Test (./str_replace_all47.smt2):
Loading ./str_replace_all47.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (337ms)


347ms

real	0m0.461s
user	0m0.917s
sys	0m0.061s
unsat
Test (./str_replace_all48.smt2):
Loading ./str_replace_all48.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (368ms)


376ms

real	0m0.487s
user	0m1.010s
sys	0m0.063s
unsat
Test (./str_replace_all49.smt2):
Loading ./str_replace_all49.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (356ms)


365ms

real	0m0.464s
user	0m0.943s
sys	0m0.062s
unsat
Test (./str_replace_all5.smt2):
Loading ./str_replace_all5.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: proved (3011ms)
Prover 0: stopped


10519ms

real	0m10.621s
user	0m14.893s
sys	0m0.268s
unsat
Test (./str_replace_all50.smt2):
Loading ./str_replace_all50.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (334ms)


342ms

real	0m0.457s
user	0m0.901s
sys	0m0.059s
unsat
Test (./str_replace_all51.smt2):
Loading ./str_replace_all51.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (371ms)


380ms

real	0m0.498s
user	0m1.022s
sys	0m0.066s
unsat
Test (./str_replace_all52.smt2):
Loading ./str_replace_all52.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3\x3c\x\x3c\x2f\x61\x3e\x20\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x\x3c\x2f\\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: Out of memory, giving up
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x\\x\x3c\x2f\\x3c\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.039s
user	41m55.794s
sys	0m13.202s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all53.smt2):
Loading ./str_replace_all53.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (325ms)


334ms

real	0m0.459s
user	0m0.786s
sys	0m0.047s
unsat
Test (./str_replace_all54.smt2):
Loading ./str_replace_all54.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (332ms)


339ms

real	0m0.452s
user	0m0.855s
sys	0m0.047s
unsat
Test (./str_replace_all55.smt2):
Loading ./str_replace_all55.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (327ms)


335ms

real	0m0.433s
user	0m0.838s
sys	0m0.058s
unsat
Test (./str_replace_all56.smt2):
Loading ./str_replace_all56.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (334ms)


342ms

real	0m0.456s
user	0m0.897s
sys	0m0.062s
unsat
Test (./str_replace_all57.smt2):
Loading ./str_replace_all57.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (330ms)


337ms

real	0m0.436s
user	0m0.833s
sys	0m0.047s
unsat
Test (./str_replace_all58.smt2):
Loading ./str_replace_all58.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (341ms)


351ms

real	0m0.454s
user	0m0.906s
sys	0m0.062s
unsat
Test (./str_replace_all59.smt2):
Loading ./str_replace_all59.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (322ms)


331ms

real	0m0.429s
user	0m0.840s
sys	0m0.058s
unsat
Test (./str_replace_all6.smt2):
Loading ./str_replace_all6.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (314ms)


322ms

real	0m0.433s
user	0m0.772s
sys	0m0.056s
unsat
Test (./str_replace_all60.smt2):
Loading ./str_replace_all60.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


336ms

real	0m0.435s
user	0m0.844s
sys	0m0.055s
unsat
Test (./str_replace_all61.smt2):
Loading ./str_replace_all61.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


336ms

real	0m0.434s
user	0m0.848s
sys	0m0.057s
unsat
Test (./str_replace_all62.smt2):
Loading ./str_replace_all62.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (306ms)


315ms

real	0m0.411s
user	0m0.751s
sys	0m0.045s
unsat
Test (./str_replace_all63.smt2):
Loading ./str_replace_all63.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (330ms)


338ms

real	0m0.437s
user	0m0.848s
sys	0m0.056s
unsat
Test (./str_replace_all64.smt2):
Loading ./str_replace_all64.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\\x3c\x2f\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\\x3c\\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\\x3c\\x3c\x2f\x61\x3\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\\x3c\\x3c\x2f\x61\x3\x3c\x2f\x61\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\\x3c\\x3c\x2f\x61\x3\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\\x3c\\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: Out of memory, giving up
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\\x\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.013s
user	44m57.559s
sys	0m13.121s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all65.smt2):
Loading ./str_replace_all65.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (361ms)


371ms

real	0m0.495s
user	0m0.876s
sys	0m0.043s
unsat
Test (./str_replace_all66.smt2):
Loading ./str_replace_all66.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (342ms)


350ms

real	0m0.462s
user	0m0.941s
sys	0m0.058s
unsat
Test (./str_replace_all67.smt2):
Loading ./str_replace_all67.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


340ms

real	0m0.439s
user	0m0.872s
sys	0m0.046s
unsat
Test (./str_replace_all68.smt2):
Loading ./str_replace_all68.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


339ms

real	0m0.438s
user	0m0.854s
sys	0m0.058s
unsat
Test (./str_replace_all69.smt2):
Loading ./str_replace_all69.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (332ms)


339ms

real	0m0.437s
user	0m0.878s
sys	0m0.057s
unsat
Test (./str_replace_all7.smt2):
Loading ./str_replace_all7.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (343ms)


352ms

real	0m0.462s
user	0m0.820s
sys	0m0.047s
unsat
Test (./str_replace_all70.smt2):
Loading ./str_replace_all70.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (326ms)


333ms

real	0m0.432s
user	0m0.852s
sys	0m0.046s
unsat
Test (./str_replace_all71.smt2):
Loading ./str_replace_all71.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (339ms)


347ms

real	0m0.459s
user	0m0.941s
sys	0m0.057s
unsat
Test (./str_replace_all72.smt2):
Loading ./str_replace_all72.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


340ms

real	0m0.440s
user	0m0.863s
sys	0m0.057s
unsat
Test (./str_replace_all73.smt2):
Loading ./str_replace_all73.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (334ms)


343ms

real	0m0.444s
user	0m0.881s
sys	0m0.059s
unsat
Test (./str_replace_all74.smt2):
Loading ./str_replace_all74.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (340ms)


349ms

real	0m0.448s
user	0m0.902s
sys	0m0.059s
unsat
Test (./str_replace_all75.smt2):
Loading ./str_replace_all75.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (341ms)


350ms

real	0m0.448s
user	0m0.878s
sys	0m0.048s
unsat
Test (./str_replace_all76.smt2):
Loading ./str_replace_all76.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (335ms)


344ms

real	0m0.445s
user	0m0.865s
sys	0m0.061s
unsat
Test (./str_replace_all77.smt2):
Loading ./str_replace_all77.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (336ms)


345ms

real	0m0.444s
user	0m0.896s
sys	0m0.060s
unsat
Test (./str_replace_all78.smt2):
Loading ./str_replace_all78.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (336ms)


347ms

real	0m0.457s
user	0m0.884s
sys	0m0.048s
unsat
Test (./str_replace_all79.smt2):
Loading ./str_replace_all79.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (334ms)


344ms

real	0m0.444s
user	0m0.883s
sys	0m0.058s
unsat
Test (./str_replace_all8.smt2):
Loading ./str_replace_all8.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (372ms)


382ms

real	0m0.496s
user	0m0.951s
sys	0m0.069s
unsat
Test (./str_replace_all80.smt2):
Loading ./str_replace_all80.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (346ms)


355ms

real	0m0.454s
user	0m0.918s
sys	0m0.059s
unsat
Test (./str_replace_all81.smt2):
Loading ./str_replace_all81.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (398ms)


407ms

real	0m0.505s
user	0m1.145s
sys	0m0.065s
unsat
Test (./str_replace_all82.smt2):
Loading ./str_replace_all82.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (341ms)


350ms

real	0m0.448s
user	0m0.921s
sys	0m0.058s
unsat
Test (./str_replace_all83.smt2):
Loading ./str_replace_all83.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


338ms

real	0m0.449s
user	0m0.871s
sys	0m0.058s
unsat
Test (./str_replace_all84.smt2):
Loading ./str_replace_all84.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (330ms)


338ms

real	0m0.438s
user	0m0.847s
sys	0m0.048s
unsat
Test (./str_replace_all85.smt2):
Loading ./str_replace_all85.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


339ms

real	0m0.436s
user	0m0.882s
sys	0m0.058s
unsat
Test (./str_replace_all86.smt2):
Loading ./str_replace_all86.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


337ms

real	0m0.435s
user	0m0.844s
sys	0m0.047s
unsat
Test (./str_replace_all87.smt2):
Loading ./str_replace_all87.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (351ms)


360ms

real	0m0.471s
user	0m0.943s
sys	0m0.058s
unsat
Test (./str_replace_all88.smt2):
Loading ./str_replace_all88.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (333ms)


342ms

real	0m0.439s
user	0m0.880s
sys	0m0.057s
unsat
Test (./str_replace_all89.smt2):
Loading ./str_replace_all89.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (333ms)


341ms

real	0m0.440s
user	0m0.866s
sys	0m0.058s
unsat
Test (./str_replace_all9.smt2):
Loading ./str_replace_all9.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (362ms)


371ms

real	0m0.483s
user	0m0.924s
sys	0m0.065s
unsat
Test (./str_replace_all90.smt2):
Loading ./str_replace_all90.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (360ms)


369ms

real	0m0.479s
user	0m1.001s
sys	0m0.051s
unsat
Test (./str_replace_all91.smt2):
Loading ./str_replace_all91.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x6\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x6\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x6\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x6\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\x3c\x2f\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\\x3\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x\x3c\x2f\\\x3\x3c\x2f\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: Out of memory, giving up
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	30m0.049s
user	39m17.187s
sys	0m13.053s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all92.smt2):
Loading ./str_replace_all92.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


337ms

real	0m0.441s
user	0m0.873s
sys	0m0.047s
unsat
Test (./str_replace_all93.smt2):
Loading ./str_replace_all93.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (369ms)


377ms

real	0m0.474s
user	0m0.956s
sys	0m0.064s
unsat
Test (./str_replace_all94.smt2):
Loading ./str_replace_all94.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (330ms)


339ms

real	0m0.436s
user	0m0.855s
sys	0m0.046s
unsat
Test (./str_replace_all95.smt2):
Loading ./str_replace_all95.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


338ms

real	0m0.450s
user	0m0.887s
sys	0m0.049s
unsat
Test (./str_replace_all96.smt2):
Loading ./str_replace_all96.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (328ms)


336ms

real	0m0.437s
user	0m0.851s
sys	0m0.046s
unsat
Test (./str_replace_all97.smt2):
Loading ./str_replace_all97.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (351ms)


361ms

real	0m0.459s
user	0m0.911s
sys	0m0.052s
unsat
Test (./str_replace_all98.smt2):
Loading ./str_replace_all98.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (338ms)


347ms

real	0m0.457s
user	0m0.919s
sys	0m0.046s
unsat
Test (./str_replace_all99.smt2):
Loading ./str_replace_all99.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (351ms)


361ms

real	0m0.460s
user	0m0.904s
sys	0m0.051s
unsat
