Test (./lan_replace_all101.smt2):
Loading ./lan_replace_all101.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (4667ms)
Prover 4: stopped
Prover 3: stopped
Prover 2: stopped
Prover 0: stopped


25195ms

real	0m25.411s
user	0m35.856s
sys	0m0.840s
unsat
Test (./lan_replace_all107.smt2):
Loading ./lan_replace_all107.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\\x\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3\x3c\x2f\x70\x\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3\x3c\x2f\x70\x\x3c\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (21347ms)
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


79770ms

real	1m19.985s
user	1m43.602s
sys	0m1.789s
sat
Test (./lan_replace_all11.smt2):
Loading ./lan_replace_all11.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (4012ms)
Prover 2: stopped
Prover 3: stopped
Prover 4: stopped
Prover 0: stopped


30230ms

real	0m30.434s
user	0m40.993s
sys	0m0.834s
unsat
Test (./lan_replace_all12.smt2):
Loading ./lan_replace_all12.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x7\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x7\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x7\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x7\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x7\x3c\x2f\x70\x3\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x7\x3c\x2f\x70\x3\x3c\x2f\x70\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x7\x3c\x2f\x70\x3\x3c\x2f\x70\\x3c\\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x7\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x7\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 3: stopped
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x3c\x2f\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2f\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2f\\x3c\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2f\\x3c\\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2f\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2f\x\\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2\x3c\x2f\\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2\\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2\\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2\\x\\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2\\x\\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2\\x\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2\\x\\\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x3c\x2\\x\\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\\x3c\\x3c\x2f\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (135238ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


536408ms

real	8m56.638s
user	9m38.533s
sys	0m4.683s
sat
Test (./lan_replace_all19.smt2):
Loading ./lan_replace_all19.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3c\x2f\\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3c\x2f\\x3c\x2\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\x\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\x\x3c\\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\x\x3c\\x3c\x2\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\x\x3c\\x3c\x2\x3\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 3: stopped
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\x\x3c\\x3c\x2\x3\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\x\x3c\\x3c\x2\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\x\x3c\\x3c\x2\\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3c\x2f\x70\x\x3c\\x3c\x2\x3\x3c\x2f\x70\x3\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\x3\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\x3c\x2f\x70\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\x3c\x2f\x70\x3c\x2f\x70\\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\x3c\x2f\x7\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\\x3c\x2f\x70\x3e\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\\x3c\x2f\x70\x3e\x3c\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x3\\\\x3c\x2f\x7\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x2f\x70\x\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x2f\x70\x\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x2f\x70\x\x\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x2f\x70\x\x\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x3c\x2f\x\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x3c\x2f\x\x3c\x2f\x70\x\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\x3c\x3c\x2f\x\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x2f\x7\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x3c\x2\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x2f\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x2f\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x2f\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x2f\x3c\x2f\x70\x3\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x3\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x3\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x3\x3c\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x3\x3c\x3c\x2f\\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\x\x3c\x3\x3c\x3c\x2f\\x3c\x2f\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\\\x3c\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (421696ms)
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


1657414ms

real	27m37.543s
user	29m8.625s
sys	0m11.699s
sat
Test (./lan_replace_all26.smt2):
Loading ./lan_replace_all26.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3160ms)
Prover 0: stopped
Prover 2: stopped
Prover 3: stopped
Prover 4: stopped


25660ms

real	0m25.835s
user	0m38.858s
sys	0m0.548s
unsat
Test (./lan_replace_all35.smt2):
Loading ./lan_replace_all35.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (4045ms)
Prover 0: stopped
Prover 4: stopped
Prover 3: stopped
Prover 2: stopped


23941ms

real	0m24.078s
user	0m38.446s
sys	0m0.621s
unsat
Test (./lan_replace_all45.smt2):
Loading ./lan_replace_all45.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (399ms)


411ms

real	0m0.546s
user	0m1.123s
sys	0m0.077s
unsat
Test (./lan_replace_all46.smt2):
Loading ./lan_replace_all46.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (421ms)


431ms

real	0m0.567s
user	0m1.216s
sys	0m0.083s
unsat
Test (./lan_replace_all47.smt2):
Loading ./lan_replace_all47.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (355ms)


364ms

real	0m0.484s
user	0m0.978s
sys	0m0.064s
unsat
Test (./lan_replace_all48.smt2):
Loading ./lan_replace_all48.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (367ms)


376ms

real	0m0.492s
user	0m1.022s
sys	0m0.065s
unsat
Test (./lan_replace_all54.smt2):
Loading ./lan_replace_all54.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3291ms)
Prover 0: stopped
Prover 3: stopped
Prover 4: stopped
Prover 2: stopped


28119ms

real	0m28.228s
user	0m40.512s
sys	0m0.544s
unsat
Test (./lan_replace_all6.smt2):
Loading ./lan_replace_all6.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x2f\x\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x3c\x2f\\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x3c\x2f\\x3c\x\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (16348ms)
Prover 1: stopped
Prover 2: stopped
Prover 4: stopped


59772ms

real	0m59.923s
user	1m22.211s
sys	0m1.129s
sat
Test (./lan_replace_all63.smt2):
Loading ./lan_replace_all63.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: proved (3189ms)
Prover 0: stopped


10625ms

real	0m10.742s
user	0m16.113s
sys	0m0.312s
unsat
Test (./lan_replace_all73.smt2):
Loading ./lan_replace_all73.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (6811ms)


6821ms

real	0m6.947s
user	0m18.867s
sys	0m0.493s
sat
Test (./lan_replace_all77.smt2):
Loading ./lan_replace_all77.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1: proven invalid (409ms)
Prover 0: stopped


15631ms

real	0m15.753s
user	0m19.942s
sys	0m0.265s
sat
Test (./lan_replace_all79.smt2):
Loading ./lan_replace_all79.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2f\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x2f\x\x3c\x2f\x70\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x3c\x2f\\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x3c\x2\x3\x3c\x3c\x2f\\x3c\x\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x\x\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (17216ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


63201ms

real	1m3.328s
user	1m25.707s
sys	0m1.156s
sat
Test (./lan_replace_all80.smt2):
Loading ./lan_replace_all80.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 3: stopped
Prover 1: proved (135483ms)
Prover 4: stopped
Prover 0: stopped
Prover 2: stopped


553983ms

real	9m14.140s
user	11m15.213s
sys	0m3.994s
unsat
Test (./lan_replace_all87.smt2):
Loading ./lan_replace_all87.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x3c\\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x3c\\x3c\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\\x3c\x2\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\\x3c\x2\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\\x3c\x2\x3c\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\\x3c\x2\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\\x3c\x\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x\\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x\\x3\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x\\x3\x3c\x2f\x70\\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x\\x3\x3c\x2f\x70\\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x\\x3\x3c\x2f\x70\\x3c\x2f\x\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x\\x3\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x\\x3\x3c\x2f\x70\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x\\x3\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x\x3c\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: proven invalid (30795ms)
Prover 1: stopped
Prover 4: stopped
Prover 2: stopped


119081ms

real	1m59.192s
user	2m29.781s
sys	0m1.606s
sat
Test (./lan_replace_all96.smt2):
Loading ./lan_replace_all96.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x3c\x2f\x70\x3e\x3c\x2f\x70\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3c\x2f\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3c\x2f\\x3c\x2f\x70\x3e\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3c\x2f\\x3c\x2f\x70\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3c\x2f\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3c\x2f\\x3c\x2f\x70\\x3c\x2f\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3c\x2f\\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3c\x2f\\\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3c\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3c\x3c\x2f\x70\x\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x70\x\x3\x3\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1:    x_16 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_16
Prover 1:    "\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e\x3c\x\x3c\x2f\x7\x3c\x2f\x70\x3e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_14, "\x3c\x2f\x70\x3e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp("\x3c\x70\x3e\x54\x69\x74\x6c\x65\x3a\x3c\x62\x72\x20\x2f\x3e", x_12)
Prover 1:    x_12 =
Prover 1:      ReplaceCEPreOp(x_8)
Prover 1:    x_8 =
Prover 1:      ReplaceCEPreOp(x_4)
Prover 0: proven invalid (55620ms)
Prover 4: stopped
Prover 1: stopped
Prover 2: stopped


192622ms

real	3m12.745s
user	3m52.047s
sys	0m2.175s
sat
Test (./str_replace_all0.smt2):
Loading ./str_replace_all0.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (313ms)


321ms

real	0m0.435s
user	0m0.780s
sys	0m0.048s
unsat
Test (./str_replace_all1.smt2):
Loading ./str_replace_all1.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (342ms)


351ms

real	0m0.465s
user	0m0.853s
sys	0m0.055s
unsat
Test (./str_replace_all10.smt2):
Loading ./str_replace_all10.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (387ms)


395ms

real	0m0.509s
user	0m1.003s
sys	0m0.061s
unsat
Test (./str_replace_all100.smt2):
Loading ./str_replace_all100.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


340ms

real	0m0.435s
user	0m0.860s
sys	0m0.060s
unsat
Test (./str_replace_all101.smt2):
Loading ./str_replace_all101.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (315ms)


324ms

real	0m0.421s
user	0m0.786s
sys	0m0.058s
unsat
Test (./str_replace_all102.smt2):
Loading ./str_replace_all102.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (339ms)


348ms

real	0m0.463s
user	0m0.949s
sys	0m0.063s
unsat
Test (./str_replace_all103.smt2):
Loading ./str_replace_all103.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x6\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\\x3c\x2\x3c\x2f\x61\x3e\x5d\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\\x3c\x2\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\\x3c\x2\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x5d\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 0: Out of memory, giving up
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x5d\x3\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x5d\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\x3e\x5d\x3\x3c\x2f\x3c\x2f\x61\x3e\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x61\\x3\x3c\x2f\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x3c\x2f\x6\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x3c\x2f\x6\x3c\x\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x2f\x3c\x2f\x6\x3c\x\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x\x3c\x2f\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	129m25.517s
user	74m11.579s
sys	0m32.193s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all104.smt2):
Loading ./str_replace_all104.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (337ms)


346ms

real	0m0.459s
user	0m0.922s
sys	0m0.049s
unsat
Test (./str_replace_all105.smt2):
Loading ./str_replace_all105.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (333ms)


341ms

real	0m0.453s
user	0m0.883s
sys	0m0.048s
unsat
Test (./str_replace_all106.smt2):
Loading ./str_replace_all106.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (330ms)


339ms

real	0m0.451s
user	0m0.862s
sys	0m0.060s
unsat
Test (./str_replace_all107.smt2):
Loading ./str_replace_all107.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


337ms

real	0m0.435s
user	0m0.843s
sys	0m0.058s
unsat
Test (./str_replace_all108.smt2):
Loading ./str_replace_all108.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (327ms)


336ms

real	0m0.447s
user	0m0.851s
sys	0m0.047s
unsat
Test (./str_replace_all109.smt2):
Loading ./str_replace_all109.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (326ms)


335ms

real	0m0.449s
user	0m0.849s
sys	0m0.062s
unsat
Test (./str_replace_all11.smt2):
Loading ./str_replace_all11.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    "\x53\x45\x43\x55\x52\x49\x54\x59\x20\x57\x41\x52\x4e\x49\x4e\x47\x3a\x20\x6c\x6f\x67\x67\x65\x64\x20\x69\x6e\x74\x72\x75\x73\x69\x6f\x6e\x20\x61\x74\x74\x65\x6d\x70\x74\x20\x61\x67\x61\x69\x6e\x73\x74\x20\x6c\x69\x62\x2f\x61\x64\x6f\x64\x62\x2f\x74\x65\x73\x74\x73\x2f\x74\x6d\x73\x73\x71\x6c\x2e\x70\x68\x70" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1: proved (3177ms)
Prover 4: stopped
Prover 3: stopped
Prover 2: stopped
Prover 0: stopped


28532ms

real	0m28.636s
user	0m40.989s
sys	0m0.564s
unsat
Test (./str_replace_all110.smt2):
Loading ./str_replace_all110.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (332ms)


341ms

real	0m0.455s
user	0m0.858s
sys	0m0.063s
unsat
Test (./str_replace_all111.smt2):
Loading ./str_replace_all111.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


338ms

real	0m0.453s
user	0m0.865s
sys	0m0.062s
unsat
Test (./str_replace_all112.smt2):
Loading ./str_replace_all112.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (326ms)


334ms

real	0m0.433s
user	0m0.828s
sys	0m0.047s
unsat
Test (./str_replace_all113.smt2):
Loading ./str_replace_all113.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (341ms)


348ms

real	0m0.465s
user	0m0.911s
sys	0m0.065s
unsat
Test (./str_replace_all114.smt2):
Loading ./str_replace_all114.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (333ms)


341ms

real	0m0.457s
user	0m0.868s
sys	0m0.049s
unsat
Test (./str_replace_all115.smt2):
Loading ./str_replace_all115.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (328ms)


337ms

real	0m0.435s
user	0m0.827s
sys	0m0.059s
unsat
Test (./str_replace_all116.smt2):
Loading ./str_replace_all116.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (322ms)


330ms

real	0m0.444s
user	0m0.829s
sys	0m0.060s
unsat
Test (./str_replace_all117.smt2):
Loading ./str_replace_all117.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (326ms)


334ms

real	0m0.448s
user	0m0.819s
sys	0m0.047s
unsat
Test (./str_replace_all118.smt2):
Loading ./str_replace_all118.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (325ms)


333ms

real	0m0.433s
user	0m0.821s
sys	0m0.060s
unsat
Test (./str_replace_all119.smt2):
Loading ./str_replace_all119.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (352ms)


360ms

real	0m0.475s
user	0m0.980s
sys	0m0.062s
unsat
Test (./str_replace_all12.smt2):
Loading ./str_replace_all12.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (321ms)


329ms

real	0m0.439s
user	0m0.786s
sys	0m0.047s
unsat
Test (./str_replace_all120.smt2):
Loading ./str_replace_all120.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (384ms)


392ms

real	0m0.490s
user	0m1.115s
sys	0m0.053s
unsat
Test (./str_replace_all121.smt2):
Loading ./str_replace_all121.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (351ms)


360ms

real	0m0.472s
user	0m0.924s
sys	0m0.052s
unsat
Test (./str_replace_all122.smt2):
Loading ./str_replace_all122.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


338ms

real	0m0.436s
user	0m0.839s
sys	0m0.061s
unsat
Test (./str_replace_all123.smt2):
Loading ./str_replace_all123.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (330ms)


339ms

real	0m0.452s
user	0m0.865s
sys	0m0.050s
unsat
Test (./str_replace_all124.smt2):
Loading ./str_replace_all124.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (330ms)


338ms

real	0m0.453s
user	0m0.866s
sys	0m0.048s
unsat
Test (./str_replace_all125.smt2):
Loading ./str_replace_all125.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (324ms)


333ms

real	0m0.446s
user	0m0.842s
sys	0m0.059s
unsat
Test (./str_replace_all126.smt2):
Loading ./str_replace_all126.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (349ms)


357ms

real	0m0.470s
user	0m0.959s
sys	0m0.062s
unsat
Test (./str_replace_all127.smt2):
Loading ./str_replace_all127.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (325ms)


334ms

real	0m0.432s
user	0m0.838s
sys	0m0.048s
unsat
Test (./str_replace_all128.smt2):
Loading ./str_replace_all128.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (326ms)


334ms

real	0m0.447s
user	0m0.833s
sys	0m0.048s
unsat
Test (./str_replace_all129.smt2):
Loading ./str_replace_all129.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (352ms)


360ms

real	0m0.473s
user	0m0.989s
sys	0m0.050s
unsat
Test (./str_replace_all13.smt2):
Loading ./str_replace_all13.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (342ms)


351ms

real	0m0.451s
user	0m0.836s
sys	0m0.049s
unsat
Test (./str_replace_all130.smt2):
Loading ./str_replace_all130.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x3c\x2f\x61\x\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\x3c\x2f\x61\x3e\\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\x3c\x2f\x61\x3e\\x3c\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\x3c\x2f\x61\x3e\\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\\x3c\x2\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\\x3c\x2\x3c\x\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\\x3c\x2\x3c\x\x3c\x2f\x6\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\x\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: Out of memory, giving up
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\x61\x3\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\x61\x3\x3c\x2\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3c\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3\\x3\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	93m17.892s
user	77m57.831s
sys	0m28.142s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all131.smt2):
Loading ./str_replace_all131.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (330ms)


339ms

real	0m0.438s
user	0m0.839s
sys	0m0.062s
unsat
Test (./str_replace_all132.smt2):
Loading ./str_replace_all132.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (339ms)


347ms

real	0m0.460s
user	0m0.859s
sys	0m0.065s
unsat
Test (./str_replace_all133.smt2):
Loading ./str_replace_all133.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (332ms)


339ms

real	0m0.450s
user	0m0.884s
sys	0m0.061s
unsat
Test (./str_replace_all134.smt2):
Loading ./str_replace_all134.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (348ms)


357ms

real	0m0.469s
user	0m0.937s
sys	0m0.058s
unsat
Test (./str_replace_all135.smt2):
Loading ./str_replace_all135.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (345ms)


354ms

real	0m0.465s
user	0m0.884s
sys	0m0.067s
unsat
Test (./str_replace_all136.smt2):
Loading ./str_replace_all136.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (343ms)


351ms

real	0m0.463s
user	0m0.920s
sys	0m0.065s
unsat
Test (./str_replace_all137.smt2):
Loading ./str_replace_all137.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (351ms)


360ms

real	0m0.479s
user	0m0.896s
sys	0m0.070s
unsat
Test (./str_replace_all138.smt2):
Loading ./str_replace_all138.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (362ms)


370ms

real	0m0.487s
user	0m0.926s
sys	0m0.069s
unsat
Test (./str_replace_all139.smt2):
Loading ./str_replace_all139.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (330ms)


338ms

real	0m0.447s
user	0m0.873s
sys	0m0.061s
unsat
Test (./str_replace_all14.smt2):
Loading ./str_replace_all14.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (370ms)


379ms

real	0m0.489s
user	0m0.953s
sys	0m0.062s
unsat
Test (./str_replace_all140.smt2):
Loading ./str_replace_all140.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (313ms)


322ms

real	0m0.421s
user	0m0.770s
sys	0m0.047s
unsat
Test (./str_replace_all141.smt2):
Loading ./str_replace_all141.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (331ms)


340ms

real	0m0.440s
user	0m0.832s
sys	0m0.060s
unsat
Test (./str_replace_all142.smt2):
Loading ./str_replace_all142.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x6\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x6\x3c\x2f\x\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2f\x61\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3\x3c\x2f\x61\x3e\x5d\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3\x3c\x2f\x61\x3e\x5d\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: Out of memory, giving up
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3\x3c\x2f\x61\x3e\x5d\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3\x3c\x2f\x61\x3e\x5d\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x3c\x2f\x\x3\x3c\x2f\x61\x3e\x5d\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_163)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_057)
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	60m0.093s
user	123m43.602s
sys	0m26.263s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all143.smt2):
Loading ./str_replace_all143.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (517ms)


533ms

real	0m0.734s
user	0m1.100s
sys	0m0.075s
unsat
Test (./str_replace_all144.smt2):
Loading ./str_replace_all144.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (644ms)


662ms

real	0m0.864s
user	0m1.437s
sys	0m0.089s
unsat
Test (./str_replace_all145.smt2):
Loading ./str_replace_all145.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (719ms)


741ms

real	0m0.949s
user	0m1.597s
sys	0m0.109s
unsat
Test (./str_replace_all146.smt2):
Loading ./str_replace_all146.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (4301ms)


4325ms

real	0m4.558s
user	0m11.752s
sys	0m0.357s
unsat
Test (./str_replace_all147.smt2):
Loading ./str_replace_all147.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (4423ms)


4444ms

real	0m4.639s
user	0m12.588s
sys	0m0.360s
unsat
Test (./str_replace_all148.smt2):
Loading ./str_replace_all148.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2998ms)


3017ms

real	0m3.223s
user	0m8.756s
sys	0m0.306s
sat
Test (./str_replace_all149.smt2):
Loading ./str_replace_all149.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2876ms)


2893ms

real	0m3.107s
user	0m8.278s
sys	0m0.292s
sat
Test (./str_replace_all15.smt2):
Loading ./str_replace_all15.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (698ms)


715ms

real	0m0.922s
user	0m1.536s
sys	0m0.108s
unsat
Test (./str_replace_all150.smt2):
Loading ./str_replace_all150.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2858ms)


2875ms

real	0m3.079s
user	0m8.297s
sys	0m0.303s
sat
Test (./str_replace_all151.smt2):
Loading ./str_replace_all151.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2326ms)


2343ms

real	0m2.571s
user	0m6.846s
sys	0m0.253s
sat
Test (./str_replace_all152.smt2):
Loading ./str_replace_all152.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2837ms)


2856ms

real	0m3.081s
user	0m8.237s
sys	0m0.293s
sat
Test (./str_replace_all153.smt2):
Loading ./str_replace_all153.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2675ms)


2694ms

real	0m2.899s
user	0m7.787s
sys	0m0.288s
sat
Test (./str_replace_all154.smt2):
Loading ./str_replace_all154.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proven invalid (2906ms)


2923ms

real	0m3.131s
user	0m8.591s
sys	0m0.299s
sat
Test (./str_replace_all155.smt2):
Loading ./str_replace_all155.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (706ms)


732ms

real	0m0.936s
user	0m1.530s
sys	0m0.094s
unsat
Test (./str_replace_all156.smt2):
Loading ./str_replace_all156.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x20\x5\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x3c\\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x3c\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x3c\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x6\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x6\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x6\\x3c\x2f\x61\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x6\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x6\\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x6\\x3c\x2f\x\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2f\x6\\x3c\x2f\x\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x2\\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: Out of memory, giving up
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x3c\x2f\x\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x3c\x2f\x\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x3c\x2f\x\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x3c\x2f\x\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3e\x20\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x3c\x2f\x\x3c\x2f\x61\x\x3c\\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x3c\x2f\x\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x3c\x2f\x\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x3c\x3c\x2f\x\\x3c\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\\x\x3c\x2f\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	202m39.874s
user	71m16.777s
sys	0m23.377s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all157.smt2):
Loading ./str_replace_all157.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (310ms)


317ms

real	0m0.415s
user	0m0.776s
sys	0m0.059s
unsat
Test (./str_replace_all158.smt2):
Loading ./str_replace_all158.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x\x3c\x2f\x61\x3e\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3c\x2f\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\x\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\x\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\x\x3c\x2f\x6\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\x\x3c\x2f\x6\x\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\x\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\\x3c\x2f\x61\x3e\x5d\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\\x3\\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x3e\x5d\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x3e\x5d\x3c\x2f\x61\x\x3c\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: Out of memory, giving up
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x3e\x5d\x3c\x2f\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3e\\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3e\\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x\x3c\\x3c\x2f\x61\x3c\\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3\x3c\\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3\x3c\\x3\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3\x3c\\x3\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3\x3c\\x3\x\x3c\x2f\x61\x3e\x5d\x5c\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_063)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_257)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	230m27.678s
user	70m4.960s
sys	0m21.213s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all159.smt2):
Loading ./str_replace_all159.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x20\x5d\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 3: stopped
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3c\x3c\x2f\x61\x3e\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x3c\x2f\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x3c\x2f\\x3c\x2f\x61\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x3c\x2f\\x3c\x2f\x6\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x3c\x2f\\x3c\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x3c\x2f\\x3c\\x3c\x2f\x61\x3e\x20\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x\x3c\x2f\x61\x3e\x20\x5d\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x61\x3e\x20\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: Out of memory, giving up
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x61\x3e\x20\\x3\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x\x3c\x2f\x61\x3e\x20\x\x3c\x2f\x3c\x2f\x61\x3e\x2\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x\x3c\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x\x3c\x3c\x2f\x61\x3e\x20\x5d\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x3\x\\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_20
Prover 1:    "\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x\x3c\x2f\x61\x3e\x20\x5d\x5\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_20 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_18, "\x3c\x2f\x61\x3e\x20\x5d\x5c\x6e")
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_17, sigmaStar_061)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_17 =
Prover 1:      concatCEPreOp(x_15, "\x27\x3e")
Prover 1:    x_15 =
Prover 1:      concatCEPreOp(x_14, x_13)
Prover 1:    x_13 =
Prover 1:      ReplaceCEPreOp(sigmaStar_n0)
Prover 1:    x_14 =
Prover 1:      concatCEPreOp(x_8, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_8 =
Prover 1:      concatCEPreOp("\x5b\x20\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_6)
Prover 1:    x_6 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions

real	443m25.428s
user	73m57.094s
sys	0m20.243s
TIMEOUT (1 hour limit exceeded)
Test (./str_replace_all16.smt2):
Loading ./str_replace_all16.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (329ms)


337ms

real	0m0.464s
user	0m0.833s
sys	0m0.047s
unsat
Test (./str_replace_all160.smt2):
Loading ./str_replace_all160.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 0: proved (284ms)


292ms

real	0m0.381s
user	0m0.700s
sys	0m0.036s
unsat
Test (./str_replace_all161.smt2):
Loading ./str_replace_all161.smt2 ...
Prover 0: Options: -stringSolver=ostrich.OstrichStringTheory:-eager,-forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 0: 
Prover 0: Loading OSTRICH 2.0, a solver for string constraints
Prover 0: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 0: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 0: For more information, see https://github.com/uuverifiers/ostrich
Prover 0: 
Prover 0: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 0: Preprocessing ...
Prover 0: Constructing countermodel ...
Prover 1: Options: +cea
Prover 1: 
Prover 1: Loading OSTRICH 2.0, a solver for string constraints
Prover 1: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 1: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 1: For more information, see https://github.com/uuverifiers/ostrich
Prover 1: 
Prover 1: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 1: Preprocessing ...
Prover 1: Constructing countermodel ...
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 2: Options: -stringSolver=ap.theories.strings.SeqStringTheory
Prover 2: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 2: Preprocessing ...
Prover 2: Warning: string predicates not supported: str_replaceall/4
Prover 2: Constructing countermodel ...
Prover 3: Options: -stringSolver=ostrich.OstrichStringTheory:+forwardPropagation,+backwardPropagation,+nielsenSplitter
Prover 3: 
Prover 3: Loading OSTRICH 2.0, a solver for string constraints
Prover 3: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 3: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 3: For more information, see https://github.com/uuverifiers/ostrich
Prover 3: 
Prover 3: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 3: Preprocessing ...
Prover 3: Constructing countermodel ...
Prover 4: Options: -stringSolver=ostrich.OstrichStringTheory:+eager,+forwardPropagation,+backwardPropagation,-nielsenSplitter,+parikh
Prover 4: 
Prover 4: Loading OSTRICH 2.0, a solver for string constraints
Prover 4: (c) Matthew Hague, Denghang Hu, Philipp Rￃﾼmmer, 2018-2025
Prover 4: With contributions by Riccardo De Masellis, Zhilei Han, Oliver Markgraf.
Prover 4: For more information, see https://github.com/uuverifiers/ostrich
Prover 4: 
Prover 4: Warning: exit is only supported in incremental mode (option +incremental), ignoring it
Prover 4: Preprocessing ...
Prover 4: Constructing countermodel ...
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x2f\x61\x3\x3c\x2f\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 3: stopped
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\x3c\x2f\x61\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x3c\x\x3c\x2f\x61\x3e\x3c\x2f\x61\x\x3c\x\x3c\x2f\x61\x3e\x5d\x5c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3\x3c\x2f\x61\x3e\x5d\x5c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3\x3c\x2f\x61\x3e\x5d\x5c\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3\x3c\x2f\x61\x3e\x5d\x5c\x3c\x2f\x61\x3e\x5d\x\x3c\x2f\x6\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3\x3c\x2f\x61\x3e\x5d\x5c\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3\x3c\x2f\x61\x3e\x5d\x5c\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\x\x3c\x3\x3c\x2f\x61\x3e\x5d\x5c\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e\x3c\x2\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x5\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x5\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 4: Out of memory, giving up
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x5\x\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x5\x\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\x2f\x61\x3e\x5\x\x3c\x2f\x61\x3e\x5d\x5c\\x3c\x2f\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\x2f\x61\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\x2f\x61\x3c\x2f\x61\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\x2f\x61\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x3c\\x3c\x3c\x2f\x61\x3e\x5d\\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
Prover 1:    ... adding cut over result for x_24
Prover 1:    "\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a\x27\x20\x74\x69\x74\x6c\x65\x3d\x27\x27\x3e\\x\x3c\x2f\x61\x3e\x5d\x5c\x6e" =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1:    x_24 =
Prover 1:      concatCEPreOp(atk_sigmaStar_1, tmp_0)
Prover 1:      concatCEPreOp(x_22, "\x3c\x2f\x61\x3e\x5d\x5c\x6e")
Prover 1:    x_22 =
Prover 1:      concatCEPreOp(x_21, sigmaStar_263)
Prover 1:    tmp_0 =
Prover 1:      concatCEPreOp(atkPtn, atk_sigmaStar_2)
Prover 1:    x_21 =
Prover 1:      concatCEPreOp(x_19, "\x27\x3e")
Prover 1:    x_19 =
Prover 1:      concatCEPreOp(x_18, x_17)
Prover 1:    x_17 =
Prover 1:      ReplaceCEPreOp(sigmaStar_157)
Prover 1:    x_18 =
Prover 1:      concatCEPreOp(x_11, "\x27\x20\x74\x69\x74\x6c\x65\x3d\x27")
Prover 1:    x_11 =
Prover 1:      concatCEPreOp("\x5b\x3c\x61\x20\x68\x72\x65\x66\x3d\x27\x6d\x61\x69\x6c\x74\x6f\x3a", x_9)
Prover 1:    x_9 =
Prover 1:      ReplaceCEPreOp(sigmaStar_safe_50)
Prover 1: Warning: input is not straightline, some variables have multiple definitions
TIMEOUT


